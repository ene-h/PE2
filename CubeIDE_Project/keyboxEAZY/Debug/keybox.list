
keybox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d4c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f64  08007f64  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f6c  08007f6c  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08007f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac4  20000118  0800808c  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bdc  0800808c  00020bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015246  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309d  00000000  00000000  0003538e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  000394c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024735  00000000  00000000  0003a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001693f  00000000  00000000  0005eb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cebf0  00000000  00000000  000754b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001440a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004528  00000000  00000000  001440f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000118 	.word	0x20000118
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007ef8 	.word	0x08007ef8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000011c 	.word	0x2000011c
 8000200:	08007ef8 	.word	0x08007ef8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb24 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f842 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f918 	bl	8000748 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000518:	f000 f8be 	bl	8000698 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 800051c:	f000 f8ea 	bl	80006f4 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8000520:	f007 f810 	bl	8007544 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000524:	f000 f8a4 	bl	8000670 <MX_CRC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  report.dpad=0x06;  // move DPAD
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <main+0x80>)
 800052a:	2206      	movs	r2, #6
 800052c:	701a      	strb	r2, [r3, #0]
	  report.buttons=0x01;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <main+0x80>)
 8000530:	2201      	movs	r2, #1
 8000532:	805a      	strh	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS,(uint8_t*)&report,sizeof(report));
 8000534:	2204      	movs	r2, #4
 8000536:	4914      	ldr	r1, [pc, #80]	; (8000588 <main+0x80>)
 8000538:	4814      	ldr	r0, [pc, #80]	; (800058c <main+0x84>)
 800053a:	f005 fc5f 	bl	8005dfc <USBD_HID_SendReport>
	  HAL_Delay(200); 		       // Press all key for 50 milliseconds
 800053e:	20c8      	movs	r0, #200	; 0xc8
 8000540:	f000 fb7c 	bl	8000c3c <HAL_Delay>
	  report.dpad=0x01;  // move DPAD
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <main+0x80>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
	  report.buttons=0x00;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <main+0x80>)
 800054c:	2200      	movs	r2, #0
 800054e:	805a      	strh	r2, [r3, #2]

	  USBD_HID_SendReport(&hUsbDeviceFS,(uint8_t*)&report,sizeof(report));
 8000550:	2204      	movs	r2, #4
 8000552:	490d      	ldr	r1, [pc, #52]	; (8000588 <main+0x80>)
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <main+0x84>)
 8000556:	f005 fc51 	bl	8005dfc <USBD_HID_SendReport>
	  HAL_Delay(200); 	       // Repeat this task on every 1 second
 800055a:	20c8      	movs	r0, #200	; 0xc8
 800055c:	f000 fb6e 	bl	8000c3c <HAL_Delay>
	  if (HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)) {
 8000560:	2108      	movs	r1, #8
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <main+0x88>)
 8000564:	f000 fe50 	bl	8001208 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d005      	beq.n	800057a <main+0x72>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	2108      	movs	r1, #8
 8000572:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0x8c>)
 8000574:	f000 fe60 	bl	8001238 <HAL_GPIO_WritePin>
 8000578:	e7d6      	b.n	8000528 <main+0x20>
	} else {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2108      	movs	r1, #8
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <main+0x8c>)
 8000580:	f000 fe5a 	bl	8001238 <HAL_GPIO_WritePin>
	  report.dpad=0x06;  // move DPAD
 8000584:	e7d0      	b.n	8000528 <main+0x20>
 8000586:	bf00      	nop
 8000588:	200001d4 	.word	0x200001d4
 800058c:	200001e0 	.word	0x200001e0
 8000590:	40020800 	.word	0x40020800
 8000594:	40020000 	.word	0x40020000

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	; 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f007 fc9e 	bl	8007ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <SystemClock_Config+0xd0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a28      	ldr	r2, [pc, #160]	; (8000668 <SystemClock_Config+0xd0>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b26      	ldr	r3, [pc, #152]	; (8000668 <SystemClock_Config+0xd0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a22      	ldr	r2, [pc, #136]	; (800066c <SystemClock_Config+0xd4>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 800060c:	2390      	movs	r3, #144	; 0x90
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000614:	2306      	movs	r3, #6
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4618      	mov	r0, r3
 8000622:	f003 f88d 	bl	8003740 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800062c:	f000 f922 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000634:	2303      	movs	r3, #3
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000640:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fa02 	bl	8002a58 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800065a:	f000 f90b 	bl	8000874 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_CRC_Init+0x20>)
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <MX_CRC_Init+0x24>)
 8000678:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_CRC_Init+0x20>)
 800067c:	f000 fc13 	bl	8000ea6 <HAL_CRC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000686:	f000 f8f5 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000134 	.word	0x20000134
 8000694:	40023000 	.word	0x40023000

08000698 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C3_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_I2C3_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2C3_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_I2C3_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C3_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_I2C3_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_I2C3_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_I2C3_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_I2C3_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_I2C3_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_I2C3_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_I2C3_Init+0x50>)
 80006d6:	f000 fdc9 	bl	800126c <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 f8c8 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000013c 	.word	0x2000013c
 80006ec:	40005c00 	.word	0x40005c00
 80006f0:	000186a0 	.word	0x000186a0

080006f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART6_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART6_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART6_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART6_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART6_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART6_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART6_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART6_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART6_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART6_UART_Init+0x4c>)
 800072c:	f003 faa6 	bl	8003c7c <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f89d 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000190 	.word	0x20000190
 8000744:	40011400 	.word	0x40011400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b40      	ldr	r3, [pc, #256]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a3f      	ldr	r2, [pc, #252]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a38      	ldr	r2, [pc, #224]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b36      	ldr	r3, [pc, #216]	; (8000864 <MX_GPIO_Init+0x11c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_GPIO_Init+0x11c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <MX_GPIO_Init+0x11c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <MX_GPIO_Init+0x11c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_GPIO_Init+0x11c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <MX_GPIO_Init+0x11c>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <MX_GPIO_Init+0x11c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	4825      	ldr	r0, [pc, #148]	; (8000868 <MX_GPIO_Init+0x120>)
 80007d4:	f000 fd30 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEFT_Pin DOWN_Pin RIGHT_Pin UP_Pin
                           HK_Pin HP_Pin OPT6_Pin OPT5_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|DOWN_Pin|RIGHT_Pin|UP_Pin
 80007d8:	f641 033f 	movw	r3, #6207	; 0x183f
 80007dc:	617b      	str	r3, [r7, #20]
                          |HK_Pin|HP_Pin|OPT6_Pin|OPT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	481f      	ldr	r0, [pc, #124]	; (800086c <MX_GPIO_Init+0x124>)
 80007ee:	f000 fb77 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4817      	ldr	r0, [pc, #92]	; (8000868 <MX_GPIO_Init+0x120>)
 800080a:	f000 fb69 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LK_Pin LP_Pin MK_Pin MP_Pin */
  GPIO_InitStruct.Pin = LK_Pin|LP_Pin|MK_Pin|MP_Pin;
 800080e:	23f0      	movs	r3, #240	; 0xf0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4811      	ldr	r0, [pc, #68]	; (8000868 <MX_GPIO_Init+0x120>)
 8000822:	f000 fb5d 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXK_Pin EXP_Pin OPT4_Pin OPT3_Pin
                           OPT2_Pin OPT1_Pin */
  GPIO_InitStruct.Pin = EXK_Pin|EXP_Pin|OPT4_Pin|OPT3_Pin
 8000826:	f240 13e3 	movw	r3, #483	; 0x1e3
 800082a:	617b      	str	r3, [r7, #20]
                          |OPT2_Pin|OPT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_GPIO_Init+0x128>)
 800083c:	f000 fb50 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_GPIO_Init+0x128>)
 8000856:	f000 fb43 	bl	8000ee0 <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800
 8000870:	40020400 	.word	0x40020400

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <HAL_CRC_MspInit+0x3c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d10d      	bne.n	80008fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_CRC_MspInit+0x40>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <HAL_CRC_MspInit+0x40>)
 80008ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_CRC_MspInit+0x40>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023000 	.word	0x40023000
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <HAL_I2C_MspInit+0xc4>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d14b      	bne.n	80009ce <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <HAL_I2C_MspInit+0xc8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <HAL_I2C_MspInit+0xc8>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <HAL_I2C_MspInit+0xc8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <HAL_I2C_MspInit+0xc8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a20      	ldr	r2, [pc, #128]	; (80009dc <HAL_I2C_MspInit+0xc8>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <HAL_I2C_MspInit+0xc8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800096e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000974:	2312      	movs	r3, #18
 8000976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000978:	2301      	movs	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000980:	2304      	movs	r3, #4
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4815      	ldr	r0, [pc, #84]	; (80009e0 <HAL_I2C_MspInit+0xcc>)
 800098c:	f000 faa8 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000996:	2312      	movs	r3, #18
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009a2:	2304      	movs	r3, #4
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <HAL_I2C_MspInit+0xd0>)
 80009ae:	f000 fa97 	bl	8000ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_I2C_MspInit+0xc8>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_I2C_MspInit+0xc8>)
 80009bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_I2C_MspInit+0xc8>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40005c00 	.word	0x40005c00
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020000 	.word	0x40020000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <HAL_UART_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a42:	23c0      	movs	r3, #192	; 0xc0
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a52:	2308      	movs	r3, #8
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <HAL_UART_MspInit+0x8c>)
 8000a5e:	f000 fa3f 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40011400 	.word	0x40011400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020800 	.word	0x40020800

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f89a 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <OTG_FS_IRQHandler+0x10>)
 8000ad2:	f000 fe66 	bl	80017a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200006bc 	.word	0x200006bc

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f007 f9b5 	bl	8007ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fce7 	bl	8000508 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8000b48:	08007f74 	.word	0x08007f74
  ldr r2, =_sbss
 8000b4c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8000b50:	20000bdc 	.word	0x20000bdc

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f94f 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fe78 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f967 	bl	8000e8e <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f92f 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	200001d8 	.word	0x200001d8

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200001d8 	.word	0x200001d8

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff ffee 	bl	8000c24 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c62:	bf00      	nop
 8000c64:	f7ff ffde 	bl	8000c24 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff29 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff3e 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff31 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa2 	bl	8000de0 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e00e      	b.n	8000ed6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	795b      	ldrb	r3, [r3, #5]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d105      	bne.n	8000ece <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fd01 	bl	80008d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e165      	b.n	80011c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 8154 	bne.w	80011c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80ae 	beq.w	80011c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_GPIO_Init+0x300>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a5c      	ldr	r2, [pc, #368]	; (80011e0 <HAL_GPIO_Init+0x300>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b5a      	ldr	r3, [pc, #360]	; (80011e0 <HAL_GPIO_Init+0x300>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a58      	ldr	r2, [pc, #352]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4f      	ldr	r2, [pc, #316]	; (80011e8 <HAL_GPIO_Init+0x308>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4e      	ldr	r2, [pc, #312]	; (80011ec <HAL_GPIO_Init+0x30c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <HAL_GPIO_Init+0x310>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4b      	ldr	r2, [pc, #300]	; (80011f8 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x20a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4a      	ldr	r2, [pc, #296]	; (80011fc <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a49      	ldr	r2, [pc, #292]	; (8001200 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x202>
 80010de:	2306      	movs	r3, #6
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	; (80011e4 <HAL_GPIO_Init+0x304>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <HAL_GPIO_Init+0x324>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113e:	4a31      	ldr	r2, [pc, #196]	; (8001204 <HAL_GPIO_Init+0x324>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <HAL_GPIO_Init+0x324>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001168:	4a26      	ldr	r2, [pc, #152]	; (8001204 <HAL_GPIO_Init+0x324>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <HAL_GPIO_Init+0x324>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <HAL_GPIO_Init+0x324>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_GPIO_Init+0x324>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011bc:	4a11      	ldr	r2, [pc, #68]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae96 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e001      	b.n	800122a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e12b      	b.n	80014d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d106      	bne.n	8001298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fb3e 	bl	8000914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2224      	movs	r2, #36	; 0x24
 800129c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012d0:	f001 fcb4 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a81      	ldr	r2, [pc, #516]	; (80014e0 <HAL_I2C_Init+0x274>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d807      	bhi.n	80012f0 <HAL_I2C_Init+0x84>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4a80      	ldr	r2, [pc, #512]	; (80014e4 <HAL_I2C_Init+0x278>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	bf94      	ite	ls
 80012e8:	2301      	movls	r3, #1
 80012ea:	2300      	movhi	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	e006      	b.n	80012fe <HAL_I2C_Init+0x92>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4a7d      	ldr	r2, [pc, #500]	; (80014e8 <HAL_I2C_Init+0x27c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	bf94      	ite	ls
 80012f8:	2301      	movls	r3, #1
 80012fa:	2300      	movhi	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0e7      	b.n	80014d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4a78      	ldr	r2, [pc, #480]	; (80014ec <HAL_I2C_Init+0x280>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0c9b      	lsrs	r3, r3, #18
 8001310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	430a      	orrs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a6a      	ldr	r2, [pc, #424]	; (80014e0 <HAL_I2C_Init+0x274>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d802      	bhi.n	8001340 <HAL_I2C_Init+0xd4>
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	3301      	adds	r3, #1
 800133e:	e009      	b.n	8001354 <HAL_I2C_Init+0xe8>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <HAL_I2C_Init+0x284>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	3301      	adds	r3, #1
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	430b      	orrs	r3, r1
 800135a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	495c      	ldr	r1, [pc, #368]	; (80014e0 <HAL_I2C_Init+0x274>)
 8001370:	428b      	cmp	r3, r1
 8001372:	d819      	bhi.n	80013a8 <HAL_I2C_Init+0x13c>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1e59      	subs	r1, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001382:	1c59      	adds	r1, r3, #1
 8001384:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001388:	400b      	ands	r3, r1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <HAL_I2C_Init+0x138>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1e59      	subs	r1, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fbb1 f3f3 	udiv	r3, r1, r3
 800139c:	3301      	adds	r3, #1
 800139e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a2:	e051      	b.n	8001448 <HAL_I2C_Init+0x1dc>
 80013a4:	2304      	movs	r3, #4
 80013a6:	e04f      	b.n	8001448 <HAL_I2C_Init+0x1dc>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d111      	bne.n	80013d4 <HAL_I2C_Init+0x168>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1e58      	subs	r0, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6859      	ldr	r1, [r3, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	440b      	add	r3, r1
 80013be:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c2:	3301      	adds	r3, #1
 80013c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	e012      	b.n	80013fa <HAL_I2C_Init+0x18e>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1e58      	subs	r0, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	0099      	lsls	r1, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_Init+0x196>
 80013fe:	2301      	movs	r3, #1
 8001400:	e022      	b.n	8001448 <HAL_I2C_Init+0x1dc>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10e      	bne.n	8001428 <HAL_I2C_Init+0x1bc>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e58      	subs	r0, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6859      	ldr	r1, [r3, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	440b      	add	r3, r1
 8001418:	fbb0 f3f3 	udiv	r3, r0, r3
 800141c:	3301      	adds	r3, #1
 800141e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001426:	e00f      	b.n	8001448 <HAL_I2C_Init+0x1dc>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1e58      	subs	r0, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	0099      	lsls	r1, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	6809      	ldr	r1, [r1, #0]
 800144c:	4313      	orrs	r3, r2
 800144e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6911      	ldr	r1, [r2, #16]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68d2      	ldr	r2, [r2, #12]
 8001482:	4311      	orrs	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	430b      	orrs	r3, r1
 800148a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2220      	movs	r2, #32
 80014c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	000186a0 	.word	0x000186a0
 80014e4:	001e847f 	.word	0x001e847f
 80014e8:	003d08ff 	.word	0x003d08ff
 80014ec:	431bde83 	.word	0x431bde83
 80014f0:	10624dd3 	.word	0x10624dd3

080014f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	b08f      	sub	sp, #60	; 0x3c
 80014f8:	af0a      	add	r7, sp, #40	; 0x28
 80014fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e116      	b.n	8001734 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d106      	bne.n	8001526 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f006 f957 	bl	80077d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2203      	movs	r2, #3
 800152a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f002 ff70 	bl	800442a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	687e      	ldr	r6, [r7, #4]
 8001552:	466d      	mov	r5, sp
 8001554:	f106 0410 	add.w	r4, r6, #16
 8001558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001560:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001564:	e885 0003 	stmia.w	r5, {r0, r1}
 8001568:	1d33      	adds	r3, r6, #4
 800156a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f002 fe47 	bl	8004200 <USB_CoreInit>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0d7      	b.n	8001734 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f002 ff5e 	bl	800444c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e04a      	b.n	800162c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	333d      	adds	r3, #61	; 0x3d
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	333c      	adds	r3, #60	; 0x3c
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	b298      	uxth	r0, r3
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	3344      	adds	r3, #68	; 0x44
 80015d2:	4602      	mov	r2, r0
 80015d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	3340      	adds	r3, #64	; 0x40
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	3348      	adds	r3, #72	; 0x48
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	334c      	adds	r3, #76	; 0x4c
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	3354      	adds	r3, #84	; 0x54
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	3301      	adds	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3af      	bcc.n	8001596 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e044      	b.n	80016c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	3301      	adds	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3b5      	bcc.n	800163c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	687e      	ldr	r6, [r7, #4]
 80016d8:	466d      	mov	r5, sp
 80016da:	f106 0410 	add.w	r4, r6, #16
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ee:	1d33      	adds	r3, r6, #4
 80016f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f2:	6838      	ldr	r0, [r7, #0]
 80016f4:	f002 fef6 	bl	80044e4 <USB_DevInit>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e014      	b.n	8001734 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	2b01      	cmp	r3, #1
 8001720:	d102      	bne.n	8001728 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f001 f974 	bl	8002a10 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f004 f838 	bl	80057a2 <USB_DevDisconnect>

  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800173c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_PCD_Start+0x1c>
 8001754:	2302      	movs	r3, #2
 8001756:	e020      	b.n	800179a <HAL_PCD_Start+0x5e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	2b01      	cmp	r3, #1
 8001766:	d109      	bne.n	800177c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fe41 	bl	8004408 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f003 ffe8 	bl	8005760 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b08d      	sub	sp, #52	; 0x34
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 f8a6 	bl	800590a <USB_GetMode>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 84b7 	bne.w	8002134 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f004 f80a 	bl	80057e4 <USB_ReadInterrupts>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 84ad 	beq.w	8002132 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fff7 	bl	80057e4 <USB_ReadInterrupts>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d107      	bne.n	8001810 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f002 0202 	and.w	r2, r2, #2
 800180e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f003 ffe5 	bl	80057e4 <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b10      	cmp	r3, #16
 8001822:	d161      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699a      	ldr	r2, [r3, #24]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0210 	bic.w	r2, r2, #16
 8001832:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	f003 020f 	and.w	r2, r3, #15
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	3304      	adds	r3, #4
 8001852:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	0c5b      	lsrs	r3, r3, #17
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	2b02      	cmp	r3, #2
 800185e:	d124      	bne.n	80018aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d035      	beq.n	80018d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800187a:	b29b      	uxth	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	6a38      	ldr	r0, [r7, #32]
 8001880:	f003 fe1c 	bl	80054bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001890:	441a      	add	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	6a1a      	ldr	r2, [r3, #32]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018a2:	441a      	add	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	621a      	str	r2, [r3, #32]
 80018a8:	e016      	b.n	80018d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	0c5b      	lsrs	r3, r3, #17
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d110      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018bc:	2208      	movs	r2, #8
 80018be:	4619      	mov	r1, r3
 80018c0:	6a38      	ldr	r0, [r7, #32]
 80018c2:	f003 fdfb 	bl	80054bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d2:	441a      	add	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0210 	orr.w	r2, r2, #16
 80018e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 ff79 	bl	80057e4 <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018fc:	f040 80a7 	bne.w	8001a4e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f003 ff7e 	bl	800580a <USB_ReadDevAllOutEpInterrupt>
 800190e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001910:	e099      	b.n	8001a46 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 808e 	beq.w	8001a3a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f003 ffa2 	bl	8005872 <USB_ReadDevOutEPInterrupt>
 800192e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00c      	beq.n	8001954 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001946:	461a      	mov	r2, r3
 8001948:	2301      	movs	r3, #1
 800194a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800194c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fed8 	bl	8002704 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00c      	beq.n	8001978 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800196a:	461a      	mov	r2, r3
 800196c:	2308      	movs	r3, #8
 800196e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 ffae 	bl	80028d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	015a      	lsls	r2, r3, #5
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	4413      	add	r3, r2
 800198a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800198e:	461a      	mov	r2, r3
 8001990:	2310      	movs	r3, #16
 8001992:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d030      	beq.n	8001a00 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	2b80      	cmp	r3, #128	; 0x80
 80019a8:	d109      	bne.n	80019be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	78db      	ldrb	r3, [r3, #3]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2200      	movs	r2, #0
 80019e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f006 f80f 	bl	8007a0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	015a      	lsls	r2, r3, #5
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019fa:	461a      	mov	r2, r3
 80019fc:	2302      	movs	r3, #2
 80019fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a16:	461a      	mov	r2, r3
 8001a18:	2320      	movs	r3, #32
 8001a1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	015a      	lsls	r2, r3, #5
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a32:	461a      	mov	r2, r3
 8001a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a38:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f af62 	bne.w	8001912 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fec6 	bl	80057e4 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a62:	f040 80db 	bne.w	8001c1c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 fee7 	bl	800583e <USB_ReadDevAllInEpInterrupt>
 8001a70:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a76:	e0cd      	b.n	8001c14 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80c2 	beq.w	8001c08 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 ff0d 	bl	80058ae <USB_ReadDevInEPInterrupt>
 8001a94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d057      	beq.n	8001b50 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69f9      	ldr	r1, [r7, #28]
 8001abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d132      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	334c      	adds	r3, #76	; 0x4c
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4403      	add	r3, r0
 8001afe:	3348      	adds	r3, #72	; 0x48
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4419      	add	r1, r3
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4403      	add	r3, r0
 8001b12:	334c      	adds	r3, #76	; 0x4c
 8001b14:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d113      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x3a2>
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b20:	4613      	mov	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	3354      	adds	r3, #84	; 0x54
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d108      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2101      	movs	r1, #1
 8001b40:	f003 ff14 	bl	800596c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f005 fed9 	bl	8007902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	015a      	lsls	r2, r3, #5
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	4413      	add	r3, r2
 8001b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b66:	461a      	mov	r2, r3
 8001b68:	2308      	movs	r3, #8
 8001b6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b82:	461a      	mov	r2, r3
 8001b84:	2310      	movs	r3, #16
 8001b86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d023      	beq.n	8001bf6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb0:	6a38      	ldr	r0, [r7, #32]
 8001bb2:	f002 fdf5 	bl	80047a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	3338      	adds	r3, #56	; 0x38
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	78db      	ldrb	r3, [r3, #3]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d108      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f005 ff26 	bl	8007a30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	015a      	lsls	r2, r3, #5
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fcf0 	bl	80025e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	085b      	lsrs	r3, r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f47f af2e 	bne.w	8001a78 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fddf 	bl	80057e4 <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c30:	d122      	bne.n	8001c78 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d108      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f006 f88e 	bl	8007d7c <HAL_PCDEx_LPM_Callback>
 8001c60:	e002      	b.n	8001c68 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f005 fec4 	bl	80079f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fdb1 	bl	80057e4 <USB_ReadInterrupts>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c8c:	d112      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f005 fe80 	bl	80079a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cb2:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fd93 	bl	80057e4 <USB_ReadInterrupts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cc8:	d121      	bne.n	8001d0e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001cd8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d111      	bne.n	8001d08 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001cfe:	2101      	movs	r1, #1
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f006 f83b 	bl	8007d7c <HAL_PCDEx_LPM_Callback>
 8001d06:	e002      	b.n	8001d0e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f005 fe4b 	bl	80079a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 fd66 	bl	80057e4 <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d22:	f040 80b7 	bne.w	8001e94 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2110      	movs	r1, #16
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 fd2d 	bl	80047a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4a:	e046      	b.n	8001dda <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d70:	0151      	lsls	r1, r2, #5
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	440a      	add	r2, r1
 8001d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d92:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da4:	0151      	lsls	r1, r2, #5
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	440a      	add	r2, r1
 8001daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001dae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001db2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc4:	0151      	lsls	r1, r2, #5
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	440a      	add	r2, r1
 8001dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001dce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dd2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3b3      	bcc.n	8001d4c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001df2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001df6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d016      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e10:	f043 030b 	orr.w	r3, r3, #11
 8001e14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e26:	f043 030b 	orr.w	r3, r3, #11
 8001e2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2c:	e015      	b.n	8001e5a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e40:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e44:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e54:	f043 030b 	orr.w	r3, r3, #11
 8001e58:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e6c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f003 fd74 	bl	800596c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 fca3 	bl	80057e4 <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea8:	d124      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fd39 	bl	8005926 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fcee 	bl	800489a <USB_GetDevSpeed>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681c      	ldr	r4, [r3, #0]
 8001eca:	f000 feab 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8001ece:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f002 f9f3 	bl	80042c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f005 fd37 	bl	8007952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 fc73 	bl	80057e4 <USB_ReadInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d10a      	bne.n	8001f1e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f005 fd14 	bl	8007936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f002 0208 	and.w	r2, r2, #8
 8001f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fc5e 	bl	80057e4 <USB_ReadInterrupts>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2e:	2b80      	cmp	r3, #128	; 0x80
 8001f30:	d122      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f3e:	2301      	movs	r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	e014      	b.n	8001f6e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fb0f 	bl	8002586 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3e5      	bcc.n	8001f44 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fc31 	bl	80057e4 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f8c:	d13b      	bne.n	8002006 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f8e:	2301      	movs	r3, #1
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
 8001f92:	e02b      	b.n	8001fec <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3340      	adds	r3, #64	; 0x40
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d115      	bne.n	8001fe6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001fba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da12      	bge.n	8001fe6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	333f      	adds	r3, #63	; 0x3f
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fad0 	bl	8002586 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	3301      	adds	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3ce      	bcc.n	8001f94 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fbea 	bl	80057e4 <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800201a:	d155      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
 8002020:	e045      	b.n	80020ae <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d12e      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800204a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	da2b      	bge.n	80020a8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800205c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002060:	429a      	cmp	r2, r3
 8002062:	d121      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020a4:	6053      	str	r3, [r2, #4]
            break;
 80020a6:	e007      	b.n	80020b8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	3301      	adds	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d3b4      	bcc.n	8002022 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fb89 	bl	80057e4 <USB_ReadInterrupts>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d10a      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f005 fcb8 	bl	8007a54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 fb73 	bl	80057e4 <USB_ReadInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b04      	cmp	r3, #4
 8002106:	d115      	bne.n	8002134 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f005 fca8 	bl	8007a70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	430a      	orrs	r2, r1
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	e000      	b.n	8002134 <HAL_PCD_IRQHandler+0x992>
      return;
 8002132:	bf00      	nop
    }
  }
}
 8002134:	3734      	adds	r7, #52	; 0x34
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}

0800213a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_PCD_SetAddress+0x1a>
 8002150:	2302      	movs	r3, #2
 8002152:	e013      	b.n	800217c <HAL_PCD_SetAddress+0x42>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f003 fad1 	bl	8005714 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4603      	mov	r3, r0
 8002194:	70fb      	strb	r3, [r7, #3]
 8002196:	460b      	mov	r3, r1
 8002198:	803b      	strh	r3, [r7, #0]
 800219a:	4613      	mov	r3, r2
 800219c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da0f      	bge.n	80021ca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	3338      	adds	r3, #56	; 0x38
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	705a      	strb	r2, [r3, #1]
 80021c8:	e00f      	b.n	80021ea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 020f 	and.w	r2, r3, #15
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021f6:	883a      	ldrh	r2, [r7, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	78ba      	ldrb	r2, [r7, #2]
 8002200:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	785b      	ldrb	r3, [r3, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002214:	78bb      	ldrb	r3, [r7, #2]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d102      	bne.n	8002220 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_PCD_EP_Open+0xaa>
 800222a:	2302      	movs	r3, #2
 800222c:	e00e      	b.n	800224c <HAL_PCD_EP_Open+0xc8>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fb51 	bl	80048e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800224a:	7afb      	ldrb	r3, [r7, #11]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002264:	2b00      	cmp	r3, #0
 8002266:	da0f      	bge.n	8002288 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	f003 020f 	and.w	r2, r3, #15
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	3338      	adds	r3, #56	; 0x38
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	705a      	strb	r2, [r3, #1]
 8002286:	e00f      	b.n	80022a8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 020f 	and.w	r2, r3, #15
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_PCD_EP_Close+0x6e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e00e      	b.n	80022e0 <HAL_PCD_EP_Close+0x8c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f002 fb8f 	bl	80049f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	460b      	mov	r3, r1
 80022f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f8:	7afb      	ldrb	r3, [r7, #11]
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2200      	movs	r2, #0
 8002328:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	b2da      	uxtb	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	6979      	ldr	r1, [r7, #20]
 800235c:	f002 fe6e 	bl	800503c <USB_EP0StartXfer>
 8002360:	e008      	b.n	8002374 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	6979      	ldr	r1, [r7, #20]
 8002370:	f002 fc1c 	bl	8004bac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	460b      	mov	r3, r1
 800238c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	f003 020f 	and.w	r2, r3, #15
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	3338      	adds	r3, #56	; 0x38
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4413      	add	r3, r2
 80023a2:	3304      	adds	r3, #4
 80023a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2201      	movs	r2, #1
 80023bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023be:	7afb      	ldrb	r3, [r7, #11]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d102      	bne.n	80023d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	6979      	ldr	r1, [r7, #20]
 80023f0:	f002 fe24 	bl	800503c <USB_EP0StartXfer>
 80023f4:	e008      	b.n	8002408 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	6979      	ldr	r1, [r7, #20]
 8002404:	f002 fbd2 	bl	8004bac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	d901      	bls.n	8002430 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e050      	b.n	80024d2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002434:	2b00      	cmp	r3, #0
 8002436:	da0f      	bge.n	8002458 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	f003 020f 	and.w	r2, r3, #15
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	3338      	adds	r3, #56	; 0x38
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	3304      	adds	r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	705a      	strb	r2, [r3, #1]
 8002456:	e00d      	b.n	8002474 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	3304      	adds	r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_PCD_EP_SetStall+0x82>
 8002490:	2302      	movs	r3, #2
 8002492:	e01e      	b.n	80024d2 <HAL_PCD_EP_SetStall+0xc0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68f9      	ldr	r1, [r7, #12]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 f862 	bl	800556c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	b2d9      	uxtb	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024c2:	461a      	mov	r2, r3
 80024c4:	f003 fa52 	bl	800596c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	f003 020f 	and.w	r2, r3, #15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d901      	bls.n	80024f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e042      	b.n	800257e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	da0f      	bge.n	8002520 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	f003 020f 	and.w	r2, r3, #15
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	3338      	adds	r3, #56	; 0x38
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	705a      	strb	r2, [r3, #1]
 800251e:	e00f      	b.n	8002540 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	f003 020f 	and.w	r2, r3, #15
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	3304      	adds	r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_PCD_EP_ClrStall+0x86>
 800255c:	2302      	movs	r3, #2
 800255e:	e00e      	b.n	800257e <HAL_PCD_EP_ClrStall+0xa4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68f9      	ldr	r1, [r7, #12]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 f86a 	bl	8005648 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002596:	2b00      	cmp	r3, #0
 8002598:	da0c      	bge.n	80025b4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 020f 	and.w	r2, r3, #15
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	3338      	adds	r3, #56	; 0x38
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	3304      	adds	r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	e00c      	b.n	80025ce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	f003 020f 	and.w	r2, r3, #15
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fe89 	bl	80052ec <USB_EPStopXfer>
 80025da:	4603      	mov	r3, r0
 80025dc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025de:	7afb      	ldrb	r3, [r7, #11]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	3338      	adds	r3, #56	; 0x38
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	3304      	adds	r3, #4
 800260e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a1a      	ldr	r2, [r3, #32]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	429a      	cmp	r2, r3
 800261a:	d901      	bls.n	8002620 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e06c      	b.n	80026fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	429a      	cmp	r2, r3
 8002634:	d902      	bls.n	800263c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	3303      	adds	r3, #3
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002644:	e02b      	b.n	800269e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	429a      	cmp	r2, r3
 800265a:	d902      	bls.n	8002662 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3303      	adds	r3, #3
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6919      	ldr	r1, [r3, #16]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800267a:	b2db      	uxtb	r3, r3
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	4603      	mov	r3, r0
 8002680:	6978      	ldr	r0, [r7, #20]
 8002682:	f002 fedd 	bl	8005440 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	441a      	add	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	441a      	add	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d809      	bhi.n	80026c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1a      	ldr	r2, [r3, #32]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026bc:	429a      	cmp	r2, r3
 80026be:	d203      	bcs.n	80026c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1be      	bne.n	8002646 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d811      	bhi.n	80026f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	6939      	ldr	r1, [r7, #16]
 80026f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026f4:	4013      	ands	r3, r2
 80026f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	333c      	adds	r3, #60	; 0x3c
 800271c:	3304      	adds	r3, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d17b      	bne.n	8002832 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	4a61      	ldr	r2, [pc, #388]	; (80028cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	f240 80b9 	bls.w	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80b3 	beq.w	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4413      	add	r3, r2
 8002762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002766:	461a      	mov	r2, r3
 8002768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800276c:	6093      	str	r3, [r2, #8]
 800276e:	e0a7      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002786:	461a      	mov	r2, r3
 8002788:	2320      	movs	r3, #32
 800278a:	6093      	str	r3, [r2, #8]
 800278c:	e098      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 8093 	bne.w	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4a4b      	ldr	r2, [pc, #300]	; (80028cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d90f      	bls.n	80027c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b8:	461a      	mov	r2, r3
 80027ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027be:	6093      	str	r3, [r2, #8]
 80027c0:	e07e      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	0159      	lsls	r1, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	440b      	add	r3, r1
 80027e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	1ad2      	subs	r2, r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d114      	bne.n	8002824 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800280c:	461a      	mov	r2, r3
 800280e:	2101      	movs	r1, #1
 8002810:	f003 f8ac 	bl	800596c <USB_EP0_OutStart>
 8002814:	e006      	b.n	8002824 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	441a      	add	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f005 f84e 	bl	80078cc <HAL_PCD_DataOutStageCallback>
 8002830:	e046      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d124      	bne.n	8002884 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002856:	6093      	str	r3, [r2, #8]
 8002858:	e032      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002870:	461a      	mov	r2, r3
 8002872:	2320      	movs	r3, #32
 8002874:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	4619      	mov	r1, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f005 f825 	bl	80078cc <HAL_PCD_DataOutStageCallback>
 8002882:	e01d      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d114      	bne.n	80028b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d108      	bne.n	80028b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028ac:	461a      	mov	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f003 f85c 	bl	800596c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f005 f806 	bl	80078cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	4f54300a 	.word	0x4f54300a
 80028d0:	4f54310a 	.word	0x4f54310a

080028d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	333c      	adds	r3, #60	; 0x3c
 80028ec:	3304      	adds	r3, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <PCD_EP_OutSetupPacket_int+0x88>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d90e      	bls.n	8002928 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002920:	461a      	mov	r2, r3
 8002922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002926:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f004 ffbd 	bl	80078a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <PCD_EP_OutSetupPacket_int+0x88>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d90c      	bls.n	8002950 <PCD_EP_OutSetupPacket_int+0x7c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002948:	461a      	mov	r2, r3
 800294a:	2101      	movs	r1, #1
 800294c:	f003 f80e 	bl	800596c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	4f54300a 	.word	0x4f54300a

08002960 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
 800296c:	4613      	mov	r3, r2
 800296e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800297e:	883b      	ldrh	r3, [r7, #0]
 8002980:	0419      	lsls	r1, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	430a      	orrs	r2, r1
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
 800298c:	e028      	b.n	80029e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e00d      	b.n	80029be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	3340      	adds	r3, #64	; 0x40
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4413      	add	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	3301      	adds	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d3ec      	bcc.n	80029a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029c8:	883b      	ldrh	r3, [r7, #0]
 80029ca:	0418      	lsls	r0, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4302      	orrs	r2, r0
 80029d8:	3340      	adds	r3, #64	; 0x40
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	f043 0303 	orr.w	r3, r3, #3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0cc      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d90c      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d044      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e067      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4934      	ldr	r1, [pc, #208]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7fe f86c 	bl	8000c24 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe f868 	bl	8000c24 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e04f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d20c      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 fb7f 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd ffcc 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08007f4c 	.word	0x08007f4c
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000000 	.word	0x20000000

08002c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c40:	f7ff fff0 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08007f5c 	.word	0x08007f5c

08002c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c68:	f7ff ffdc 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0b5b      	lsrs	r3, r3, #13
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08007f5c 	.word	0x08007f5c

08002c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	496c      	ldr	r1, [pc, #432]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002cf2:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	4960      	ldr	r1, [pc, #384]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002d10:	2301      	movs	r3, #1
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d017      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d20:	4b58      	ldr	r3, [pc, #352]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4955      	ldr	r1, [pc, #340]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002d40:	2301      	movs	r3, #1
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d5c:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6a:	4946      	ldr	r1, [pc, #280]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 808a 	beq.w	8002eae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a38      	ldr	r2, [pc, #224]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002db6:	4b34      	ldr	r3, [pc, #208]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dc2:	f7fd ff2f 	bl	8000c24 <HAL_GetTick>
 8002dc6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dca:	f7fd ff2b 	bl	8000c24 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e278      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de8:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02f      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d028      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e10:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d114      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fd fef9 	bl	8000c24 <HAL_GetTick>
 8002e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fd fef5 	bl	8000c24 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e240      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ee      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e64:	d114      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	4902      	ldr	r1, [pc, #8]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	608b      	str	r3, [r1, #8]
 8002e80:	e00c      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42470e40 	.word	0x42470e40
 8002e90:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a49      	ldr	r2, [pc, #292]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e9a:	6093      	str	r3, [r2, #8]
 8002e9c:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	4944      	ldr	r1, [pc, #272]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002ec0:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002ec2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002ed0:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	4937      	ldr	r1, [pc, #220]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ef2:	4b32      	ldr	r3, [pc, #200]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	492e      	ldr	r1, [pc, #184]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d011      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	4926      	ldr	r1, [pc, #152]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f32:	d101      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002f34:	2301      	movs	r3, #1
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	491a      	ldr	r1, [pc, #104]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d011      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f74:	4911      	ldr	r1, [pc, #68]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f84:	d101      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002f86:	2301      	movs	r3, #1
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f98:	f040 80ff 	bne.w	800319a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fa2:	f7fd fe3f 	bl	8000c24 <HAL_GetTick>
 8002fa6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fa8:	e00e      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002faa:	f7fd fe3b 	bl	8000c24 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d907      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e188      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	424711e0 	.word	0x424711e0
 8002fc4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fc8:	4b7e      	ldr	r3, [pc, #504]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ea      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d028      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d124      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ffc:	4b71      	ldr	r3, [pc, #452]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	3301      	adds	r3, #1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003014:	0e1b      	lsrs	r3, r3, #24
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	019b      	lsls	r3, r3, #6
 8003026:	431a      	orrs	r2, r3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	041b      	lsls	r3, r3, #16
 8003030:	431a      	orrs	r2, r3
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	071b      	lsls	r3, r3, #28
 800303e:	4961      	ldr	r1, [pc, #388]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003064:	2b00      	cmp	r3, #0
 8003066:	d035      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003070:	d130      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003078:	0c1b      	lsrs	r3, r3, #16
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	3301      	adds	r3, #1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003084:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308a:	0f1b      	lsrs	r3, r3, #28
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	019b      	lsls	r3, r3, #6
 800309c:	431a      	orrs	r2, r3
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	431a      	orrs	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	071b      	lsls	r3, r3, #28
 80030b4:	4943      	ldr	r1, [pc, #268]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030bc:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c2:	f023 021f 	bic.w	r2, r3, #31
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	493d      	ldr	r1, [pc, #244]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d029      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030e8:	d124      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	3301      	adds	r3, #1
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030fc:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003102:	0f1b      	lsrs	r3, r3, #28
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	019b      	lsls	r3, r3, #6
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	3b01      	subs	r3, #1
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	431a      	orrs	r2, r3
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	431a      	orrs	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	071b      	lsls	r3, r3, #28
 800312c:	4925      	ldr	r1, [pc, #148]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313c:	2b00      	cmp	r3, #0
 800313e:	d016      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	4917      	ldr	r1, [pc, #92]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003174:	f7fd fd56 	bl	8000c24 <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800317c:	f7fd fd52 	bl	8000c24 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e09f      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	2b01      	cmp	r3, #1
 800319e:	f040 8095 	bne.w	80032cc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fd fd3c 	bl	8000c24 <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031ae:	e00f      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031b0:	f7fd fd38 	bl	8000c24 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d908      	bls.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e085      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	42470068 	.word	0x42470068
 80031cc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d0:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031dc:	d0e8      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d02b      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	2b00      	cmp	r3, #0
 8003204:	d127      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003206:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	431a      	orrs	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	3b01      	subs	r3, #1
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	4928      	ldr	r1, [pc, #160]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800323c:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800323e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003242:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	3b01      	subs	r3, #1
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	4922      	ldr	r1, [pc, #136]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01d      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800326a:	d118      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	0e1b      	lsrs	r3, r3, #24
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	019b      	lsls	r3, r3, #6
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	3b01      	subs	r3, #1
 800328e:	041b      	lsls	r3, r3, #16
 8003290:	431a      	orrs	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	4910      	ldr	r1, [pc, #64]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032a4:	f7fd fcbe 	bl	8000c24 <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032ac:	f7fd fcba 	bl	8000c24 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e007      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ca:	d1ef      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3730      	adds	r7, #48	; 0x30
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	42470070 	.word	0x42470070

080032e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e4:	b0ae      	sub	sp, #184	; 0xb8
 80032e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003306:	4bcb      	ldr	r3, [pc, #812]	; (8003634 <HAL_RCC_GetSysClockFreq+0x354>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b0c      	cmp	r3, #12
 8003310:	f200 8206 	bhi.w	8003720 <HAL_RCC_GetSysClockFreq+0x440>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003351 	.word	0x08003351
 8003320:	08003721 	.word	0x08003721
 8003324:	08003721 	.word	0x08003721
 8003328:	08003721 	.word	0x08003721
 800332c:	08003359 	.word	0x08003359
 8003330:	08003721 	.word	0x08003721
 8003334:	08003721 	.word	0x08003721
 8003338:	08003721 	.word	0x08003721
 800333c:	08003361 	.word	0x08003361
 8003340:	08003721 	.word	0x08003721
 8003344:	08003721 	.word	0x08003721
 8003348:	08003721 	.word	0x08003721
 800334c:	08003551 	.word	0x08003551
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4bb9      	ldr	r3, [pc, #740]	; (8003638 <HAL_RCC_GetSysClockFreq+0x358>)
 8003352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003356:	e1e7      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003358:	4bb8      	ldr	r3, [pc, #736]	; (800363c <HAL_RCC_GetSysClockFreq+0x35c>)
 800335a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800335e:	e1e3      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003360:	4bb4      	ldr	r3, [pc, #720]	; (8003634 <HAL_RCC_GetSysClockFreq+0x354>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800336c:	4bb1      	ldr	r3, [pc, #708]	; (8003634 <HAL_RCC_GetSysClockFreq+0x354>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d071      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003378:	4bae      	ldr	r3, [pc, #696]	; (8003634 <HAL_RCC_GetSysClockFreq+0x354>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003384:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800338c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800339a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800339e:	4622      	mov	r2, r4
 80033a0:	462b      	mov	r3, r5
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	0159      	lsls	r1, r3, #5
 80033ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b0:	0150      	lsls	r0, r2, #5
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4621      	mov	r1, r4
 80033b8:	1a51      	subs	r1, r2, r1
 80033ba:	6439      	str	r1, [r7, #64]	; 0x40
 80033bc:	4629      	mov	r1, r5
 80033be:	eb63 0301 	sbc.w	r3, r3, r1
 80033c2:	647b      	str	r3, [r7, #68]	; 0x44
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80033d0:	4649      	mov	r1, r9
 80033d2:	018b      	lsls	r3, r1, #6
 80033d4:	4641      	mov	r1, r8
 80033d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033da:	4641      	mov	r1, r8
 80033dc:	018a      	lsls	r2, r1, #6
 80033de:	4641      	mov	r1, r8
 80033e0:	1a51      	subs	r1, r2, r1
 80033e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033e4:	4649      	mov	r1, r9
 80033e6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80033f8:	4649      	mov	r1, r9
 80033fa:	00cb      	lsls	r3, r1, #3
 80033fc:	4641      	mov	r1, r8
 80033fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003402:	4641      	mov	r1, r8
 8003404:	00ca      	lsls	r2, r1, #3
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	4603      	mov	r3, r0
 800340c:	4622      	mov	r2, r4
 800340e:	189b      	adds	r3, r3, r2
 8003410:	633b      	str	r3, [r7, #48]	; 0x30
 8003412:	462b      	mov	r3, r5
 8003414:	460a      	mov	r2, r1
 8003416:	eb42 0303 	adc.w	r3, r2, r3
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003428:	4629      	mov	r1, r5
 800342a:	024b      	lsls	r3, r1, #9
 800342c:	4621      	mov	r1, r4
 800342e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003432:	4621      	mov	r1, r4
 8003434:	024a      	lsls	r2, r1, #9
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800343e:	2200      	movs	r2, #0
 8003440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003444:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003448:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800344c:	f7fc feda 	bl	8000204 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800345a:	e067      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345c:	4b75      	ldr	r3, [pc, #468]	; (8003634 <HAL_RCC_GetSysClockFreq+0x354>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003468:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800346c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003474:	67bb      	str	r3, [r7, #120]	; 0x78
 8003476:	2300      	movs	r3, #0
 8003478:	67fb      	str	r3, [r7, #124]	; 0x7c
 800347a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800347e:	4622      	mov	r2, r4
 8003480:	462b      	mov	r3, r5
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	0159      	lsls	r1, r3, #5
 800348c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003490:	0150      	lsls	r0, r2, #5
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4621      	mov	r1, r4
 8003498:	1a51      	subs	r1, r2, r1
 800349a:	62b9      	str	r1, [r7, #40]	; 0x28
 800349c:	4629      	mov	r1, r5
 800349e:	eb63 0301 	sbc.w	r3, r3, r1
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80034b0:	4649      	mov	r1, r9
 80034b2:	018b      	lsls	r3, r1, #6
 80034b4:	4641      	mov	r1, r8
 80034b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ba:	4641      	mov	r1, r8
 80034bc:	018a      	lsls	r2, r1, #6
 80034be:	4641      	mov	r1, r8
 80034c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80034c4:	4649      	mov	r1, r9
 80034c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034de:	4692      	mov	sl, r2
 80034e0:	469b      	mov	fp, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	eb1a 0303 	adds.w	r3, sl, r3
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	462b      	mov	r3, r5
 80034ec:	eb4b 0303 	adc.w	r3, fp, r3
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034fe:	4629      	mov	r1, r5
 8003500:	028b      	lsls	r3, r1, #10
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003508:	4621      	mov	r1, r4
 800350a:	028a      	lsls	r2, r1, #10
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003514:	2200      	movs	r2, #0
 8003516:	673b      	str	r3, [r7, #112]	; 0x70
 8003518:	677a      	str	r2, [r7, #116]	; 0x74
 800351a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800351e:	f7fc fe71 	bl	8000204 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4613      	mov	r3, r2
 8003528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800352c:	4b41      	ldr	r3, [pc, #260]	; (8003634 <HAL_RCC_GetSysClockFreq+0x354>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	3301      	adds	r3, #1
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800353e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800354e:	e0eb      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003550:	4b38      	ldr	r3, [pc, #224]	; (8003634 <HAL_RCC_GetSysClockFreq+0x354>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <HAL_RCC_GetSysClockFreq+0x354>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d06b      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003568:	4b32      	ldr	r3, [pc, #200]	; (8003634 <HAL_RCC_GetSysClockFreq+0x354>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	2200      	movs	r2, #0
 8003570:	66bb      	str	r3, [r7, #104]	; 0x68
 8003572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357a:	663b      	str	r3, [r7, #96]	; 0x60
 800357c:	2300      	movs	r3, #0
 800357e:	667b      	str	r3, [r7, #100]	; 0x64
 8003580:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003584:	4622      	mov	r2, r4
 8003586:	462b      	mov	r3, r5
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	0159      	lsls	r1, r3, #5
 8003592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003596:	0150      	lsls	r0, r2, #5
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4621      	mov	r1, r4
 800359e:	1a51      	subs	r1, r2, r1
 80035a0:	61b9      	str	r1, [r7, #24]
 80035a2:	4629      	mov	r1, r5
 80035a4:	eb63 0301 	sbc.w	r3, r3, r1
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80035b6:	4659      	mov	r1, fp
 80035b8:	018b      	lsls	r3, r1, #6
 80035ba:	4651      	mov	r1, sl
 80035bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035c0:	4651      	mov	r1, sl
 80035c2:	018a      	lsls	r2, r1, #6
 80035c4:	4651      	mov	r1, sl
 80035c6:	ebb2 0801 	subs.w	r8, r2, r1
 80035ca:	4659      	mov	r1, fp
 80035cc:	eb63 0901 	sbc.w	r9, r3, r1
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035e4:	4690      	mov	r8, r2
 80035e6:	4699      	mov	r9, r3
 80035e8:	4623      	mov	r3, r4
 80035ea:	eb18 0303 	adds.w	r3, r8, r3
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	462b      	mov	r3, r5
 80035f2:	eb49 0303 	adc.w	r3, r9, r3
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003604:	4629      	mov	r1, r5
 8003606:	024b      	lsls	r3, r1, #9
 8003608:	4621      	mov	r1, r4
 800360a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800360e:	4621      	mov	r1, r4
 8003610:	024a      	lsls	r2, r1, #9
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800361a:	2200      	movs	r2, #0
 800361c:	65bb      	str	r3, [r7, #88]	; 0x58
 800361e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003620:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003624:	f7fc fdee 	bl	8000204 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
 800362e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003632:	e065      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x420>
 8003634:	40023800 	.word	0x40023800
 8003638:	00f42400 	.word	0x00f42400
 800363c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003640:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <HAL_RCC_GetSysClockFreq+0x458>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	2200      	movs	r2, #0
 8003648:	4618      	mov	r0, r3
 800364a:	4611      	mov	r1, r2
 800364c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003650:	653b      	str	r3, [r7, #80]	; 0x50
 8003652:	2300      	movs	r3, #0
 8003654:	657b      	str	r3, [r7, #84]	; 0x54
 8003656:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800365a:	4642      	mov	r2, r8
 800365c:	464b      	mov	r3, r9
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0159      	lsls	r1, r3, #5
 8003668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366c:	0150      	lsls	r0, r2, #5
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4641      	mov	r1, r8
 8003674:	1a51      	subs	r1, r2, r1
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	4649      	mov	r1, r9
 800367a:	eb63 0301 	sbc.w	r3, r3, r1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800368c:	4659      	mov	r1, fp
 800368e:	018b      	lsls	r3, r1, #6
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003696:	4651      	mov	r1, sl
 8003698:	018a      	lsls	r2, r1, #6
 800369a:	4651      	mov	r1, sl
 800369c:	1a54      	subs	r4, r2, r1
 800369e:	4659      	mov	r1, fp
 80036a0:	eb63 0501 	sbc.w	r5, r3, r1
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	00eb      	lsls	r3, r5, #3
 80036ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b2:	00e2      	lsls	r2, r4, #3
 80036b4:	4614      	mov	r4, r2
 80036b6:	461d      	mov	r5, r3
 80036b8:	4643      	mov	r3, r8
 80036ba:	18e3      	adds	r3, r4, r3
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	464b      	mov	r3, r9
 80036c0:	eb45 0303 	adc.w	r3, r5, r3
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036d2:	4629      	mov	r1, r5
 80036d4:	028b      	lsls	r3, r1, #10
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036dc:	4621      	mov	r1, r4
 80036de:	028a      	lsls	r2, r1, #10
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036e8:	2200      	movs	r2, #0
 80036ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80036ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036f2:	f7fc fd87 	bl	8000204 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4613      	mov	r3, r2
 80036fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003700:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <HAL_RCC_GetSysClockFreq+0x458>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	0f1b      	lsrs	r3, r3, #28
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800370e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800371e:	e003      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003726:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003728:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800372c:	4618      	mov	r0, r3
 800372e:	37b8      	adds	r7, #184	; 0xb8
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	00f42400 	.word	0x00f42400

08003740 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e28d      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8083 	beq.w	8003866 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003760:	4b94      	ldr	r3, [pc, #592]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b04      	cmp	r3, #4
 800376a:	d019      	beq.n	80037a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800376c:	4b91      	ldr	r3, [pc, #580]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003774:	2b08      	cmp	r3, #8
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003778:	4b8e      	ldr	r3, [pc, #568]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003784:	d00c      	beq.n	80037a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003786:	4b8b      	ldr	r3, [pc, #556]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d112      	bne.n	80037b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003792:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379e:	d10b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	4b84      	ldr	r3, [pc, #528]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d05b      	beq.n	8003864 <HAL_RCC_OscConfig+0x124>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d157      	bne.n	8003864 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e25a      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0x90>
 80037c2:	4b7c      	ldr	r3, [pc, #496]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7b      	ldr	r2, [pc, #492]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e01d      	b.n	800380c <HAL_RCC_OscConfig+0xcc>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0xb4>
 80037da:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a75      	ldr	r2, [pc, #468]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b73      	ldr	r3, [pc, #460]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a72      	ldr	r2, [pc, #456]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e00b      	b.n	800380c <HAL_RCC_OscConfig+0xcc>
 80037f4:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6e      	ldr	r2, [pc, #440]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6b      	ldr	r2, [pc, #428]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d013      	beq.n	800383c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fa06 	bl	8000c24 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd fa02 	bl	8000c24 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e21f      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0xdc>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd f9f2 	bl	8000c24 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003844:	f7fd f9ee 	bl	8000c24 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	; 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e20b      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003856:	4b57      	ldr	r3, [pc, #348]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x104>
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d06f      	beq.n	8003952 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003872:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800387e:	4b4d      	ldr	r3, [pc, #308]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003886:	2b08      	cmp	r3, #8
 8003888:	d105      	bne.n	8003896 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d11c      	bne.n	80038dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCC_OscConfig+0x186>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e1d3      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4937      	ldr	r1, [pc, #220]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	e03a      	b.n	8003952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e4:	4b34      	ldr	r3, [pc, #208]	; (80039b8 <HAL_RCC_OscConfig+0x278>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fd f99b 	bl	8000c24 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fd f997 	bl	8000c24 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e1b4      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4925      	ldr	r1, [pc, #148]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]
 8003924:	e015      	b.n	8003952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <HAL_RCC_OscConfig+0x278>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd f97a 	bl	8000c24 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003934:	f7fd f976 	bl	8000c24 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e193      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d036      	beq.n	80039cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_RCC_OscConfig+0x27c>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd f95a 	bl	8000c24 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003974:	f7fd f956 	bl	8000c24 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e173      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x234>
 8003992:	e01b      	b.n	80039cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_OscConfig+0x27c>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fd f943 	bl	8000c24 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a0:	e00e      	b.n	80039c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a2:	f7fd f93f 	bl	8000c24 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d907      	bls.n	80039c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e15c      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
 80039b4:	40023800 	.word	0x40023800
 80039b8:	42470000 	.word	0x42470000
 80039bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ea      	bne.n	80039a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8097 	beq.w	8003b08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039de:	4b83      	ldr	r3, [pc, #524]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	4b7f      	ldr	r3, [pc, #508]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a7e      	ldr	r2, [pc, #504]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
 80039fa:	4b7c      	ldr	r3, [pc, #496]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b79      	ldr	r3, [pc, #484]	; (8003bf0 <HAL_RCC_OscConfig+0x4b0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d118      	bne.n	8003a48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a16:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <HAL_RCC_OscConfig+0x4b0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a75      	ldr	r2, [pc, #468]	; (8003bf0 <HAL_RCC_OscConfig+0x4b0>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a22:	f7fd f8ff 	bl	8000c24 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2a:	f7fd f8fb 	bl	8000c24 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e118      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	4b6c      	ldr	r3, [pc, #432]	; (8003bf0 <HAL_RCC_OscConfig+0x4b0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCC_OscConfig+0x31e>
 8003a50:	4b66      	ldr	r3, [pc, #408]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a65      	ldr	r2, [pc, #404]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCC_OscConfig+0x358>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x340>
 8003a66:	4b61      	ldr	r3, [pc, #388]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	4a60      	ldr	r2, [pc, #384]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	6713      	str	r3, [r2, #112]	; 0x70
 8003a72:	4b5e      	ldr	r3, [pc, #376]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a5d      	ldr	r2, [pc, #372]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCC_OscConfig+0x358>
 8003a80:	4b5a      	ldr	r3, [pc, #360]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	4a59      	ldr	r2, [pc, #356]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8c:	4b57      	ldr	r3, [pc, #348]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a56      	ldr	r2, [pc, #344]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a92:	f023 0304 	bic.w	r3, r3, #4
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d015      	beq.n	8003acc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fd f8c0 	bl	8000c24 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7fd f8bc 	bl	8000c24 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e0d7      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abe:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0ee      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x368>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fd f8aa 	bl	8000c24 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7fd f8a6 	bl	8000c24 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e0c1      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aea:	4b40      	ldr	r3, [pc, #256]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ee      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afc:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	4a3a      	ldr	r2, [pc, #232]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80ad 	beq.w	8003c6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b12:	4b36      	ldr	r3, [pc, #216]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d060      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d145      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b26:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <HAL_RCC_OscConfig+0x4b4>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd f87a 	bl	8000c24 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd f876 	bl	8000c24 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e093      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	4b29      	ldr	r3, [pc, #164]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	019b      	lsls	r3, r3, #6
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	491b      	ldr	r1, [pc, #108]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x4b4>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fd f84b 	bl	8000c24 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fd f847 	bl	8000c24 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e064      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x452>
 8003bb0:	e05c      	b.n	8003c6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <HAL_RCC_OscConfig+0x4b4>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd f834 	bl	8000c24 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fd f830 	bl	8000c24 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e04d      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x480>
 8003bde:	e045      	b.n	8003c6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e040      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_RCC_OscConfig+0x538>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d030      	beq.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d129      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d122      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d119      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	3b01      	subs	r3, #1
 8003c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d10f      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e03f      	b.n	8003d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fc fea0 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2224      	movs	r2, #36	; 0x24
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f829 	bl	8003d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d1c:	b0c0      	sub	sp, #256	; 0x100
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d34:	68d9      	ldr	r1, [r3, #12]
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	ea40 0301 	orr.w	r3, r0, r1
 8003d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d70:	f021 010c 	bic.w	r1, r1, #12
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d92:	6999      	ldr	r1, [r3, #24]
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	ea40 0301 	orr.w	r3, r0, r1
 8003d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b8f      	ldr	r3, [pc, #572]	; (8003fe4 <UART_SetConfig+0x2cc>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d005      	beq.n	8003db8 <UART_SetConfig+0xa0>
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b8d      	ldr	r3, [pc, #564]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d104      	bne.n	8003dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7fe ff54 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8003dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dc0:	e003      	b.n	8003dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dc2:	f7fe ff3b 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8003dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd4:	f040 810c 	bne.w	8003ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003de2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dea:	4622      	mov	r2, r4
 8003dec:	462b      	mov	r3, r5
 8003dee:	1891      	adds	r1, r2, r2
 8003df0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003df2:	415b      	adcs	r3, r3
 8003df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	eb12 0801 	adds.w	r8, r2, r1
 8003e00:	4629      	mov	r1, r5
 8003e02:	eb43 0901 	adc.w	r9, r3, r1
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e1a:	4690      	mov	r8, r2
 8003e1c:	4699      	mov	r9, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	eb18 0303 	adds.w	r3, r8, r3
 8003e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e28:	462b      	mov	r3, r5
 8003e2a:	eb49 0303 	adc.w	r3, r9, r3
 8003e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e46:	460b      	mov	r3, r1
 8003e48:	18db      	adds	r3, r3, r3
 8003e4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	eb42 0303 	adc.w	r3, r2, r3
 8003e52:	657b      	str	r3, [r7, #84]	; 0x54
 8003e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e5c:	f7fc f9d2 	bl	8000204 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4b61      	ldr	r3, [pc, #388]	; (8003fec <UART_SetConfig+0x2d4>)
 8003e66:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	011c      	lsls	r4, r3, #4
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e90:	4641      	mov	r1, r8
 8003e92:	eb12 0a01 	adds.w	sl, r2, r1
 8003e96:	4649      	mov	r1, r9
 8003e98:	eb43 0b01 	adc.w	fp, r3, r1
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb0:	4692      	mov	sl, r2
 8003eb2:	469b      	mov	fp, r3
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003edc:	460b      	mov	r3, r1
 8003ede:	18db      	adds	r3, r3, r3
 8003ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ef2:	f7fc f987 	bl	8000204 <__aeabi_uldivmod>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <UART_SetConfig+0x2d4>)
 8003efe:	fba3 2301 	umull	r2, r3, r3, r1
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2264      	movs	r2, #100	; 0x64
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	1acb      	subs	r3, r1, r3
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <UART_SetConfig+0x2d4>)
 8003f14:	fba3 2302 	umull	r2, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f20:	441c      	add	r4, r3
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6339      	str	r1, [r7, #48]	; 0x30
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f98:	460b      	mov	r3, r1
 8003f9a:	18db      	adds	r3, r3, r3
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	eb42 0303 	adc.w	r3, r2, r3
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fae:	f7fc f929 	bl	8000204 <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <UART_SetConfig+0x2d4>)
 8003fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	2164      	movs	r1, #100	; 0x64
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3332      	adds	r3, #50	; 0x32
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <UART_SetConfig+0x2d4>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	f003 0207 	and.w	r2, r3, #7
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4422      	add	r2, r4
 8003fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe0:	e105      	b.n	80041ee <UART_SetConfig+0x4d6>
 8003fe2:	bf00      	nop
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40011400 	.word	0x40011400
 8003fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004002:	4642      	mov	r2, r8
 8004004:	464b      	mov	r3, r9
 8004006:	1891      	adds	r1, r2, r2
 8004008:	6239      	str	r1, [r7, #32]
 800400a:	415b      	adcs	r3, r3
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004012:	4641      	mov	r1, r8
 8004014:	1854      	adds	r4, r2, r1
 8004016:	4649      	mov	r1, r9
 8004018:	eb43 0501 	adc.w	r5, r3, r1
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	00eb      	lsls	r3, r5, #3
 8004026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402a:	00e2      	lsls	r2, r4, #3
 800402c:	4614      	mov	r4, r2
 800402e:	461d      	mov	r5, r3
 8004030:	4643      	mov	r3, r8
 8004032:	18e3      	adds	r3, r4, r3
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004038:	464b      	mov	r3, r9
 800403a:	eb45 0303 	adc.w	r3, r5, r3
 800403e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800404e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800405e:	4629      	mov	r1, r5
 8004060:	008b      	lsls	r3, r1, #2
 8004062:	4621      	mov	r1, r4
 8004064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004068:	4621      	mov	r1, r4
 800406a:	008a      	lsls	r2, r1, #2
 800406c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004070:	f7fc f8c8 	bl	8000204 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b60      	ldr	r3, [pc, #384]	; (80041fc <UART_SetConfig+0x4e4>)
 800407a:	fba3 2302 	umull	r2, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	011c      	lsls	r4, r3, #4
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800408c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	61b9      	str	r1, [r7, #24]
 800409c:	415b      	adcs	r3, r3
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6139      	str	r1, [r7, #16]
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040d8:	464b      	mov	r3, r9
 80040da:	460a      	mov	r2, r1
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80040ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040fc:	4649      	mov	r1, r9
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	4641      	mov	r1, r8
 8004102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004106:	4641      	mov	r1, r8
 8004108:	008a      	lsls	r2, r1, #2
 800410a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800410e:	f7fc f879 	bl	8000204 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4b39      	ldr	r3, [pc, #228]	; (80041fc <UART_SetConfig+0x4e4>)
 8004118:	fba3 1302 	umull	r1, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	2164      	movs	r1, #100	; 0x64
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	3332      	adds	r3, #50	; 0x32
 800412a:	4a34      	ldr	r2, [pc, #208]	; (80041fc <UART_SetConfig+0x4e4>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004136:	441c      	add	r4, r3
 8004138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800413c:	2200      	movs	r2, #0
 800413e:	673b      	str	r3, [r7, #112]	; 0x70
 8004140:	677a      	str	r2, [r7, #116]	; 0x74
 8004142:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004146:	4642      	mov	r2, r8
 8004148:	464b      	mov	r3, r9
 800414a:	1891      	adds	r1, r2, r2
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	415b      	adcs	r3, r3
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004156:	4641      	mov	r1, r8
 8004158:	1851      	adds	r1, r2, r1
 800415a:	6039      	str	r1, [r7, #0]
 800415c:	4649      	mov	r1, r9
 800415e:	414b      	adcs	r3, r1
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800416e:	4659      	mov	r1, fp
 8004170:	00cb      	lsls	r3, r1, #3
 8004172:	4651      	mov	r1, sl
 8004174:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004178:	4651      	mov	r1, sl
 800417a:	00ca      	lsls	r2, r1, #3
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	4603      	mov	r3, r0
 8004182:	4642      	mov	r2, r8
 8004184:	189b      	adds	r3, r3, r2
 8004186:	66bb      	str	r3, [r7, #104]	; 0x68
 8004188:	464b      	mov	r3, r9
 800418a:	460a      	mov	r2, r1
 800418c:	eb42 0303 	adc.w	r3, r2, r3
 8004190:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	663b      	str	r3, [r7, #96]	; 0x60
 800419c:	667a      	str	r2, [r7, #100]	; 0x64
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041aa:	4649      	mov	r1, r9
 80041ac:	008b      	lsls	r3, r1, #2
 80041ae:	4641      	mov	r1, r8
 80041b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b4:	4641      	mov	r1, r8
 80041b6:	008a      	lsls	r2, r1, #2
 80041b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041bc:	f7fc f822 	bl	8000204 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <UART_SetConfig+0x4e4>)
 80041c6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2164      	movs	r1, #100	; 0x64
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	3332      	adds	r3, #50	; 0x32
 80041d8:	4a08      	ldr	r2, [pc, #32]	; (80041fc <UART_SetConfig+0x4e4>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4422      	add	r2, r4
 80041ec:	609a      	str	r2, [r3, #8]
}
 80041ee:	bf00      	nop
 80041f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fa:	bf00      	nop
 80041fc:	51eb851f 	.word	0x51eb851f

08004200 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004200:	b084      	sub	sp, #16
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	f107 001c 	add.w	r0, r7, #28
 800420e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	2b01      	cmp	r3, #1
 8004216:	d122      	bne.n	800425e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800422c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f001 fbe8 	bl	8005a28 <USB_CoreReset>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]
 800425c:	e01a      	b.n	8004294 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f001 fbdc 	bl	8005a28 <USB_CoreReset>
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
 8004286:	e005      	b.n	8004294 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	2b01      	cmp	r3, #1
 8004298:	d10b      	bne.n	80042b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f043 0206 	orr.w	r2, r3, #6
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f043 0220 	orr.w	r2, r3, #32
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042be:	b004      	add	sp, #16
 80042c0:	4770      	bx	lr
	...

080042c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d165      	bne.n	80043a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4a41      	ldr	r2, [pc, #260]	; (80043e0 <USB_SetTurnaroundTime+0x11c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d906      	bls.n	80042ee <USB_SetTurnaroundTime+0x2a>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4a40      	ldr	r2, [pc, #256]	; (80043e4 <USB_SetTurnaroundTime+0x120>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d202      	bcs.n	80042ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042e8:	230f      	movs	r3, #15
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e062      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4a3c      	ldr	r2, [pc, #240]	; (80043e4 <USB_SetTurnaroundTime+0x120>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d306      	bcc.n	8004304 <USB_SetTurnaroundTime+0x40>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4a3b      	ldr	r2, [pc, #236]	; (80043e8 <USB_SetTurnaroundTime+0x124>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d202      	bcs.n	8004304 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042fe:	230e      	movs	r3, #14
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e057      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4a38      	ldr	r2, [pc, #224]	; (80043e8 <USB_SetTurnaroundTime+0x124>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d306      	bcc.n	800431a <USB_SetTurnaroundTime+0x56>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4a37      	ldr	r2, [pc, #220]	; (80043ec <USB_SetTurnaroundTime+0x128>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d202      	bcs.n	800431a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004314:	230d      	movs	r3, #13
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e04c      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4a33      	ldr	r2, [pc, #204]	; (80043ec <USB_SetTurnaroundTime+0x128>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d306      	bcc.n	8004330 <USB_SetTurnaroundTime+0x6c>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4a32      	ldr	r2, [pc, #200]	; (80043f0 <USB_SetTurnaroundTime+0x12c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d802      	bhi.n	8004330 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800432a:	230c      	movs	r3, #12
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	e041      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <USB_SetTurnaroundTime+0x12c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d906      	bls.n	8004346 <USB_SetTurnaroundTime+0x82>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4a2e      	ldr	r2, [pc, #184]	; (80043f4 <USB_SetTurnaroundTime+0x130>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d802      	bhi.n	8004346 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004340:	230b      	movs	r3, #11
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e036      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <USB_SetTurnaroundTime+0x130>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d906      	bls.n	800435c <USB_SetTurnaroundTime+0x98>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4a29      	ldr	r2, [pc, #164]	; (80043f8 <USB_SetTurnaroundTime+0x134>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d802      	bhi.n	800435c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004356:	230a      	movs	r3, #10
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e02b      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4a26      	ldr	r2, [pc, #152]	; (80043f8 <USB_SetTurnaroundTime+0x134>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d906      	bls.n	8004372 <USB_SetTurnaroundTime+0xae>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4a25      	ldr	r2, [pc, #148]	; (80043fc <USB_SetTurnaroundTime+0x138>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d202      	bcs.n	8004372 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800436c:	2309      	movs	r3, #9
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e020      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4a21      	ldr	r2, [pc, #132]	; (80043fc <USB_SetTurnaroundTime+0x138>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d306      	bcc.n	8004388 <USB_SetTurnaroundTime+0xc4>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4a20      	ldr	r2, [pc, #128]	; (8004400 <USB_SetTurnaroundTime+0x13c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d802      	bhi.n	8004388 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004382:	2308      	movs	r3, #8
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	e015      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <USB_SetTurnaroundTime+0x13c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d906      	bls.n	800439e <USB_SetTurnaroundTime+0xda>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <USB_SetTurnaroundTime+0x140>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d202      	bcs.n	800439e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004398:	2307      	movs	r3, #7
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e00a      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800439e:	2306      	movs	r3, #6
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e007      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043aa:	2309      	movs	r3, #9
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	e001      	b.n	80043b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043b0:	2309      	movs	r3, #9
 80043b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	029b      	lsls	r3, r3, #10
 80043c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	00d8acbf 	.word	0x00d8acbf
 80043e4:	00e4e1c0 	.word	0x00e4e1c0
 80043e8:	00f42400 	.word	0x00f42400
 80043ec:	01067380 	.word	0x01067380
 80043f0:	011a499f 	.word	0x011a499f
 80043f4:	01312cff 	.word	0x01312cff
 80043f8:	014ca43f 	.word	0x014ca43f
 80043fc:	016e3600 	.word	0x016e3600
 8004400:	01a6ab1f 	.word	0x01a6ab1f
 8004404:	01e84800 	.word	0x01e84800

08004408 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f023 0201 	bic.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d115      	bne.n	800449a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800447a:	2001      	movs	r0, #1
 800447c:	f7fc fbde 	bl	8000c3c <HAL_Delay>
      ms++;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3301      	adds	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f001 fa3f 	bl	800590a <USB_GetMode>
 800448c:	4603      	mov	r3, r0
 800448e:	2b01      	cmp	r3, #1
 8004490:	d01e      	beq.n	80044d0 <USB_SetCurrentMode+0x84>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b31      	cmp	r3, #49	; 0x31
 8004496:	d9f0      	bls.n	800447a <USB_SetCurrentMode+0x2e>
 8004498:	e01a      	b.n	80044d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d115      	bne.n	80044cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044ac:	2001      	movs	r0, #1
 80044ae:	f7fc fbc5 	bl	8000c3c <HAL_Delay>
      ms++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f001 fa26 	bl	800590a <USB_GetMode>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <USB_SetCurrentMode+0x84>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b31      	cmp	r3, #49	; 0x31
 80044c8:	d9f0      	bls.n	80044ac <USB_SetCurrentMode+0x60>
 80044ca:	e001      	b.n	80044d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e005      	b.n	80044dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b32      	cmp	r3, #50	; 0x32
 80044d4:	d101      	bne.n	80044da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e4:	b084      	sub	sp, #16
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b086      	sub	sp, #24
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e009      	b.n	8004518 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	3340      	adds	r3, #64	; 0x40
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	2200      	movs	r2, #0
 8004510:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	3301      	adds	r3, #1
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b0e      	cmp	r3, #14
 800451c:	d9f2      	bls.n	8004504 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800451e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11c      	bne.n	800455e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004532:	f043 0302 	orr.w	r3, r3, #2
 8004536:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e005      	b.n	800456a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004570:	461a      	mov	r2, r3
 8004572:	2300      	movs	r3, #0
 8004574:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457c:	4619      	mov	r1, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004584:	461a      	mov	r2, r3
 8004586:	680b      	ldr	r3, [r1, #0]
 8004588:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10c      	bne.n	80045aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004596:	2100      	movs	r1, #0
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f965 	bl	8004868 <USB_SetDevSpeed>
 800459e:	e008      	b.n	80045b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045a0:	2101      	movs	r1, #1
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f960 	bl	8004868 <USB_SetDevSpeed>
 80045a8:	e003      	b.n	80045b2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045aa:	2103      	movs	r1, #3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f95b 	bl	8004868 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045b2:	2110      	movs	r1, #16
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f8f3 	bl	80047a0 <USB_FlushTxFifo>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f91f 	bl	8004808 <USB_FlushRxFifo>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	461a      	mov	r2, r3
 80045dc:	2300      	movs	r3, #0
 80045de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e6:	461a      	mov	r2, r3
 80045e8:	2300      	movs	r3, #0
 80045ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	e043      	b.n	8004686 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004614:	d118      	bne.n	8004648 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	461a      	mov	r2, r3
 800462a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	e013      	b.n	800465a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	461a      	mov	r2, r3
 8004640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e008      	b.n	800465a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	461a      	mov	r2, r3
 8004656:	2300      	movs	r3, #0
 8004658:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	461a      	mov	r2, r3
 8004668:	2300      	movs	r3, #0
 800466a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	461a      	mov	r2, r3
 800467a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800467e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	3301      	adds	r3, #1
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	429a      	cmp	r2, r3
 800468c:	d3b7      	bcc.n	80045fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e043      	b.n	800471c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046aa:	d118      	bne.n	80046de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046be:	461a      	mov	r2, r3
 80046c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e013      	b.n	80046f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	461a      	mov	r2, r3
 80046d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e008      	b.n	80046f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ea:	461a      	mov	r2, r3
 80046ec:	2300      	movs	r3, #0
 80046ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	461a      	mov	r2, r3
 80046fe:	2300      	movs	r3, #0
 8004700:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	461a      	mov	r2, r3
 8004710:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004714:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	3301      	adds	r3, #1
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	429a      	cmp	r2, r3
 8004722:	d3b7      	bcc.n	8004694 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004736:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004744:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f043 0210 	orr.w	r2, r3, #16
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <USB_DevInit+0x2b8>)
 800475e:	4313      	orrs	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f043 0208 	orr.w	r2, r3, #8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004798:	b004      	add	sp, #16
 800479a:	4770      	bx	lr
 800479c:	803c3800 	.word	0x803c3800

080047a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <USB_FlushTxFifo+0x64>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e01b      	b.n	80047f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	daf2      	bge.n	80047ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	019b      	lsls	r3, r3, #6
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a08      	ldr	r2, [pc, #32]	; (8004804 <USB_FlushTxFifo+0x64>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e006      	b.n	80047f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d0f0      	beq.n	80047d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	00030d40 	.word	0x00030d40

08004808 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a11      	ldr	r2, [pc, #68]	; (8004864 <USB_FlushRxFifo+0x5c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e018      	b.n	8004858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	daf2      	bge.n	8004814 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2210      	movs	r2, #16
 8004836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3301      	adds	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <USB_FlushRxFifo+0x5c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e006      	b.n	8004858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d0f0      	beq.n	8004838 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	00030d40 	.word	0x00030d40

08004868 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	68f9      	ldr	r1, [r7, #12]
 8004884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800489a:	b480      	push	{r7}
 800489c:	b087      	sub	sp, #28
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0306 	and.w	r3, r3, #6
 80048b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]
 80048be:	e00a      	b.n	80048d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d002      	beq.n	80048cc <USB_GetDevSpeed+0x32>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b06      	cmp	r3, #6
 80048ca:	d102      	bne.n	80048d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048cc:	2302      	movs	r3, #2
 80048ce:	75fb      	strb	r3, [r7, #23]
 80048d0:	e001      	b.n	80048d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048d2:	230f      	movs	r3, #15
 80048d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	785b      	ldrb	r3, [r3, #1]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d13a      	bne.n	8004976 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2101      	movs	r1, #1
 8004912:	fa01 f303 	lsl.w	r3, r1, r3
 8004916:	b29b      	uxth	r3, r3
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800491e:	4313      	orrs	r3, r2
 8004920:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d155      	bne.n	80049e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	791b      	ldrb	r3, [r3, #4]
 8004952:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004954:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	059b      	lsls	r3, r3, #22
 800495a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800495c:	4313      	orrs	r3, r2
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	0151      	lsls	r1, r2, #5
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	440a      	add	r2, r1
 8004966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	e036      	b.n	80049e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	2101      	movs	r1, #1
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004994:	4313      	orrs	r3, r2
 8004996:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d11a      	bne.n	80049e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	791b      	ldrb	r3, [r3, #4]
 80049c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049ca:	430b      	orrs	r3, r1
 80049cc:	4313      	orrs	r3, r2
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	0151      	lsls	r1, r2, #5
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	440a      	add	r2, r1
 80049d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d161      	bne.n	8004ad4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a26:	d11f      	bne.n	8004a68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	0151      	lsls	r1, r2, #5
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	2101      	movs	r1, #1
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a88:	4013      	ands	r3, r2
 8004a8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	68f9      	ldr	r1, [r7, #12]
 8004aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aac:	4013      	ands	r3, r2
 8004aae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	0159      	lsls	r1, r3, #5
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aca:	4619      	mov	r1, r3
 8004acc:	4b35      	ldr	r3, [pc, #212]	; (8004ba4 <USB_DeactivateEndpoint+0x1b0>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]
 8004ad2:	e060      	b.n	8004b96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aea:	d11f      	bne.n	8004b2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	0151      	lsls	r1, r2, #5
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	440a      	add	r2, r1
 8004b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b42:	041b      	lsls	r3, r3, #16
 8004b44:	43db      	mvns	r3, r3
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	2101      	movs	r1, #1
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	041b      	lsls	r3, r3, #16
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b70:	4013      	ands	r3, r2
 8004b72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	0159      	lsls	r1, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	440b      	add	r3, r1
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <USB_DeactivateEndpoint+0x1b4>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	ec337800 	.word	0xec337800
 8004ba8:	eff37800 	.word	0xeff37800

08004bac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	f040 815c 	bne.w	8004e86 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d132      	bne.n	8004c3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c34:	0cdb      	lsrs	r3, r3, #19
 8004c36:	04db      	lsls	r3, r3, #19
 8004c38:	6113      	str	r3, [r2, #16]
 8004c3a:	e074      	b.n	8004d26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c56:	0cdb      	lsrs	r3, r3, #19
 8004c58:	04db      	lsls	r3, r3, #19
 8004c5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6999      	ldr	r1, [r3, #24]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	440b      	add	r3, r1
 8004c98:	1e59      	subs	r1, r3, #1
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ca4:	4b9d      	ldr	r3, [pc, #628]	; (8004f1c <USB_EPStartXfer+0x370>)
 8004ca6:	400b      	ands	r3, r1
 8004ca8:	69b9      	ldr	r1, [r7, #24]
 8004caa:	0148      	lsls	r0, r1, #5
 8004cac:	69f9      	ldr	r1, [r7, #28]
 8004cae:	4401      	add	r1, r0
 8004cb0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cce:	69b9      	ldr	r1, [r7, #24]
 8004cd0:	0148      	lsls	r0, r1, #5
 8004cd2:	69f9      	ldr	r1, [r7, #28]
 8004cd4:	4401      	add	r1, r0
 8004cd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	791b      	ldrb	r3, [r3, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d11f      	bne.n	8004d26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d14b      	bne.n	8004dc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	461a      	mov	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	791b      	ldrb	r3, [r3, #4]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d128      	bne.n	8004da2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d110      	bne.n	8004d82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	e00f      	b.n	8004da2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e133      	b.n	800502c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004de2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	791b      	ldrb	r3, [r3, #4]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d015      	beq.n	8004e18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 811b 	beq.w	800502c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	2101      	movs	r1, #1
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	69f9      	ldr	r1, [r7, #28]
 8004e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e12:	4313      	orrs	r3, r2
 8004e14:	634b      	str	r3, [r1, #52]	; 0x34
 8004e16:	e109      	b.n	800502c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d110      	bne.n	8004e4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	e00f      	b.n	8004e6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6919      	ldr	r1, [r3, #16]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	b298      	uxth	r0, r3
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fade 	bl	8005440 <USB_WritePacket>
 8004e84:	e0d2      	b.n	800502c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea0:	0cdb      	lsrs	r3, r3, #19
 8004ea2:	04db      	lsls	r3, r3, #19
 8004ea4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ec4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ec8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d126      	bne.n	8004f20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee8:	69b9      	ldr	r1, [r7, #24]
 8004eea:	0148      	lsls	r0, r1, #5
 8004eec:	69f9      	ldr	r1, [r7, #28]
 8004eee:	4401      	add	r1, r0
 8004ef0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f16:	6113      	str	r3, [r2, #16]
 8004f18:	e03a      	b.n	8004f90 <USB_EPStartXfer+0x3e4>
 8004f1a:	bf00      	nop
 8004f1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	1e5a      	subs	r2, r3, #1
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f34:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	8afa      	ldrh	r2, [r7, #22]
 8004f3c:	fb03 f202 	mul.w	r2, r3, r2
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	8afb      	ldrh	r3, [r7, #22]
 8004f54:	04d9      	lsls	r1, r3, #19
 8004f56:	4b38      	ldr	r3, [pc, #224]	; (8005038 <USB_EPStartXfer+0x48c>)
 8004f58:	400b      	ands	r3, r1
 8004f5a:	69b9      	ldr	r1, [r7, #24]
 8004f5c:	0148      	lsls	r0, r1, #5
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	4401      	add	r1, r0
 8004f62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f66:	4313      	orrs	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	0148      	lsls	r0, r1, #5
 8004f84:	69f9      	ldr	r1, [r7, #28]
 8004f86:	4401      	add	r1, r0
 8004f88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10d      	bne.n	8004fb2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6919      	ldr	r1, [r3, #16]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	460a      	mov	r2, r1
 8004fb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	791b      	ldrb	r3, [r3, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d128      	bne.n	800500c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d110      	bne.n	8004fec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e00f      	b.n	800500c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	0151      	lsls	r1, r2, #5
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	440a      	add	r2, r1
 8005002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	0151      	lsls	r1, r2, #5
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	440a      	add	r2, r1
 8005022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005026:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800502a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	1ff80000 	.word	0x1ff80000

0800503c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	2b01      	cmp	r3, #1
 800505a:	f040 80ce 	bne.w	80051fa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d132      	bne.n	80050cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005080:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005084:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005088:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	0151      	lsls	r1, r2, #5
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	440a      	add	r2, r1
 80050c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c4:	0cdb      	lsrs	r3, r3, #19
 80050c6:	04db      	lsls	r3, r3, #19
 80050c8:	6113      	str	r3, [r2, #16]
 80050ca:	e04e      	b.n	800516a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e6:	0cdb      	lsrs	r3, r3, #19
 80050e8:	04db      	lsls	r3, r3, #19
 80050ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005106:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800510a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800510e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	429a      	cmp	r2, r3
 800511a:	d903      	bls.n	8005124 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005142:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800515a:	6939      	ldr	r1, [r7, #16]
 800515c:	0148      	lsls	r0, r1, #5
 800515e:	6979      	ldr	r1, [r7, #20]
 8005160:	4401      	add	r1, r0
 8005162:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005166:	4313      	orrs	r3, r2
 8005168:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d11e      	bne.n	80051ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	e097      	b.n	80052de <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 8083 	beq.w	80052de <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	2101      	movs	r1, #1
 80051ea:	fa01 f303 	lsl.w	r3, r1, r3
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051f4:	4313      	orrs	r3, r2
 80051f6:	634b      	str	r3, [r1, #52]	; 0x34
 80051f8:	e071      	b.n	80052de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005214:	0cdb      	lsrs	r3, r3, #19
 8005216:	04db      	lsls	r3, r3, #19
 8005218:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005234:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005238:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800523c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800528c:	6939      	ldr	r1, [r7, #16]
 800528e:	0148      	lsls	r0, r1, #5
 8005290:	6979      	ldr	r1, [r7, #20]
 8005292:	4401      	add	r1, r0
 8005294:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005298:	4313      	orrs	r3, r2
 800529a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d10d      	bne.n	80052be <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6919      	ldr	r1, [r3, #16]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	460a      	mov	r2, r1
 80052bc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d14a      	bne.n	80053a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800531e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005322:	f040 8086 	bne.w	8005432 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005344:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005348:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	7812      	ldrb	r2, [r2, #0]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800536c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f242 7210 	movw	r2, #10000	; 0x2710
 800537a:	4293      	cmp	r3, r2
 800537c:	d902      	bls.n	8005384 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	75fb      	strb	r3, [r7, #23]
          break;
 8005382:	e056      	b.n	8005432 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539c:	d0e7      	beq.n	800536e <USB_EPStopXfer+0x82>
 800539e:	e048      	b.n	8005432 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053b8:	d13b      	bne.n	8005432 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	7812      	ldrb	r2, [r2, #0]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005400:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f242 7210 	movw	r2, #10000	; 0x2710
 800540e:	4293      	cmp	r3, r2
 8005410:	d902      	bls.n	8005418 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
          break;
 8005416:	e00c      	b.n	8005432 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005430:	d0e7      	beq.n	8005402 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
}
 8005434:	4618      	mov	r0, r3
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	460b      	mov	r3, r1
 8005450:	71fb      	strb	r3, [r7, #7]
 8005452:	4613      	mov	r3, r2
 8005454:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800545e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005462:	2b00      	cmp	r3, #0
 8005464:	d123      	bne.n	80054ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005466:	88bb      	ldrh	r3, [r7, #4]
 8005468:	3303      	adds	r3, #3
 800546a:	089b      	lsrs	r3, r3, #2
 800546c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800546e:	2300      	movs	r3, #0
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e018      	b.n	80054a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	031a      	lsls	r2, r3, #12
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005480:	461a      	mov	r2, r3
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	3301      	adds	r3, #1
 800548c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3301      	adds	r3, #1
 8005492:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	3301      	adds	r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3301      	adds	r3, #1
 800549e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	3301      	adds	r3, #1
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d3e2      	bcc.n	8005474 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3724      	adds	r7, #36	; 0x24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054bc:	b480      	push	{r7}
 80054be:	b08b      	sub	sp, #44	; 0x2c
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	089b      	lsrs	r3, r3, #2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	623b      	str	r3, [r7, #32]
 80054e6:	e014      	b.n	8005512 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	3301      	adds	r3, #1
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	3301      	adds	r3, #1
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	3301      	adds	r3, #1
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	3301      	adds	r3, #1
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	3301      	adds	r3, #1
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	6a3a      	ldr	r2, [r7, #32]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	429a      	cmp	r2, r3
 8005518:	d3e6      	bcc.n	80054e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800551a:	8bfb      	ldrh	r3, [r7, #30]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01e      	beq.n	800555e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552a:	461a      	mov	r2, r3
 800552c:	f107 0310 	add.w	r3, r7, #16
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
 8005540:	b2da      	uxtb	r2, r3
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	701a      	strb	r2, [r3, #0]
      i++;
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	3301      	adds	r3, #1
 800554a:	623b      	str	r3, [r7, #32]
      pDest++;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	3301      	adds	r3, #1
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005552:	8bfb      	ldrh	r3, [r7, #30]
 8005554:	3b01      	subs	r3, #1
 8005556:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005558:	8bfb      	ldrh	r3, [r7, #30]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ea      	bne.n	8005534 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005560:	4618      	mov	r0, r3
 8005562:	372c      	adds	r7, #44	; 0x2c
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d12c      	bne.n	80055e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	db12      	blt.n	80055c0 <USB_EPSetStall+0x54>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00f      	beq.n	80055c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	e02b      	b.n	800563a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	db12      	blt.n	800561a <USB_EPSetStall+0xae>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00f      	beq.n	800561a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005618:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005638:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d128      	bne.n	80056b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005682:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	791b      	ldrb	r3, [r3, #4]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d003      	beq.n	8005694 <USB_EPClearStall+0x4c>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	791b      	ldrb	r3, [r3, #4]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d138      	bne.n	8005706 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	e027      	b.n	8005706 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	791b      	ldrb	r3, [r3, #4]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d003      	beq.n	80056e6 <USB_EPClearStall+0x9e>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	791b      	ldrb	r3, [r3, #4]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d10f      	bne.n	8005706 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005704:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	460b      	mov	r3, r1
 800571e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005732:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005736:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005748:	68f9      	ldr	r1, [r7, #12]
 800574a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800574e:	4313      	orrs	r3, r2
 8005750:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578e:	f023 0302 	bic.w	r3, r3, #2
 8005792:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057bc:	f023 0303 	bic.w	r3, r3, #3
 80057c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d0:	f043 0302 	orr.w	r3, r3, #2
 80057d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4013      	ands	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057fc:	68fb      	ldr	r3, [r7, #12]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	4013      	ands	r3, r2
 800582c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	0c1b      	lsrs	r3, r3, #16
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	4013      	ands	r3, r2
 8005860:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	b29b      	uxth	r3, r3
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	4013      	ands	r3, r2
 800589e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058a0:	68bb      	ldr	r3, [r7, #8]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b087      	sub	sp, #28
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	fa22 f303 	lsr.w	r3, r2, r3
 80058de:	01db      	lsls	r3, r3, #7
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4013      	ands	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058fc:	68bb      	ldr	r3, [r7, #8]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0301 	and.w	r3, r3, #1
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005940:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005944:	f023 0307 	bic.w	r3, r3, #7
 8005948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	460b      	mov	r3, r1
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	333c      	adds	r3, #60	; 0x3c
 8005982:	3304      	adds	r3, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4a26      	ldr	r2, [pc, #152]	; (8005a24 <USB_EP0_OutStart+0xb8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d90a      	bls.n	80059a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800599c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a0:	d101      	bne.n	80059a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e037      	b.n	8005a16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	461a      	mov	r2, r3
 80059ae:	2300      	movs	r3, #0
 80059b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d4:	f043 0318 	orr.w	r3, r3, #24
 80059d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059ee:	7afb      	ldrb	r3, [r7, #11]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d10f      	bne.n	8005a14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	4f54300a 	.word	0x4f54300a

08005a28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <USB_CoreReset+0x64>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e01b      	b.n	8005a7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	daf2      	bge.n	8005a34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f043 0201 	orr.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <USB_CoreReset+0x64>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e006      	b.n	8005a7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d0f0      	beq.n	8005a5e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	00030d40 	.word	0x00030d40

08005a90 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005a9c:	2010      	movs	r0, #16
 8005a9e:	f002 f9bb 	bl	8007e18 <USBD_static_malloc>
 8005aa2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	32b0      	adds	r2, #176	; 0xb0
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005aba:	2302      	movs	r3, #2
 8005abc:	e048      	b.n	8005b50 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	32b0      	adds	r2, #176	; 0xb0
 8005ac8:	68f9      	ldr	r1, [r7, #12]
 8005aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	32b0      	adds	r2, #176	; 0xb0
 8005ad8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	7c1b      	ldrb	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10d      	bne.n	8005b06 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005aea:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <USBD_HID_Init+0xc8>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	f003 020f 	and.w	r2, r3, #15
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	3326      	adds	r3, #38	; 0x26
 8005b00:	2207      	movs	r2, #7
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e00c      	b.n	8005b20 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <USBD_HID_Init+0xc8>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 020f 	and.w	r2, r3, #15
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	440b      	add	r3, r1
 8005b1a:	3326      	adds	r3, #38	; 0x26
 8005b1c:	220a      	movs	r2, #10
 8005b1e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005b20:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <USBD_HID_Init+0xc8>)
 8005b22:	7819      	ldrb	r1, [r3, #0]
 8005b24:	2304      	movs	r3, #4
 8005b26:	2203      	movs	r2, #3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f002 f816 	bl	8007b5a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <USBD_HID_Init+0xc8>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	3324      	adds	r3, #36	; 0x24
 8005b44:	2201      	movs	r2, #1
 8005b46:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	200000b7 	.word	0x200000b7

08005b5c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <USBD_HID_DeInit+0x8c>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f002 f819 	bl	8007ba6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005b74:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <USBD_HID_DeInit+0x8c>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	3324      	adds	r3, #36	; 0x24
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005b8e:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <USBD_HID_DeInit+0x8c>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 020f 	and.w	r2, r3, #15
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	3326      	adds	r3, #38	; 0x26
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	32b0      	adds	r2, #176	; 0xb0
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d011      	beq.n	8005bde <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	32b0      	adds	r2, #176	; 0xb0
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f002 f933 	bl	8007e34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	32b0      	adds	r2, #176	; 0xb0
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	200000b7 	.word	0x200000b7

08005bec <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	32b0      	adds	r2, #176	; 0xb0
 8005c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c04:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e0e8      	b.n	8005dea <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d046      	beq.n	8005cb2 <USBD_HID_Setup+0xc6>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	f040 80d8 	bne.w	8005dda <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	3b02      	subs	r3, #2
 8005c30:	2b09      	cmp	r3, #9
 8005c32:	d836      	bhi.n	8005ca2 <USBD_HID_Setup+0xb6>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <USBD_HID_Setup+0x50>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c93 	.word	0x08005c93
 8005c40:	08005c73 	.word	0x08005c73
 8005c44:	08005ca3 	.word	0x08005ca3
 8005c48:	08005ca3 	.word	0x08005ca3
 8005c4c:	08005ca3 	.word	0x08005ca3
 8005c50:	08005ca3 	.word	0x08005ca3
 8005c54:	08005ca3 	.word	0x08005ca3
 8005c58:	08005ca3 	.word	0x08005ca3
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c65 	.word	0x08005c65
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	885b      	ldrh	r3, [r3, #2]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	601a      	str	r2, [r3, #0]
          break;
 8005c70:	e01e      	b.n	8005cb0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 fbff 	bl	800747c <USBD_CtlSendData>
          break;
 8005c7e:	e017      	b.n	8005cb0 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	885b      	ldrh	r3, [r3, #2]
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	605a      	str	r2, [r3, #4]
          break;
 8005c90:	e00e      	b.n	8005cb0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3304      	adds	r3, #4
 8005c96:	2201      	movs	r2, #1
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fbee 	bl	800747c <USBD_CtlSendData>
          break;
 8005ca0:	e006      	b.n	8005cb0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fb78 	bl	800739a <USBD_CtlError>
          ret = USBD_FAIL;
 8005caa:	2303      	movs	r3, #3
 8005cac:	75fb      	strb	r3, [r7, #23]
          break;
 8005cae:	bf00      	nop
      }
      break;
 8005cb0:	e09a      	b.n	8005de8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	2b0b      	cmp	r3, #11
 8005cb8:	f200 8086 	bhi.w	8005dc8 <USBD_HID_Setup+0x1dc>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <USBD_HID_Setup+0xd8>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cf5 	.word	0x08005cf5
 8005cc8:	08005dd7 	.word	0x08005dd7
 8005ccc:	08005dc9 	.word	0x08005dc9
 8005cd0:	08005dc9 	.word	0x08005dc9
 8005cd4:	08005dc9 	.word	0x08005dc9
 8005cd8:	08005dc9 	.word	0x08005dc9
 8005cdc:	08005d1f 	.word	0x08005d1f
 8005ce0:	08005dc9 	.word	0x08005dc9
 8005ce4:	08005dc9 	.word	0x08005dc9
 8005ce8:	08005dc9 	.word	0x08005dc9
 8005cec:	08005d77 	.word	0x08005d77
 8005cf0:	08005da1 	.word	0x08005da1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d107      	bne.n	8005d10 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d00:	f107 030a 	add.w	r3, r7, #10
 8005d04:	2202      	movs	r2, #2
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 fbb7 	bl	800747c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d0e:	e063      	b.n	8005dd8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 fb41 	bl	800739a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	75fb      	strb	r3, [r7, #23]
          break;
 8005d1c:	e05c      	b.n	8005dd8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	885b      	ldrh	r3, [r3, #2]
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b22      	cmp	r3, #34	; 0x22
 8005d28:	d108      	bne.n	8005d3c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	88db      	ldrh	r3, [r3, #6]
 8005d2e:	2b37      	cmp	r3, #55	; 0x37
 8005d30:	bf28      	it	cs
 8005d32:	2337      	movcs	r3, #55	; 0x37
 8005d34:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005d36:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <USBD_HID_Setup+0x208>)
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	e015      	b.n	8005d68 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	885b      	ldrh	r3, [r3, #2]
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b21      	cmp	r3, #33	; 0x21
 8005d46:	d108      	bne.n	8005d5a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005d48:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <USBD_HID_Setup+0x20c>)
 8005d4a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	88db      	ldrh	r3, [r3, #6]
 8005d50:	2b09      	cmp	r3, #9
 8005d52:	bf28      	it	cs
 8005d54:	2309      	movcs	r3, #9
 8005d56:	82bb      	strh	r3, [r7, #20]
 8005d58:	e006      	b.n	8005d68 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fb1c 	bl	800739a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	75fb      	strb	r3, [r7, #23]
            break;
 8005d66:	e037      	b.n	8005dd8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d68:	8abb      	ldrh	r3, [r7, #20]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6939      	ldr	r1, [r7, #16]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fb84 	bl	800747c <USBD_CtlSendData>
          break;
 8005d74:	e030      	b.n	8005dd8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d107      	bne.n	8005d92 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3308      	adds	r3, #8
 8005d86:	2201      	movs	r2, #1
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fb76 	bl	800747c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d90:	e022      	b.n	8005dd8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 fb00 	bl	800739a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d9e:	e01b      	b.n	8005dd8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d106      	bne.n	8005dba <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	885b      	ldrh	r3, [r3, #2]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005db8:	e00e      	b.n	8005dd8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f001 faec 	bl	800739a <USBD_CtlError>
            ret = USBD_FAIL;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005dc6:	e007      	b.n	8005dd8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f001 fae5 	bl	800739a <USBD_CtlError>
          ret = USBD_FAIL;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	75fb      	strb	r3, [r7, #23]
          break;
 8005dd4:	e000      	b.n	8005dd8 <USBD_HID_Setup+0x1ec>
          break;
 8005dd6:	bf00      	nop
      }
      break;
 8005dd8:	e006      	b.n	8005de8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 fadc 	bl	800739a <USBD_CtlError>
      ret = USBD_FAIL;
 8005de2:	2303      	movs	r3, #3
 8005de4:	75fb      	strb	r3, [r7, #23]
      break;
 8005de6:	bf00      	nop
  }

  return (uint8_t)ret;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000080 	.word	0x20000080
 8005df8:	20000068 	.word	0x20000068

08005dfc <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	32b0      	adds	r2, #176	; 0xb0
 8005e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e18:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e014      	b.n	8005e4e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d10d      	bne.n	8005e4c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	7b1b      	ldrb	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <USBD_HID_SendReport+0x5c>)
 8005e40:	7819      	ldrb	r1, [r3, #0]
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f001 ff55 	bl	8007cf6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200000b7 	.word	0x200000b7

08005e5c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e64:	2181      	movs	r1, #129	; 0x81
 8005e66:	4809      	ldr	r0, [pc, #36]	; (8005e8c <USBD_HID_GetFSCfgDesc+0x30>)
 8005e68:	f000 fc35 	bl	80066d6 <USBD_GetEpDesc>
 8005e6c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	220a      	movs	r2, #10
 8005e78:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2222      	movs	r2, #34	; 0x22
 8005e7e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e80:	4b02      	ldr	r3, [pc, #8]	; (8005e8c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000044 	.word	0x20000044

08005e90 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e98:	2181      	movs	r1, #129	; 0x81
 8005e9a:	4809      	ldr	r0, [pc, #36]	; (8005ec0 <USBD_HID_GetHSCfgDesc+0x30>)
 8005e9c:	f000 fc1b 	bl	80066d6 <USBD_GetEpDesc>
 8005ea0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2207      	movs	r2, #7
 8005eac:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2222      	movs	r2, #34	; 0x22
 8005eb2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000044 	.word	0x20000044

08005ec4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005ecc:	2181      	movs	r1, #129	; 0x81
 8005ece:	4809      	ldr	r0, [pc, #36]	; (8005ef4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005ed0:	f000 fc01 	bl	80066d6 <USBD_GetEpDesc>
 8005ed4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	220a      	movs	r2, #10
 8005ee0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2222      	movs	r2, #34	; 0x22
 8005ee6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ee8:	4b02      	ldr	r3, [pc, #8]	; (8005ef4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000044 	.word	0x20000044

08005ef8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	32b0      	adds	r2, #176	; 0xb0
 8005f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f12:	2200      	movs	r2, #0
 8005f14:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	220a      	movs	r2, #10
 8005f30:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005f32:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000074 	.word	0x20000074

08005f44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e01f      	b.n	8005f9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	79fa      	ldrb	r2, [r7, #7]
 8005f8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f001 fd7b 	bl	8007a8c <USBD_LL_Init>
 8005f96:	4603      	mov	r3, r0
 8005f98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e025      	b.n	8006008 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	32ae      	adds	r2, #174	; 0xae
 8005fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00f      	beq.n	8005ff8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	32ae      	adds	r2, #174	; 0xae
 8005fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f107 020e 	add.w	r2, r7, #14
 8005fec:	4610      	mov	r0, r2
 8005fee:	4798      	blx	r3
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fd83 	bl	8007b24 <USBD_LL_Start>
 800601e:	4603      	mov	r3, r0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006030:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	460b      	mov	r3, r1
 8006048:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	4611      	mov	r1, r2
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	4611      	mov	r1, r2
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800609c:	2303      	movs	r3, #3
 800609e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 f932 	bl	8007326 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d01a      	beq.n	800611c <USBD_LL_SetupStage+0x72>
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d822      	bhi.n	8006130 <USBD_LL_SetupStage+0x86>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <USBD_LL_SetupStage+0x4a>
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d00a      	beq.n	8006108 <USBD_LL_SetupStage+0x5e>
 80060f2:	e01d      	b.n	8006130 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fb5f 	bl	80067c0 <USBD_StdDevReq>
 8006102:	4603      	mov	r3, r0
 8006104:	73fb      	strb	r3, [r7, #15]
      break;
 8006106:	e020      	b.n	800614a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fbc7 	bl	80068a4 <USBD_StdItfReq>
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]
      break;
 800611a:	e016      	b.n	800614a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fc29 	bl	800697c <USBD_StdEPReq>
 800612a:	4603      	mov	r3, r0
 800612c:	73fb      	strb	r3, [r7, #15]
      break;
 800612e:	e00c      	b.n	800614a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006136:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800613a:	b2db      	uxtb	r3, r3
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fd50 	bl	8007be4 <USBD_LL_StallEP>
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]
      break;
 8006148:	bf00      	nop
  }

  return ret;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	460b      	mov	r3, r1
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006166:	7afb      	ldrb	r3, [r7, #11]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d16e      	bne.n	800624a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006172:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800617a:	2b03      	cmp	r3, #3
 800617c:	f040 8098 	bne.w	80062b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	429a      	cmp	r2, r3
 800618a:	d913      	bls.n	80061b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	1ad2      	subs	r2, r2, r3
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	4293      	cmp	r3, r2
 80061a4:	bf28      	it	cs
 80061a6:	4613      	movcs	r3, r2
 80061a8:	461a      	mov	r2, r3
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f001 f991 	bl	80074d4 <USBD_CtlContinueRx>
 80061b2:	e07d      	b.n	80062b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d014      	beq.n	80061ec <USBD_LL_DataOutStage+0x98>
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d81d      	bhi.n	8006202 <USBD_LL_DataOutStage+0xae>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <USBD_LL_DataOutStage+0x7c>
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d003      	beq.n	80061d6 <USBD_LL_DataOutStage+0x82>
 80061ce:	e018      	b.n	8006202 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	75bb      	strb	r3, [r7, #22]
            break;
 80061d4:	e018      	b.n	8006208 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	4619      	mov	r1, r3
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fa5e 	bl	80066a2 <USBD_CoreFindIF>
 80061e6:	4603      	mov	r3, r0
 80061e8:	75bb      	strb	r3, [r7, #22]
            break;
 80061ea:	e00d      	b.n	8006208 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	4619      	mov	r1, r3
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fa60 	bl	80066bc <USBD_CoreFindEP>
 80061fc:	4603      	mov	r3, r0
 80061fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006200:	e002      	b.n	8006208 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	75bb      	strb	r3, [r7, #22]
            break;
 8006206:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006208:	7dbb      	ldrb	r3, [r7, #22]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d119      	bne.n	8006242 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d113      	bne.n	8006242 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800621a:	7dba      	ldrb	r2, [r7, #22]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	32ae      	adds	r2, #174	; 0xae
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800622a:	7dba      	ldrb	r2, [r7, #22]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006232:	7dba      	ldrb	r2, [r7, #22]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	32ae      	adds	r2, #174	; 0xae
 8006238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f001 f957 	bl	80074f6 <USBD_CtlSendStatus>
 8006248:	e032      	b.n	80062b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800624a:	7afb      	ldrb	r3, [r7, #11]
 800624c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006250:	b2db      	uxtb	r3, r3
 8006252:	4619      	mov	r1, r3
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fa31 	bl	80066bc <USBD_CoreFindEP>
 800625a:	4603      	mov	r3, r0
 800625c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800625e:	7dbb      	ldrb	r3, [r7, #22]
 8006260:	2bff      	cmp	r3, #255	; 0xff
 8006262:	d025      	beq.n	80062b0 <USBD_LL_DataOutStage+0x15c>
 8006264:	7dbb      	ldrb	r3, [r7, #22]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d122      	bne.n	80062b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b03      	cmp	r3, #3
 8006274:	d117      	bne.n	80062a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006276:	7dba      	ldrb	r2, [r7, #22]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	32ae      	adds	r2, #174	; 0xae
 800627c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00f      	beq.n	80062a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006286:	7dba      	ldrb	r2, [r7, #22]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800628e:	7dba      	ldrb	r2, [r7, #22]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	32ae      	adds	r2, #174	; 0xae
 8006294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	7afa      	ldrb	r2, [r7, #11]
 800629c:	4611      	mov	r1, r2
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	4798      	blx	r3
 80062a2:	4603      	mov	r3, r0
 80062a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	e000      	b.n	80062b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	460b      	mov	r3, r1
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80062c8:	7afb      	ldrb	r3, [r7, #11]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d16f      	bne.n	80063ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3314      	adds	r3, #20
 80062d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d15a      	bne.n	8006394 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d914      	bls.n	8006314 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	1ad2      	subs	r2, r2, r3
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	461a      	mov	r2, r3
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f001 f8d6 	bl	80074b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006306:	2300      	movs	r3, #0
 8006308:	2200      	movs	r2, #0
 800630a:	2100      	movs	r1, #0
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f001 fd13 	bl	8007d38 <USBD_LL_PrepareReceive>
 8006312:	e03f      	b.n	8006394 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	429a      	cmp	r2, r3
 800631e:	d11c      	bne.n	800635a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006328:	429a      	cmp	r2, r3
 800632a:	d316      	bcc.n	800635a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006336:	429a      	cmp	r2, r3
 8006338:	d20f      	bcs.n	800635a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800633a:	2200      	movs	r2, #0
 800633c:	2100      	movs	r1, #0
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f001 f8b7 	bl	80074b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800634c:	2300      	movs	r3, #0
 800634e:	2200      	movs	r2, #0
 8006350:	2100      	movs	r1, #0
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f001 fcf0 	bl	8007d38 <USBD_LL_PrepareReceive>
 8006358:	e01c      	b.n	8006394 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b03      	cmp	r3, #3
 8006364:	d10f      	bne.n	8006386 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006386:	2180      	movs	r1, #128	; 0x80
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f001 fc2b 	bl	8007be4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f001 f8c4 	bl	800751c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d03a      	beq.n	8006414 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff fe42 	bl	8006028 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80063ac:	e032      	b.n	8006414 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	4619      	mov	r1, r3
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f97f 	bl	80066bc <USBD_CoreFindEP>
 80063be:	4603      	mov	r3, r0
 80063c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2bff      	cmp	r3, #255	; 0xff
 80063c6:	d025      	beq.n	8006414 <USBD_LL_DataInStage+0x15a>
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d122      	bne.n	8006414 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d11c      	bne.n	8006414 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063da:	7dfa      	ldrb	r2, [r7, #23]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	32ae      	adds	r2, #174	; 0xae
 80063e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d014      	beq.n	8006414 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80063ea:	7dfa      	ldrb	r2, [r7, #23]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80063f2:	7dfa      	ldrb	r2, [r7, #23]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	32ae      	adds	r2, #174	; 0xae
 80063f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	7afa      	ldrb	r2, [r7, #11]
 8006400:	4611      	mov	r1, r2
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	4798      	blx	r3
 8006406:	4603      	mov	r3, r0
 8006408:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800640a:	7dbb      	ldrb	r3, [r7, #22]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006410:	7dbb      	ldrb	r3, [r7, #22]
 8006412:	e000      	b.n	8006416 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006456:	2b00      	cmp	r3, #0
 8006458:	d014      	beq.n	8006484 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00e      	beq.n	8006484 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6852      	ldr	r2, [r2, #4]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	4611      	mov	r1, r2
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	4798      	blx	r3
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006480:	2303      	movs	r3, #3
 8006482:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006484:	2340      	movs	r3, #64	; 0x40
 8006486:	2200      	movs	r2, #0
 8006488:	2100      	movs	r1, #0
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fb65 	bl	8007b5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2240      	movs	r2, #64	; 0x40
 800649c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064a0:	2340      	movs	r3, #64	; 0x40
 80064a2:	2200      	movs	r2, #0
 80064a4:	2180      	movs	r1, #128	; 0x80
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 fb57 	bl	8007b5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2240      	movs	r2, #64	; 0x40
 80064b6:	621a      	str	r2, [r3, #32]

  return ret;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	78fa      	ldrb	r2, [r7, #3]
 80064d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2204      	movs	r2, #4
 80064fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b04      	cmp	r3, #4
 8006520:	d106      	bne.n	8006530 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006528:	b2da      	uxtb	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b03      	cmp	r3, #3
 8006550:	d110      	bne.n	8006574 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b082      	sub	sp, #8
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	32ae      	adds	r2, #174	; 0xae
 8006594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	e01c      	b.n	80065da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d115      	bne.n	80065d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	32ae      	adds	r2, #174	; 0xae
 80065b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	32ae      	adds	r2, #174	; 0xae
 80065ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	4611      	mov	r1, r2
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	32ae      	adds	r2, #174	; 0xae
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006600:	2303      	movs	r3, #3
 8006602:	e01c      	b.n	800663e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b03      	cmp	r3, #3
 800660e:	d115      	bne.n	800663c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	32ae      	adds	r2, #174	; 0xae
 800661a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	32ae      	adds	r2, #174	; 0xae
 800662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	4611      	mov	r1, r2
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6852      	ldr	r2, [r2, #4]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	4611      	mov	r1, r2
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006694:	2303      	movs	r3, #3
 8006696:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	885b      	ldrh	r3, [r3, #2]
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d920      	bls.n	8006740 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006706:	e013      	b.n	8006730 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006708:	f107 030a 	add.w	r3, r7, #10
 800670c:	4619      	mov	r1, r3
 800670e:	6978      	ldr	r0, [r7, #20]
 8006710:	f000 f81b 	bl	800674a <USBD_GetNextDesc>
 8006714:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b05      	cmp	r3, #5
 800671c:	d108      	bne.n	8006730 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	789b      	ldrb	r3, [r3, #2]
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	429a      	cmp	r2, r3
 800672a:	d008      	beq.n	800673e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	885b      	ldrh	r3, [r3, #2]
 8006734:	b29a      	uxth	r2, r3
 8006736:	897b      	ldrh	r3, [r7, #10]
 8006738:	429a      	cmp	r2, r3
 800673a:	d8e5      	bhi.n	8006708 <USBD_GetEpDesc+0x32>
 800673c:	e000      	b.n	8006740 <USBD_GetEpDesc+0x6a>
          break;
 800673e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006740:	693b      	ldr	r3, [r7, #16]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	881a      	ldrh	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	4413      	add	r3, r2
 8006764:	b29a      	uxth	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4413      	add	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006776:	68fb      	ldr	r3, [r7, #12]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	3301      	adds	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067a2:	8a3b      	ldrh	r3, [r7, #16]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	b21a      	sxth	r2, r3
 80067a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	b21b      	sxth	r3, r3
 80067b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80067b2:	89fb      	ldrh	r3, [r7, #14]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d005      	beq.n	80067e6 <USBD_StdDevReq+0x26>
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d857      	bhi.n	800688e <USBD_StdDevReq+0xce>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00f      	beq.n	8006802 <USBD_StdDevReq+0x42>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d153      	bne.n	800688e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	32ae      	adds	r2, #174	; 0xae
 80067f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
 80067fc:	4603      	mov	r3, r0
 80067fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006800:	e04a      	b.n	8006898 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b09      	cmp	r3, #9
 8006808:	d83b      	bhi.n	8006882 <USBD_StdDevReq+0xc2>
 800680a:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <USBD_StdDevReq+0x50>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006865 	.word	0x08006865
 8006814:	08006879 	.word	0x08006879
 8006818:	08006883 	.word	0x08006883
 800681c:	0800686f 	.word	0x0800686f
 8006820:	08006883 	.word	0x08006883
 8006824:	08006843 	.word	0x08006843
 8006828:	08006839 	.word	0x08006839
 800682c:	08006883 	.word	0x08006883
 8006830:	0800685b 	.word	0x0800685b
 8006834:	0800684d 	.word	0x0800684d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa3c 	bl	8006cb8 <USBD_GetDescriptor>
          break;
 8006840:	e024      	b.n	800688c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fbcb 	bl	8006fe0 <USBD_SetAddress>
          break;
 800684a:	e01f      	b.n	800688c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fc0a 	bl	8007068 <USBD_SetConfig>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
          break;
 8006858:	e018      	b.n	800688c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fcad 	bl	80071bc <USBD_GetConfig>
          break;
 8006862:	e013      	b.n	800688c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fcde 	bl	8007228 <USBD_GetStatus>
          break;
 800686c:	e00e      	b.n	800688c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fd0d 	bl	8007290 <USBD_SetFeature>
          break;
 8006876:	e009      	b.n	800688c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fd31 	bl	80072e2 <USBD_ClrFeature>
          break;
 8006880:	e004      	b.n	800688c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fd88 	bl	800739a <USBD_CtlError>
          break;
 800688a:	bf00      	nop
      }
      break;
 800688c:	e004      	b.n	8006898 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fd82 	bl	800739a <USBD_CtlError>
      break;
 8006896:	bf00      	nop
  }

  return ret;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop

080068a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068ba:	2b40      	cmp	r3, #64	; 0x40
 80068bc:	d005      	beq.n	80068ca <USBD_StdItfReq+0x26>
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d852      	bhi.n	8006968 <USBD_StdItfReq+0xc4>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <USBD_StdItfReq+0x26>
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d14e      	bne.n	8006968 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d840      	bhi.n	800695a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	889b      	ldrh	r3, [r3, #4]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d836      	bhi.n	8006950 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	889b      	ldrh	r3, [r3, #4]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fed9 	bl	80066a2 <USBD_CoreFindIF>
 80068f0:	4603      	mov	r3, r0
 80068f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	2bff      	cmp	r3, #255	; 0xff
 80068f8:	d01d      	beq.n	8006936 <USBD_StdItfReq+0x92>
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d11a      	bne.n	8006936 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006900:	7bba      	ldrb	r2, [r7, #14]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	32ae      	adds	r2, #174	; 0xae
 8006906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00f      	beq.n	8006930 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006910:	7bba      	ldrb	r2, [r7, #14]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006918:	7bba      	ldrb	r2, [r7, #14]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	32ae      	adds	r2, #174	; 0xae
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800692e:	e004      	b.n	800693a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006930:	2303      	movs	r3, #3
 8006932:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006934:	e001      	b.n	800693a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006936:	2303      	movs	r3, #3
 8006938:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	88db      	ldrh	r3, [r3, #6]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d110      	bne.n	8006964 <USBD_StdItfReq+0xc0>
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10d      	bne.n	8006964 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fdd4 	bl	80074f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800694e:	e009      	b.n	8006964 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fd21 	bl	800739a <USBD_CtlError>
          break;
 8006958:	e004      	b.n	8006964 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fd1c 	bl	800739a <USBD_CtlError>
          break;
 8006962:	e000      	b.n	8006966 <USBD_StdItfReq+0xc2>
          break;
 8006964:	bf00      	nop
      }
      break;
 8006966:	e004      	b.n	8006972 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fd15 	bl	800739a <USBD_CtlError>
      break;
 8006970:	bf00      	nop
  }

  return ret;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	889b      	ldrh	r3, [r3, #4]
 800698e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	d007      	beq.n	80069ac <USBD_StdEPReq+0x30>
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	f200 817f 	bhi.w	8006ca0 <USBD_StdEPReq+0x324>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d02a      	beq.n	80069fc <USBD_StdEPReq+0x80>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	f040 817a 	bne.w	8006ca0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff fe83 	bl	80066bc <USBD_CoreFindEP>
 80069b6:	4603      	mov	r3, r0
 80069b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069ba:	7b7b      	ldrb	r3, [r7, #13]
 80069bc:	2bff      	cmp	r3, #255	; 0xff
 80069be:	f000 8174 	beq.w	8006caa <USBD_StdEPReq+0x32e>
 80069c2:	7b7b      	ldrb	r3, [r7, #13]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f040 8170 	bne.w	8006caa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80069ca:	7b7a      	ldrb	r2, [r7, #13]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80069d2:	7b7a      	ldrb	r2, [r7, #13]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	32ae      	adds	r2, #174	; 0xae
 80069d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 8163 	beq.w	8006caa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80069e4:	7b7a      	ldrb	r2, [r7, #13]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	32ae      	adds	r2, #174	; 0xae
 80069ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	4798      	blx	r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069fa:	e156      	b.n	8006caa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d008      	beq.n	8006a16 <USBD_StdEPReq+0x9a>
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	f300 8145 	bgt.w	8006c94 <USBD_StdEPReq+0x318>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 809b 	beq.w	8006b46 <USBD_StdEPReq+0x1ca>
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d03c      	beq.n	8006a8e <USBD_StdEPReq+0x112>
 8006a14:	e13e      	b.n	8006c94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d002      	beq.n	8006a28 <USBD_StdEPReq+0xac>
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d016      	beq.n	8006a54 <USBD_StdEPReq+0xd8>
 8006a26:	e02c      	b.n	8006a82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00d      	beq.n	8006a4a <USBD_StdEPReq+0xce>
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b80      	cmp	r3, #128	; 0x80
 8006a32:	d00a      	beq.n	8006a4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 f8d3 	bl	8007be4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a3e:	2180      	movs	r1, #128	; 0x80
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 f8cf 	bl	8007be4 <USBD_LL_StallEP>
 8006a46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a48:	e020      	b.n	8006a8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fca4 	bl	800739a <USBD_CtlError>
              break;
 8006a52:	e01b      	b.n	8006a8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	885b      	ldrh	r3, [r3, #2]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10e      	bne.n	8006a7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <USBD_StdEPReq+0xfe>
 8006a62:	7bbb      	ldrb	r3, [r7, #14]
 8006a64:	2b80      	cmp	r3, #128	; 0x80
 8006a66:	d008      	beq.n	8006a7a <USBD_StdEPReq+0xfe>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	88db      	ldrh	r3, [r3, #6]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 f8b5 	bl	8007be4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fd3b 	bl	80074f6 <USBD_CtlSendStatus>

              break;
 8006a80:	e004      	b.n	8006a8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fc88 	bl	800739a <USBD_CtlError>
              break;
 8006a8a:	bf00      	nop
          }
          break;
 8006a8c:	e107      	b.n	8006c9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d002      	beq.n	8006aa0 <USBD_StdEPReq+0x124>
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d016      	beq.n	8006acc <USBD_StdEPReq+0x150>
 8006a9e:	e04b      	b.n	8006b38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00d      	beq.n	8006ac2 <USBD_StdEPReq+0x146>
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d00a      	beq.n	8006ac2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f897 	bl	8007be4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ab6:	2180      	movs	r1, #128	; 0x80
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 f893 	bl	8007be4 <USBD_LL_StallEP>
 8006abe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac0:	e040      	b.n	8006b44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fc68 	bl	800739a <USBD_CtlError>
              break;
 8006aca:	e03b      	b.n	8006b44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	885b      	ldrh	r3, [r3, #2]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d136      	bne.n	8006b42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 f89d 	bl	8007c22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fd04 	bl	80074f6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006aee:	7bbb      	ldrb	r3, [r7, #14]
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fde2 	bl	80066bc <USBD_CoreFindEP>
 8006af8:	4603      	mov	r3, r0
 8006afa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006afc:	7b7b      	ldrb	r3, [r7, #13]
 8006afe:	2bff      	cmp	r3, #255	; 0xff
 8006b00:	d01f      	beq.n	8006b42 <USBD_StdEPReq+0x1c6>
 8006b02:	7b7b      	ldrb	r3, [r7, #13]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d11c      	bne.n	8006b42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b08:	7b7a      	ldrb	r2, [r7, #13]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b10:	7b7a      	ldrb	r2, [r7, #13]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	32ae      	adds	r2, #174	; 0xae
 8006b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d010      	beq.n	8006b42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b20:	7b7a      	ldrb	r2, [r7, #13]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	32ae      	adds	r2, #174	; 0xae
 8006b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b36:	e004      	b.n	8006b42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fc2d 	bl	800739a <USBD_CtlError>
              break;
 8006b40:	e000      	b.n	8006b44 <USBD_StdEPReq+0x1c8>
              break;
 8006b42:	bf00      	nop
          }
          break;
 8006b44:	e0ab      	b.n	8006c9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d002      	beq.n	8006b58 <USBD_StdEPReq+0x1dc>
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d032      	beq.n	8006bbc <USBD_StdEPReq+0x240>
 8006b56:	e097      	b.n	8006c88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <USBD_StdEPReq+0x1f2>
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b80      	cmp	r3, #128	; 0x80
 8006b62:	d004      	beq.n	8006b6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fc17 	bl	800739a <USBD_CtlError>
                break;
 8006b6c:	e091      	b.n	8006c92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	da0b      	bge.n	8006b8e <USBD_StdEPReq+0x212>
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	3310      	adds	r3, #16
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4413      	add	r3, r2
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	e00b      	b.n	8006ba6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fc61 	bl	800747c <USBD_CtlSendData>
              break;
 8006bba:	e06a      	b.n	8006c92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	da11      	bge.n	8006be8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	f003 020f 	and.w	r2, r3, #15
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d117      	bne.n	8006c0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fbda 	bl	800739a <USBD_CtlError>
                  break;
 8006be6:	e054      	b.n	8006c92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	f003 020f 	and.w	r2, r3, #15
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fbc7 	bl	800739a <USBD_CtlError>
                  break;
 8006c0c:	e041      	b.n	8006c92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da0b      	bge.n	8006c2e <USBD_StdEPReq+0x2b2>
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	3310      	adds	r3, #16
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	4413      	add	r3, r2
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	e00b      	b.n	8006c46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	3304      	adds	r3, #4
 8006c46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <USBD_StdEPReq+0x2d8>
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	2b80      	cmp	r3, #128	; 0x80
 8006c52:	d103      	bne.n	8006c5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	e00e      	b.n	8006c7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fffd 	bl	8007c60 <USBD_LL_IsStallEP>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e002      	b.n	8006c7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fbfb 	bl	800747c <USBD_CtlSendData>
              break;
 8006c86:	e004      	b.n	8006c92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fb85 	bl	800739a <USBD_CtlError>
              break;
 8006c90:	bf00      	nop
          }
          break;
 8006c92:	e004      	b.n	8006c9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fb7f 	bl	800739a <USBD_CtlError>
          break;
 8006c9c:	bf00      	nop
      }
      break;
 8006c9e:	e005      	b.n	8006cac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fb79 	bl	800739a <USBD_CtlError>
      break;
 8006ca8:	e000      	b.n	8006cac <USBD_StdEPReq+0x330>
      break;
 8006caa:	bf00      	nop
  }

  return ret;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	885b      	ldrh	r3, [r3, #2]
 8006cd2:	0a1b      	lsrs	r3, r3, #8
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	2b0e      	cmp	r3, #14
 8006cda:	f200 8152 	bhi.w	8006f82 <USBD_GetDescriptor+0x2ca>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <USBD_GetDescriptor+0x2c>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006d55 	.word	0x08006d55
 8006ce8:	08006d6d 	.word	0x08006d6d
 8006cec:	08006dad 	.word	0x08006dad
 8006cf0:	08006f83 	.word	0x08006f83
 8006cf4:	08006f83 	.word	0x08006f83
 8006cf8:	08006f23 	.word	0x08006f23
 8006cfc:	08006f4f 	.word	0x08006f4f
 8006d00:	08006f83 	.word	0x08006f83
 8006d04:	08006f83 	.word	0x08006f83
 8006d08:	08006f83 	.word	0x08006f83
 8006d0c:	08006f83 	.word	0x08006f83
 8006d10:	08006f83 	.word	0x08006f83
 8006d14:	08006f83 	.word	0x08006f83
 8006d18:	08006f83 	.word	0x08006f83
 8006d1c:	08006d21 	.word	0x08006d21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7c12      	ldrb	r2, [r2, #16]
 8006d38:	f107 0108 	add.w	r1, r7, #8
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
 8006d40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d42:	e126      	b.n	8006f92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fb27 	bl	800739a <USBD_CtlError>
        err++;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	72fb      	strb	r3, [r7, #11]
      break;
 8006d52:	e11e      	b.n	8006f92 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	7c12      	ldrb	r2, [r2, #16]
 8006d60:	f107 0108 	add.w	r1, r7, #8
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
 8006d68:	60f8      	str	r0, [r7, #12]
      break;
 8006d6a:	e112      	b.n	8006f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	7c1b      	ldrb	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10d      	bne.n	8006d90 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	f107 0208 	add.w	r2, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d8e:	e100      	b.n	8006f92 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	f107 0208 	add.w	r2, r7, #8
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3301      	adds	r3, #1
 8006da6:	2202      	movs	r2, #2
 8006da8:	701a      	strb	r2, [r3, #0]
      break;
 8006daa:	e0f2      	b.n	8006f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	885b      	ldrh	r3, [r3, #2]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	f200 80ac 	bhi.w	8006f10 <USBD_GetDescriptor+0x258>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <USBD_GetDescriptor+0x108>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006dd9 	.word	0x08006dd9
 8006dc4:	08006e0d 	.word	0x08006e0d
 8006dc8:	08006e41 	.word	0x08006e41
 8006dcc:	08006e75 	.word	0x08006e75
 8006dd0:	08006ea9 	.word	0x08006ea9
 8006dd4:	08006edd 	.word	0x08006edd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7c12      	ldrb	r2, [r2, #16]
 8006df0:	f107 0108 	add.w	r1, r7, #8
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dfa:	e091      	b.n	8006f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 facb 	bl	800739a <USBD_CtlError>
            err++;
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	3301      	adds	r3, #1
 8006e08:	72fb      	strb	r3, [r7, #11]
          break;
 8006e0a:	e089      	b.n	8006f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	7c12      	ldrb	r2, [r2, #16]
 8006e24:	f107 0108 	add.w	r1, r7, #8
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2e:	e077      	b.n	8006f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fab1 	bl	800739a <USBD_CtlError>
            err++;
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3e:	e06f      	b.n	8006f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	7c12      	ldrb	r2, [r2, #16]
 8006e58:	f107 0108 	add.w	r1, r7, #8
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e62:	e05d      	b.n	8006f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa97 	bl	800739a <USBD_CtlError>
            err++;
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	72fb      	strb	r3, [r7, #11]
          break;
 8006e72:	e055      	b.n	8006f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7c12      	ldrb	r2, [r2, #16]
 8006e8c:	f107 0108 	add.w	r1, r7, #8
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e96:	e043      	b.n	8006f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa7d 	bl	800739a <USBD_CtlError>
            err++;
 8006ea0:	7afb      	ldrb	r3, [r7, #11]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea6:	e03b      	b.n	8006f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7c12      	ldrb	r2, [r2, #16]
 8006ec0:	f107 0108 	add.w	r1, r7, #8
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eca:	e029      	b.n	8006f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa63 	bl	800739a <USBD_CtlError>
            err++;
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eda:	e021      	b.n	8006f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7c12      	ldrb	r2, [r2, #16]
 8006ef4:	f107 0108 	add.w	r1, r7, #8
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
 8006efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006efe:	e00f      	b.n	8006f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa49 	bl	800739a <USBD_CtlError>
            err++;
 8006f08:	7afb      	ldrb	r3, [r7, #11]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f0e:	e007      	b.n	8006f20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa41 	bl	800739a <USBD_CtlError>
          err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f1e:	bf00      	nop
      }
      break;
 8006f20:	e037      	b.n	8006f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	7c1b      	ldrb	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	f107 0208 	add.w	r2, r7, #8
 8006f36:	4610      	mov	r0, r2
 8006f38:	4798      	blx	r3
 8006f3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f3c:	e029      	b.n	8006f92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fa2a 	bl	800739a <USBD_CtlError>
        err++;
 8006f46:	7afb      	ldrb	r3, [r7, #11]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f4c:	e021      	b.n	8006f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7c1b      	ldrb	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10d      	bne.n	8006f72 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	f107 0208 	add.w	r2, r7, #8
 8006f62:	4610      	mov	r0, r2
 8006f64:	4798      	blx	r3
 8006f66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	2207      	movs	r2, #7
 8006f6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f70:	e00f      	b.n	8006f92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fa10 	bl	800739a <USBD_CtlError>
        err++;
 8006f7a:	7afb      	ldrb	r3, [r7, #11]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f80:	e007      	b.n	8006f92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fa08 	bl	800739a <USBD_CtlError>
      err++;
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f90:	bf00      	nop
  }

  if (err != 0U)
 8006f92:	7afb      	ldrb	r3, [r7, #11]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11e      	bne.n	8006fd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	88db      	ldrh	r3, [r3, #6]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d016      	beq.n	8006fce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006fa0:	893b      	ldrh	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00e      	beq.n	8006fc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	88da      	ldrh	r2, [r3, #6]
 8006faa:	893b      	ldrh	r3, [r7, #8]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	bf28      	it	cs
 8006fb0:	4613      	movcs	r3, r2
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fb6:	893b      	ldrh	r3, [r7, #8]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fa5d 	bl	800747c <USBD_CtlSendData>
 8006fc2:	e009      	b.n	8006fd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9e7 	bl	800739a <USBD_CtlError>
 8006fcc:	e004      	b.n	8006fd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa91 	bl	80074f6 <USBD_CtlSendStatus>
 8006fd4:	e000      	b.n	8006fd8 <USBD_GetDescriptor+0x320>
    return;
 8006fd6:	bf00      	nop
  }
}
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop

08006fe0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	889b      	ldrh	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d131      	bne.n	8007056 <USBD_SetAddress+0x76>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	88db      	ldrh	r3, [r3, #6]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d12d      	bne.n	8007056 <USBD_SetAddress+0x76>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	885b      	ldrh	r3, [r3, #2]
 8006ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8007000:	d829      	bhi.n	8007056 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	885b      	ldrh	r3, [r3, #2]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b03      	cmp	r3, #3
 8007018:	d104      	bne.n	8007024 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f9bc 	bl	800739a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007022:	e01d      	b.n	8007060 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	7bfa      	ldrb	r2, [r7, #15]
 8007028:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fe41 	bl	8007cb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa5d 	bl	80074f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704a:	e009      	b.n	8007060 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007054:	e004      	b.n	8007060 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f99e 	bl	800739a <USBD_CtlError>
  }
}
 800705e:	bf00      	nop
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	4b4e      	ldr	r3, [pc, #312]	; (80071b8 <USBD_SetConfig+0x150>)
 800707e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007080:	4b4d      	ldr	r3, [pc, #308]	; (80071b8 <USBD_SetConfig+0x150>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d905      	bls.n	8007094 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f985 	bl	800739a <USBD_CtlError>
    return USBD_FAIL;
 8007090:	2303      	movs	r3, #3
 8007092:	e08c      	b.n	80071ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d002      	beq.n	80070a6 <USBD_SetConfig+0x3e>
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d029      	beq.n	80070f8 <USBD_SetConfig+0x90>
 80070a4:	e075      	b.n	8007192 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070a6:	4b44      	ldr	r3, [pc, #272]	; (80071b8 <USBD_SetConfig+0x150>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d020      	beq.n	80070f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070ae:	4b42      	ldr	r3, [pc, #264]	; (80071b8 <USBD_SetConfig+0x150>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070b8:	4b3f      	ldr	r3, [pc, #252]	; (80071b8 <USBD_SetConfig+0x150>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fe ffbd 	bl	800603e <USBD_SetClassConfig>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d008      	beq.n	80070e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f962 	bl	800739a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2202      	movs	r2, #2
 80070da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070de:	e065      	b.n	80071ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fa08 	bl	80074f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2203      	movs	r2, #3
 80070ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070ee:	e05d      	b.n	80071ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa00 	bl	80074f6 <USBD_CtlSendStatus>
      break;
 80070f6:	e059      	b.n	80071ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070f8:	4b2f      	ldr	r3, [pc, #188]	; (80071b8 <USBD_SetConfig+0x150>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d112      	bne.n	8007126 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007108:	4b2b      	ldr	r3, [pc, #172]	; (80071b8 <USBD_SetConfig+0x150>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007112:	4b29      	ldr	r3, [pc, #164]	; (80071b8 <USBD_SetConfig+0x150>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7fe ffac 	bl	8006076 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9e9 	bl	80074f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007124:	e042      	b.n	80071ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007126:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <USBD_SetConfig+0x150>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d02a      	beq.n	800718a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fe ff9a 	bl	8006076 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007142:	4b1d      	ldr	r3, [pc, #116]	; (80071b8 <USBD_SetConfig+0x150>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800714c:	4b1a      	ldr	r3, [pc, #104]	; (80071b8 <USBD_SetConfig+0x150>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fe ff73 	bl	800603e <USBD_SetClassConfig>
 8007158:	4603      	mov	r3, r0
 800715a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00f      	beq.n	8007182 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f918 	bl	800739a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	b2db      	uxtb	r3, r3
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fe ff7f 	bl	8006076 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007180:	e014      	b.n	80071ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f9b7 	bl	80074f6 <USBD_CtlSendStatus>
      break;
 8007188:	e010      	b.n	80071ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f9b3 	bl	80074f6 <USBD_CtlSendStatus>
      break;
 8007190:	e00c      	b.n	80071ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f900 	bl	800739a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800719a:	4b07      	ldr	r3, [pc, #28]	; (80071b8 <USBD_SetConfig+0x150>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7fe ff68 	bl	8006076 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071a6:	2303      	movs	r3, #3
 80071a8:	73fb      	strb	r3, [r7, #15]
      break;
 80071aa:	bf00      	nop
  }

  return ret;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200001dc 	.word	0x200001dc

080071bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	88db      	ldrh	r3, [r3, #6]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d004      	beq.n	80071d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f8e2 	bl	800739a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071d6:	e023      	b.n	8007220 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	dc02      	bgt.n	80071ea <USBD_GetConfig+0x2e>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dc03      	bgt.n	80071f0 <USBD_GetConfig+0x34>
 80071e8:	e015      	b.n	8007216 <USBD_GetConfig+0x5a>
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d00b      	beq.n	8007206 <USBD_GetConfig+0x4a>
 80071ee:	e012      	b.n	8007216 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3308      	adds	r3, #8
 80071fa:	2201      	movs	r2, #1
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f93c 	bl	800747c <USBD_CtlSendData>
        break;
 8007204:	e00c      	b.n	8007220 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3304      	adds	r3, #4
 800720a:	2201      	movs	r2, #1
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f934 	bl	800747c <USBD_CtlSendData>
        break;
 8007214:	e004      	b.n	8007220 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f8be 	bl	800739a <USBD_CtlError>
        break;
 800721e:	bf00      	nop
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007238:	b2db      	uxtb	r3, r3
 800723a:	3b01      	subs	r3, #1
 800723c:	2b02      	cmp	r3, #2
 800723e:	d81e      	bhi.n	800727e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	88db      	ldrh	r3, [r3, #6]
 8007244:	2b02      	cmp	r3, #2
 8007246:	d004      	beq.n	8007252 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f8a5 	bl	800739a <USBD_CtlError>
        break;
 8007250:	e01a      	b.n	8007288 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f043 0202 	orr.w	r2, r3, #2
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	330c      	adds	r3, #12
 8007272:	2202      	movs	r2, #2
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f900 	bl	800747c <USBD_CtlSendData>
      break;
 800727c:	e004      	b.n	8007288 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f88a 	bl	800739a <USBD_CtlError>
      break;
 8007286:	bf00      	nop
  }
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	885b      	ldrh	r3, [r3, #2]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d107      	bne.n	80072b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f923 	bl	80074f6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072b0:	e013      	b.n	80072da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	885b      	ldrh	r3, [r3, #2]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d10b      	bne.n	80072d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	889b      	ldrh	r3, [r3, #4]
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f913 	bl	80074f6 <USBD_CtlSendStatus>
}
 80072d0:	e003      	b.n	80072da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f860 	bl	800739a <USBD_CtlError>
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d80b      	bhi.n	8007312 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	885b      	ldrh	r3, [r3, #2]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d10c      	bne.n	800731c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f8f3 	bl	80074f6 <USBD_CtlSendStatus>
      }
      break;
 8007310:	e004      	b.n	800731c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f840 	bl	800739a <USBD_CtlError>
      break;
 800731a:	e000      	b.n	800731e <USBD_ClrFeature+0x3c>
      break;
 800731c:	bf00      	nop
  }
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	781a      	ldrb	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fa17 	bl	8006784 <SWAPBYTE>
 8007356:	4603      	mov	r3, r0
 8007358:	461a      	mov	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3301      	adds	r3, #1
 8007362:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3301      	adds	r3, #1
 8007368:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f7ff fa0a 	bl	8006784 <SWAPBYTE>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff f9fd 	bl	8006784 <SWAPBYTE>
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	80da      	strh	r2, [r3, #6]
}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073a4:	2180      	movs	r1, #128	; 0x80
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fc1c 	bl	8007be4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073ac:	2100      	movs	r1, #0
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fc18 	bl	8007be4 <USBD_LL_StallEP>
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d036      	beq.n	8007440 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073d6:	6938      	ldr	r0, [r7, #16]
 80073d8:	f000 f836 	bl	8007448 <USBD_GetLen>
 80073dc:	4603      	mov	r3, r0
 80073de:	3301      	adds	r3, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	4413      	add	r3, r2
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	7812      	ldrb	r2, [r2, #0]
 80073f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	3301      	adds	r3, #1
 80073fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	2203      	movs	r2, #3
 8007404:	701a      	strb	r2, [r3, #0]
  idx++;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	3301      	adds	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800740c:	e013      	b.n	8007436 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	4413      	add	r3, r2
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	7812      	ldrb	r2, [r2, #0]
 8007418:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	3301      	adds	r3, #1
 800741e:	613b      	str	r3, [r7, #16]
    idx++;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	3301      	adds	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	4413      	add	r3, r2
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	3301      	adds	r3, #1
 8007434:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e7      	bne.n	800740e <USBD_GetString+0x52>
 800743e:	e000      	b.n	8007442 <USBD_GetString+0x86>
    return;
 8007440:	bf00      	nop
  }
}
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007458:	e005      	b.n	8007466 <USBD_GetLen+0x1e>
  {
    len++;
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	3301      	adds	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	3301      	adds	r3, #1
 8007464:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f5      	bne.n	800745a <USBD_GetLen+0x12>
  }

  return len;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2202      	movs	r2, #2
 800748c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	2100      	movs	r1, #0
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fc27 	bl	8007cf6 <USBD_LL_Transmit>

  return USBD_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	2100      	movs	r1, #0
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fc16 	bl	8007cf6 <USBD_LL_Transmit>

  return USBD_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	2100      	movs	r1, #0
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 fc26 	bl	8007d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2204      	movs	r2, #4
 8007502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007506:	2300      	movs	r3, #0
 8007508:	2200      	movs	r2, #0
 800750a:	2100      	movs	r1, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fbf2 	bl	8007cf6 <USBD_LL_Transmit>

  return USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2205      	movs	r2, #5
 8007528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800752c:	2300      	movs	r3, #0
 800752e:	2200      	movs	r2, #0
 8007530:	2100      	movs	r1, #0
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fc00 	bl	8007d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007548:	2200      	movs	r2, #0
 800754a:	490e      	ldr	r1, [pc, #56]	; (8007584 <MX_USB_DEVICE_Init+0x40>)
 800754c:	480e      	ldr	r0, [pc, #56]	; (8007588 <MX_USB_DEVICE_Init+0x44>)
 800754e:	f7fe fcf9 	bl	8005f44 <USBD_Init>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007558:	f7f9 f98c 	bl	8000874 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800755c:	490b      	ldr	r1, [pc, #44]	; (800758c <MX_USB_DEVICE_Init+0x48>)
 800755e:	480a      	ldr	r0, [pc, #40]	; (8007588 <MX_USB_DEVICE_Init+0x44>)
 8007560:	f7fe fd20 	bl	8005fa4 <USBD_RegisterClass>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800756a:	f7f9 f983 	bl	8000874 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800756e:	4806      	ldr	r0, [pc, #24]	; (8007588 <MX_USB_DEVICE_Init+0x44>)
 8007570:	f7fe fd4e 	bl	8006010 <USBD_Start>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800757a:	f7f9 f97b 	bl	8000874 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800757e:	bf00      	nop
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	200000b8 	.word	0x200000b8
 8007588:	200001e0 	.word	0x200001e0
 800758c:	2000000c 	.word	0x2000000c

08007590 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	4603      	mov	r3, r0
 8007598:	6039      	str	r1, [r7, #0]
 800759a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2212      	movs	r2, #18
 80075a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075a2:	4b03      	ldr	r3, [pc, #12]	; (80075b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	200000d8 	.word	0x200000d8

080075b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2204      	movs	r2, #4
 80075c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075c6:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	200000f8 	.word	0x200000f8

080075d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d105      	bne.n	80075f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	4907      	ldr	r1, [pc, #28]	; (800760c <USBD_FS_ProductStrDescriptor+0x34>)
 80075ee:	4808      	ldr	r0, [pc, #32]	; (8007610 <USBD_FS_ProductStrDescriptor+0x38>)
 80075f0:	f7ff fee4 	bl	80073bc <USBD_GetString>
 80075f4:	e004      	b.n	8007600 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4904      	ldr	r1, [pc, #16]	; (800760c <USBD_FS_ProductStrDescriptor+0x34>)
 80075fa:	4805      	ldr	r0, [pc, #20]	; (8007610 <USBD_FS_ProductStrDescriptor+0x38>)
 80075fc:	f7ff fede 	bl	80073bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007600:	4b02      	ldr	r3, [pc, #8]	; (800760c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	200004bc 	.word	0x200004bc
 8007610:	08007f10 	.word	0x08007f10

08007614 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	6039      	str	r1, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	4904      	ldr	r1, [pc, #16]	; (8007634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007624:	4804      	ldr	r0, [pc, #16]	; (8007638 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007626:	f7ff fec9 	bl	80073bc <USBD_GetString>
  return USBD_StrDesc;
 800762a:	4b02      	ldr	r3, [pc, #8]	; (8007634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	200004bc 	.word	0x200004bc
 8007638:	08007f1c 	.word	0x08007f1c

0800763c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	6039      	str	r1, [r7, #0]
 8007646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	221a      	movs	r2, #26
 800764c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800764e:	f000 f855 	bl	80076fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007652:	4b02      	ldr	r3, [pc, #8]	; (800765c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	200000fc 	.word	0x200000fc

08007660 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d105      	bne.n	800767e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	4907      	ldr	r1, [pc, #28]	; (8007694 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007676:	4808      	ldr	r0, [pc, #32]	; (8007698 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007678:	f7ff fea0 	bl	80073bc <USBD_GetString>
 800767c:	e004      	b.n	8007688 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	4904      	ldr	r1, [pc, #16]	; (8007694 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007682:	4805      	ldr	r0, [pc, #20]	; (8007698 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007684:	f7ff fe9a 	bl	80073bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200004bc 	.word	0x200004bc
 8007698:	08007f30 	.word	0x08007f30

0800769c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d105      	bne.n	80076ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	4907      	ldr	r1, [pc, #28]	; (80076d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076b2:	4808      	ldr	r0, [pc, #32]	; (80076d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076b4:	f7ff fe82 	bl	80073bc <USBD_GetString>
 80076b8:	e004      	b.n	80076c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	4904      	ldr	r1, [pc, #16]	; (80076d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076be:	4805      	ldr	r0, [pc, #20]	; (80076d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076c0:	f7ff fe7c 	bl	80073bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80076c4:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200004bc 	.word	0x200004bc
 80076d4:	08007f3c 	.word	0x08007f3c

080076d8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	6039      	str	r1, [r7, #0]
 80076e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	220c      	movs	r2, #12
 80076e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80076ea:	4b03      	ldr	r3, [pc, #12]	; (80076f8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	200000ec 	.word	0x200000ec

080076fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <Get_SerialNum+0x44>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <Get_SerialNum+0x48>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800770e:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <Get_SerialNum+0x4c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4413      	add	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007722:	2208      	movs	r2, #8
 8007724:	4909      	ldr	r1, [pc, #36]	; (800774c <Get_SerialNum+0x50>)
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f814 	bl	8007754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800772c:	2204      	movs	r2, #4
 800772e:	4908      	ldr	r1, [pc, #32]	; (8007750 <Get_SerialNum+0x54>)
 8007730:	68b8      	ldr	r0, [r7, #8]
 8007732:	f000 f80f 	bl	8007754 <IntToUnicode>
  }
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	1fff7a10 	.word	0x1fff7a10
 8007744:	1fff7a14 	.word	0x1fff7a14
 8007748:	1fff7a18 	.word	0x1fff7a18
 800774c:	200000fe 	.word	0x200000fe
 8007750:	2000010e 	.word	0x2000010e

08007754 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	e027      	b.n	80077bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0f1b      	lsrs	r3, r3, #28
 8007770:	2b09      	cmp	r3, #9
 8007772:	d80b      	bhi.n	800778c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	0f1b      	lsrs	r3, r3, #28
 8007778:	b2da      	uxtb	r2, r3
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4619      	mov	r1, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	440b      	add	r3, r1
 8007784:	3230      	adds	r2, #48	; 0x30
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	e00a      	b.n	80077a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	0f1b      	lsrs	r3, r3, #28
 8007790:	b2da      	uxtb	r2, r3
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4619      	mov	r1, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	440b      	add	r3, r1
 800779c:	3237      	adds	r2, #55	; 0x37
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	3301      	adds	r3, #1
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	3301      	adds	r3, #1
 80077ba:	75fb      	strb	r3, [r7, #23]
 80077bc:	7dfa      	ldrb	r2, [r7, #23]
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d3d3      	bcc.n	800776c <IntToUnicode+0x18>
  }
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b0a0      	sub	sp, #128	; 0x80
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	605a      	str	r2, [r3, #4]
 80077e6:	609a      	str	r2, [r3, #8]
 80077e8:	60da      	str	r2, [r3, #12]
 80077ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80077ec:	f107 0310 	add.w	r3, r7, #16
 80077f0:	225c      	movs	r2, #92	; 0x5c
 80077f2:	2100      	movs	r1, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fb77 	bl	8007ee8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007802:	d149      	bne.n	8007898 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007808:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800780a:	2300      	movs	r3, #0
 800780c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800780e:	f107 0310 	add.w	r3, r7, #16
 8007812:	4618      	mov	r0, r3
 8007814:	f7fb fa3a 	bl	8002c8c <HAL_RCCEx_PeriphCLKConfig>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800781e:	f7f9 f829 	bl	8000874 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	4b1e      	ldr	r3, [pc, #120]	; (80078a0 <HAL_PCD_MspInit+0xcc>)
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	4a1d      	ldr	r2, [pc, #116]	; (80078a0 <HAL_PCD_MspInit+0xcc>)
 800782c:	f043 0301 	orr.w	r3, r3, #1
 8007830:	6313      	str	r3, [r2, #48]	; 0x30
 8007832:	4b1b      	ldr	r3, [pc, #108]	; (80078a0 <HAL_PCD_MspInit+0xcc>)
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800783e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007842:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007844:	2302      	movs	r3, #2
 8007846:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007848:	2300      	movs	r3, #0
 800784a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800784c:	2303      	movs	r3, #3
 800784e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007850:	230a      	movs	r3, #10
 8007852:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007854:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007858:	4619      	mov	r1, r3
 800785a:	4812      	ldr	r0, [pc, #72]	; (80078a4 <HAL_PCD_MspInit+0xd0>)
 800785c:	f7f9 fb40 	bl	8000ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <HAL_PCD_MspInit+0xcc>)
 8007862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007864:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <HAL_PCD_MspInit+0xcc>)
 8007866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786a:	6353      	str	r3, [r2, #52]	; 0x34
 800786c:	2300      	movs	r3, #0
 800786e:	60bb      	str	r3, [r7, #8]
 8007870:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <HAL_PCD_MspInit+0xcc>)
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	4a0a      	ldr	r2, [pc, #40]	; (80078a0 <HAL_PCD_MspInit+0xcc>)
 8007876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800787a:	6453      	str	r3, [r2, #68]	; 0x44
 800787c:	4b08      	ldr	r3, [pc, #32]	; (80078a0 <HAL_PCD_MspInit+0xcc>)
 800787e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007888:	2200      	movs	r2, #0
 800788a:	2100      	movs	r1, #0
 800788c:	2043      	movs	r0, #67	; 0x43
 800788e:	f7f9 fad4 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007892:	2043      	movs	r0, #67	; 0x43
 8007894:	f7f9 faed 	bl	8000e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007898:	bf00      	nop
 800789a:	3780      	adds	r7, #128	; 0x80
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40023800 	.word	0x40023800
 80078a4:	40020000 	.word	0x40020000

080078a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f7fe fbf3 	bl	80060aa <USBD_LL_SetupStage>
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80078de:	78fa      	ldrb	r2, [r7, #3]
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	4613      	mov	r3, r2
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	4619      	mov	r1, r3
 80078f6:	f7fe fc2d 	bl	8006154 <USBD_LL_DataOutStage>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007914:	78fa      	ldrb	r2, [r7, #3]
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	4613      	mov	r3, r2
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	334c      	adds	r3, #76	; 0x4c
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	78fb      	ldrb	r3, [r7, #3]
 8007928:	4619      	mov	r1, r3
 800792a:	f7fe fcc6 	bl	80062ba <USBD_LL_DataInStage>
}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b082      	sub	sp, #8
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe fdfa 	bl	800653e <USBD_LL_SOF>
}
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800795a:	2301      	movs	r3, #1
 800795c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d102      	bne.n	800796c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
 800796a:	e008      	b.n	800797e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d102      	bne.n	800797a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007974:	2301      	movs	r3, #1
 8007976:	73fb      	strb	r3, [r7, #15]
 8007978:	e001      	b.n	800797e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800797a:	f7f8 ff7b 	bl	8000874 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007984:	7bfa      	ldrb	r2, [r7, #15]
 8007986:	4611      	mov	r1, r2
 8007988:	4618      	mov	r0, r3
 800798a:	f7fe fd9a 	bl	80064c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe fd42 	bl	800641e <USBD_LL_Reset>
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fd95 	bl	80064e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079d8:	4b04      	ldr	r3, [pc, #16]	; (80079ec <HAL_PCD_SuspendCallback+0x48>)
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	4a03      	ldr	r2, [pc, #12]	; (80079ec <HAL_PCD_SuspendCallback+0x48>)
 80079de:	f043 0306 	orr.w	r3, r3, #6
 80079e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	e000ed00 	.word	0xe000ed00

080079f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fd85 	bl	800650e <USBD_LL_Resume>
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fddd 	bl	80065e2 <USBD_LL_IsoOUTIncomplete>
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a42:	78fa      	ldrb	r2, [r7, #3]
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fd99 	bl	800657e <USBD_LL_IsoINIncomplete>
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fdef 	bl	8006646 <USBD_LL_DevConnected>
}
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fdec 	bl	800665c <USBD_LL_DevDisconnected>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d13c      	bne.n	8007b16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a9c:	4a20      	ldr	r2, [pc, #128]	; (8007b20 <USBD_LL_Init+0x94>)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <USBD_LL_Init+0x94>)
 8007aa8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007aac:	4b1c      	ldr	r3, [pc, #112]	; (8007b20 <USBD_LL_Init+0x94>)
 8007aae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007ab4:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ab6:	2206      	movs	r2, #6
 8007ab8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007aba:	4b19      	ldr	r3, [pc, #100]	; (8007b20 <USBD_LL_Init+0x94>)
 8007abc:	2202      	movs	r2, #2
 8007abe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ac0:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ac6:	4b16      	ldr	r3, [pc, #88]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ac8:	2202      	movs	r2, #2
 8007aca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007acc:	4b14      	ldr	r3, [pc, #80]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ad2:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ad8:	4b11      	ldr	r3, [pc, #68]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ade:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ae4:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007aea:	480d      	ldr	r0, [pc, #52]	; (8007b20 <USBD_LL_Init+0x94>)
 8007aec:	f7f9 fd02 	bl	80014f4 <HAL_PCD_Init>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007af6:	f7f8 febd 	bl	8000874 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007afa:	2180      	movs	r1, #128	; 0x80
 8007afc:	4808      	ldr	r0, [pc, #32]	; (8007b20 <USBD_LL_Init+0x94>)
 8007afe:	f7fa ff76 	bl	80029ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b02:	2240      	movs	r2, #64	; 0x40
 8007b04:	2100      	movs	r1, #0
 8007b06:	4806      	ldr	r0, [pc, #24]	; (8007b20 <USBD_LL_Init+0x94>)
 8007b08:	f7fa ff2a 	bl	8002960 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b0c:	2280      	movs	r2, #128	; 0x80
 8007b0e:	2101      	movs	r1, #1
 8007b10:	4803      	ldr	r0, [pc, #12]	; (8007b20 <USBD_LL_Init+0x94>)
 8007b12:	f7fa ff25 	bl	8002960 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	200006bc 	.word	0x200006bc

08007b24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7f9 fdfe 	bl	800173c <HAL_PCD_Start>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f97e 	bl	8007e48 <USBD_Get_USB_Status>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	4608      	mov	r0, r1
 8007b64:	4611      	mov	r1, r2
 8007b66:	461a      	mov	r2, r3
 8007b68:	4603      	mov	r3, r0
 8007b6a:	70fb      	strb	r3, [r7, #3]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70bb      	strb	r3, [r7, #2]
 8007b70:	4613      	mov	r3, r2
 8007b72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b82:	78bb      	ldrb	r3, [r7, #2]
 8007b84:	883a      	ldrh	r2, [r7, #0]
 8007b86:	78f9      	ldrb	r1, [r7, #3]
 8007b88:	f7fa fafc 	bl	8002184 <HAL_PCD_EP_Open>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 f958 	bl	8007e48 <USBD_Get_USB_Status>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fa fb45 	bl	8002254 <HAL_PCD_EP_Close>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f939 	bl	8007e48 <USBD_Get_USB_Status>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bfe:	78fa      	ldrb	r2, [r7, #3]
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fa fc05 	bl	8002412 <HAL_PCD_EP_SetStall>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f91a 	bl	8007e48 <USBD_Get_USB_Status>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fa fc4a 	bl	80024da <HAL_PCD_EP_ClrStall>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 f8fb 	bl	8007e48 <USBD_Get_USB_Status>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da0b      	bge.n	8007c94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c82:	68f9      	ldr	r1, [r7, #12]
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	333e      	adds	r3, #62	; 0x3e
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	e00b      	b.n	8007cac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c9a:	68f9      	ldr	r1, [r7, #12]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	440b      	add	r3, r1
 8007ca6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007caa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fa fa2f 	bl	800213a <HAL_PCD_SetAddress>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f8b0 	bl	8007e48 <USBD_Get_USB_Status>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	460b      	mov	r3, r1
 8007d04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d14:	7af9      	ldrb	r1, [r7, #11]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	f7fa fb30 	bl	800237e <HAL_PCD_EP_Transmit>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 f88f 	bl	8007e48 <USBD_Get_USB_Status>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	460b      	mov	r3, r1
 8007d46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d56:	7af9      	ldrb	r1, [r7, #11]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	f7fa fac4 	bl	80022e8 <HAL_PCD_EP_Receive>
 8007d60:	4603      	mov	r3, r0
 8007d62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 f86e 	bl	8007e48 <USBD_Get_USB_Status>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d70:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <HAL_PCDEx_LPM_Callback+0x18>
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d01f      	beq.n	8007dd2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007d92:	e03b      	b.n	8007e0c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007d9c:	f7f8 fbfc 	bl	8000598 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007da0:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <HAL_PCDEx_LPM_Callback+0x98>)
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	4a1b      	ldr	r2, [pc, #108]	; (8007e14 <HAL_PCDEx_LPM_Callback+0x98>)
 8007da6:	f023 0306 	bic.w	r3, r3, #6
 8007daa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dbe:	f023 0301 	bic.w	r3, r3, #1
 8007dc2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fb9f 	bl	800650e <USBD_LL_Resume>
    break;
 8007dd0:	e01c      	b.n	8007e0c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007de4:	f043 0301 	orr.w	r3, r3, #1
 8007de8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fb76 	bl	80064e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	4a04      	ldr	r2, [pc, #16]	; (8007e14 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e04:	f043 0306 	orr.w	r3, r3, #6
 8007e08:	6113      	str	r3, [r2, #16]
    break;
 8007e0a:	bf00      	nop
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	e000ed00 	.word	0xe000ed00

08007e18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e20:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <USBD_static_malloc+0x18>)
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000bc8 	.word	0x20000bc8

08007e34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]

}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d817      	bhi.n	8007e8c <USBD_Get_USB_Status+0x44>
 8007e5c:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <USBD_Get_USB_Status+0x1c>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	08007e7b 	.word	0x08007e7b
 8007e6c:	08007e81 	.word	0x08007e81
 8007e70:	08007e87 	.word	0x08007e87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
    break;
 8007e78:	e00b      	b.n	8007e92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e7e:	e008      	b.n	8007e92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e80:	2301      	movs	r3, #1
 8007e82:	73fb      	strb	r3, [r7, #15]
    break;
 8007e84:	e005      	b.n	8007e92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e86:	2303      	movs	r3, #3
 8007e88:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8a:	e002      	b.n	8007e92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e90:	bf00      	nop
  }
  return usb_status;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <__libc_init_array>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	4d0d      	ldr	r5, [pc, #52]	; (8007ed8 <__libc_init_array+0x38>)
 8007ea4:	4c0d      	ldr	r4, [pc, #52]	; (8007edc <__libc_init_array+0x3c>)
 8007ea6:	1b64      	subs	r4, r4, r5
 8007ea8:	10a4      	asrs	r4, r4, #2
 8007eaa:	2600      	movs	r6, #0
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	d109      	bne.n	8007ec4 <__libc_init_array+0x24>
 8007eb0:	4d0b      	ldr	r5, [pc, #44]	; (8007ee0 <__libc_init_array+0x40>)
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ee4 <__libc_init_array+0x44>)
 8007eb4:	f000 f820 	bl	8007ef8 <_init>
 8007eb8:	1b64      	subs	r4, r4, r5
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	42a6      	cmp	r6, r4
 8007ec0:	d105      	bne.n	8007ece <__libc_init_array+0x2e>
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec8:	4798      	blx	r3
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7ee      	b.n	8007eac <__libc_init_array+0xc>
 8007ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed2:	4798      	blx	r3
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	e7f2      	b.n	8007ebe <__libc_init_array+0x1e>
 8007ed8:	08007f6c 	.word	0x08007f6c
 8007edc:	08007f6c 	.word	0x08007f6c
 8007ee0:	08007f6c 	.word	0x08007f6c
 8007ee4:	08007f70 	.word	0x08007f70

08007ee8 <memset>:
 8007ee8:	4402      	add	r2, r0
 8007eea:	4603      	mov	r3, r0
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d100      	bne.n	8007ef2 <memset+0xa>
 8007ef0:	4770      	bx	lr
 8007ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef6:	e7f9      	b.n	8007eec <memset+0x4>

08007ef8 <_init>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	bf00      	nop
 8007efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efe:	bc08      	pop	{r3}
 8007f00:	469e      	mov	lr, r3
 8007f02:	4770      	bx	lr

08007f04 <_fini>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr
