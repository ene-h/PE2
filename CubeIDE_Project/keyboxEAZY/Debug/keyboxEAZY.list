
keyboxEAZY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008edc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  080090a0  080090a0  000190a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009880  08009880  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009880  08009880  00019880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009888  08009888  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009888  08009888  00019888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ecc  200000fc  0800998c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc8  0800998c  00020fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016977  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ff  00000000  00000000  00036aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00039fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  0003b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025039  00000000  00000000  0003c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001864f  00000000  00000000  00061219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfdaf  00000000  00000000  00079868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c8  00000000  00000000  00149668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000fc 	.word	0x200000fc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009088 	.word	0x08009088

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000100 	.word	0x20000100
 8000200:	08009088 	.word	0x08009088

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fddd 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f865 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f93b 	bl	8000790 <MX_GPIO_Init>
  MX_I2C3_Init();
 800051a:	f000 f8e1 	bl	80006e0 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 800051e:	f000 f90d 	bl	800073c <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8000522:	f008 f8e9 	bl	80086f8 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000526:	f000 f8c7 	bl	80006b8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800052a:	f006 f8bb 	bl	80066a4 <ssd1306_Init>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	2108      	movs	r1, #8
 8000532:	4824      	ldr	r0, [pc, #144]	; (80005c4 <main+0xbc>)
 8000534:	f001 f93a 	bl	80017ac <HAL_GPIO_WritePin>
  //ssd1306_Fill(White);
  ssd1306_SetCursor(0, 0);
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f006 fa68 	bl	8006a10 <ssd1306_SetCursor>
  ssd1306_WriteString("Hello World!", Font_7x10, White);
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <main+0xc0>)
 8000542:	2201      	movs	r2, #1
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000548:	4820      	ldr	r0, [pc, #128]	; (80005cc <main+0xc4>)
 800054a:	f006 fa3b 	bl	80069c4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800054e:	f006 f92b 	bl	80067a8 <ssd1306_UpdateScreen>
  HAL_Delay(600);
 8000552:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000556:	f000 fe2b 	bl	80011b0 <HAL_Delay>
  ssd1306_Fill(Black);
 800055a:	2000      	movs	r0, #0
 800055c:	f006 f90c 	bl	8006778 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000560:	f006 f922 	bl	80067a8 <ssd1306_UpdateScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  			GPIO_Poll((uint16_t*)&buttons_state);
 8000564:	481a      	ldr	r0, [pc, #104]	; (80005d0 <main+0xc8>)
 8000566:	f000 f9a9 	bl	80008bc <GPIO_Poll>
	  			DPAD_Poll(&dpad_state);
 800056a:	481a      	ldr	r0, [pc, #104]	; (80005d4 <main+0xcc>)
 800056c:	f000 fa94 	bl	8000a98 <DPAD_Poll>
	  			for (uint8_t i=0; i<AXIS_NUM; i++)
	  				report_data[i] = FilterWindow(filter_buf[i], ADC_data[i]);
#endif

#if (BUTTONS_ENABLED == 1)
				report_data[2 * AXIS_NUM] = buttons_state[0];
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <main+0xc8>)
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <main+0xd0>)
 8000576:	701a      	strb	r2, [r3, #0]
				report_data[2 * AXIS_NUM + 1] = buttons_state[1];
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <main+0xc8>)
 800057a:	785a      	ldrb	r2, [r3, #1]
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <main+0xd0>)
 800057e:	705a      	strb	r2, [r3, #1]
#endif
#if (DPAD_ENABLED == 1)
				report_data[2 * AXIS_NUM + 2 * BUTTONS_ENABLED] = dpad_state;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0xcc>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <main+0xd0>)
 8000586:	709a      	strb	r2, [r3, #2]

#endif
	  			uint8_t errrr = USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &report_data, (2 * AXIS_NUM + 2 * BUTTONS_ENABLED + 1)*sizeof(uint8_t));
 8000588:	2203      	movs	r2, #3
 800058a:	4913      	ldr	r1, [pc, #76]	; (80005d8 <main+0xd0>)
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <main+0xd4>)
 800058e:	f006 fd39 	bl	8007004 <USBD_HID_SendReport>
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	  			if (errrr == 3) {
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d109      	bne.n	80005b0 <main+0xa8>
	  				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2108      	movs	r1, #8
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <main+0xbc>)
 80005a2:	f001 f903 	bl	80017ac <HAL_GPIO_WritePin>
	  				HAL_Delay(500);
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f000 fe01 	bl	80011b0 <HAL_Delay>
 80005ae:	e004      	b.n	80005ba <main+0xb2>
				} else {
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2108      	movs	r1, #8
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <main+0xbc>)
 80005b6:	f001 f8f9 	bl	80017ac <HAL_GPIO_WritePin>
				}

	  			DrawAll(buttons_state, &dpad_state);
 80005ba:	4906      	ldr	r1, [pc, #24]	; (80005d4 <main+0xcc>)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <main+0xc8>)
 80005be:	f000 faf9 	bl	8000bb4 <DrawAll>
  {
 80005c2:	e7cf      	b.n	8000564 <main+0x5c>
 80005c4:	40020000 	.word	0x40020000
 80005c8:	08009874 	.word	0x08009874
 80005cc:	080090a0 	.word	0x080090a0
 80005d0:	200001bc 	.word	0x200001bc
 80005d4:	200001be 	.word	0x200001be
 80005d8:	200001b8 	.word	0x200001b8
 80005dc:	200005cc 	.word	0x200005cc

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f008 fd42 	bl	8009078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <SystemClock_Config+0xd0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <SystemClock_Config+0xd4>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000654:	2390      	movs	r3, #144	; 0x90
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800065c:	2306      	movs	r3, #6
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fe39 	bl	80042e0 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 fbb8 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f002 ffae 	bl	80035f8 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 fba1 	bl	8000de8 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_CRC_Init+0x20>)
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <MX_CRC_Init+0x24>)
 80006c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_CRC_Init+0x20>)
 80006c4:	f000 fea9 	bl	800141a <HAL_CRC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ce:	f000 fb8b 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000118 	.word	0x20000118
 80006dc:	40023000 	.word	0x40023000

080006e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C3_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_I2C3_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 1500000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C3_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_I2C3_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C3_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C3_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C3_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C3_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2C3_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_I2C3_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2C3_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C3_Init+0x50>)
 800071e:	f001 f85f 	bl	80017e0 <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 fb5e 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000120 	.word	0x20000120
 8000734:	40005c00 	.word	0x40005c00
 8000738:	0016e360 	.word	0x0016e360

0800073c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART6_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000774:	f004 f852 	bl	800481c <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 fb33 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000174 	.word	0x20000174
 800078c:	40011400 	.word	0x40011400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b40      	ldr	r3, [pc, #256]	; (80008ac <MX_GPIO_Init+0x11c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a3f      	ldr	r2, [pc, #252]	; (80008ac <MX_GPIO_Init+0x11c>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <MX_GPIO_Init+0x11c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b39      	ldr	r3, [pc, #228]	; (80008ac <MX_GPIO_Init+0x11c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a38      	ldr	r2, [pc, #224]	; (80008ac <MX_GPIO_Init+0x11c>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <MX_GPIO_Init+0x11c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b32      	ldr	r3, [pc, #200]	; (80008ac <MX_GPIO_Init+0x11c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a31      	ldr	r2, [pc, #196]	; (80008ac <MX_GPIO_Init+0x11c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <MX_GPIO_Init+0x11c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <MX_GPIO_Init+0x11c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <MX_GPIO_Init+0x11c>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <MX_GPIO_Init+0x11c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4825      	ldr	r0, [pc, #148]	; (80008b0 <MX_GPIO_Init+0x120>)
 800081c:	f000 ffc6 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEFT_Pin DOWN_Pin RIGHT_Pin UP_Pin
                           HK_Pin HP_Pin OPT6_Pin OPT5_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|DOWN_Pin|RIGHT_Pin|UP_Pin
 8000820:	f641 033f 	movw	r3, #6207	; 0x183f
 8000824:	617b      	str	r3, [r7, #20]
                          |HK_Pin|HP_Pin|OPT6_Pin|OPT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	481f      	ldr	r0, [pc, #124]	; (80008b4 <MX_GPIO_Init+0x124>)
 8000836:	f000 fe0d 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4817      	ldr	r0, [pc, #92]	; (80008b0 <MX_GPIO_Init+0x120>)
 8000852:	f000 fdff 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : LK_Pin LP_Pin MK_Pin MP_Pin */
  GPIO_InitStruct.Pin = LK_Pin|LP_Pin|MK_Pin|MP_Pin;
 8000856:	23f0      	movs	r3, #240	; 0xf0
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085e:	2301      	movs	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_GPIO_Init+0x120>)
 800086a:	f000 fdf3 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXK_Pin EXP_Pin OPT4_Pin OPT3_Pin
                           OPT2_Pin OPT1_Pin */
  GPIO_InitStruct.Pin = EXK_Pin|EXP_Pin|OPT4_Pin|OPT3_Pin
 800086e:	f240 13e3 	movw	r3, #483	; 0x1e3
 8000872:	617b      	str	r3, [r7, #20]
                          |OPT2_Pin|OPT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_GPIO_Init+0x128>)
 8000884:	f000 fde6 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x128>)
 800089e:	f000 fdd9 	bl	8001454 <HAL_GPIO_Init>

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020400 	.word	0x40020400

080008bc <GPIO_Poll>:

/* USER CODE BEGIN 4 */
void GPIO_Poll (uint16_t * p_button_state)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	*p_button_state = 0;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(LP_GPIO_Port, LP_Pin);
 80008ca:	2120      	movs	r1, #32
 80008cc:	486f      	ldr	r0, [pc, #444]	; (8000a8c <GPIO_Poll+0x1d0>)
 80008ce:	f000 ff55 	bl	800177c <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4619      	mov	r1, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	b28b      	uxth	r3, r1
 80008dc:	4313      	orrs	r3, r2
 80008de:	b29a      	uxth	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(MP_GPIO_Port, MP_Pin) << 1;
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	4869      	ldr	r0, [pc, #420]	; (8000a8c <GPIO_Poll+0x1d0>)
 80008e8:	f000 ff48 	bl	800177c <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	0059      	lsls	r1, r3, #1
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	b21a      	sxth	r2, r3
 80008f6:	b20b      	sxth	r3, r1
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(HP_GPIO_Port, HP_Pin) << 2;
 8000902:	2120      	movs	r1, #32
 8000904:	4862      	ldr	r0, [pc, #392]	; (8000a90 <GPIO_Poll+0x1d4>)
 8000906:	f000 ff39 	bl	800177c <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	0099      	lsls	r1, r3, #2
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	b21a      	sxth	r2, r3
 8000914:	b20b      	sxth	r3, r1
 8000916:	4313      	orrs	r3, r2
 8000918:	b21b      	sxth	r3, r3
 800091a:	b29a      	uxth	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(EXP_GPIO_Port, EXP_Pin) << 3;
 8000920:	2102      	movs	r1, #2
 8000922:	485c      	ldr	r0, [pc, #368]	; (8000a94 <GPIO_Poll+0x1d8>)
 8000924:	f000 ff2a 	bl	800177c <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	00d9      	lsls	r1, r3, #3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	b21a      	sxth	r2, r3
 8000932:	b20b      	sxth	r3, r1
 8000934:	4313      	orrs	r3, r2
 8000936:	b21b      	sxth	r3, r3
 8000938:	b29a      	uxth	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(LK_GPIO_Port, LK_Pin) << 4;
 800093e:	2110      	movs	r1, #16
 8000940:	4852      	ldr	r0, [pc, #328]	; (8000a8c <GPIO_Poll+0x1d0>)
 8000942:	f000 ff1b 	bl	800177c <HAL_GPIO_ReadPin>
 8000946:	4603      	mov	r3, r0
 8000948:	0119      	lsls	r1, r3, #4
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b21a      	sxth	r2, r3
 8000950:	b20b      	sxth	r3, r1
 8000952:	4313      	orrs	r3, r2
 8000954:	b21b      	sxth	r3, r3
 8000956:	b29a      	uxth	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(MK_GPIO_Port, MK_Pin) << 5;
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	484b      	ldr	r0, [pc, #300]	; (8000a8c <GPIO_Poll+0x1d0>)
 8000960:	f000 ff0c 	bl	800177c <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	0159      	lsls	r1, r3, #5
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	b21a      	sxth	r2, r3
 800096e:	b20b      	sxth	r3, r1
 8000970:	4313      	orrs	r3, r2
 8000972:	b21b      	sxth	r3, r3
 8000974:	b29a      	uxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(HK_GPIO_Port, HK_Pin) << 6;
 800097a:	2110      	movs	r1, #16
 800097c:	4844      	ldr	r0, [pc, #272]	; (8000a90 <GPIO_Poll+0x1d4>)
 800097e:	f000 fefd 	bl	800177c <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	0199      	lsls	r1, r3, #6
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b21a      	sxth	r2, r3
 800098c:	b20b      	sxth	r3, r1
 800098e:	4313      	orrs	r3, r2
 8000990:	b21b      	sxth	r3, r3
 8000992:	b29a      	uxth	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(EXK_GPIO_Port, EXK_Pin) << 7;
 8000998:	2101      	movs	r1, #1
 800099a:	483e      	ldr	r0, [pc, #248]	; (8000a94 <GPIO_Poll+0x1d8>)
 800099c:	f000 feee 	bl	800177c <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	01d9      	lsls	r1, r3, #7
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	b20b      	sxth	r3, r1
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(OPT1_GPIO_Port, OPT1_Pin) << 8;
 80009b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ba:	4836      	ldr	r0, [pc, #216]	; (8000a94 <GPIO_Poll+0x1d8>)
 80009bc:	f000 fede 	bl	800177c <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	0219      	lsls	r1, r3, #8
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	b20b      	sxth	r3, r1
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(OPT2_GPIO_Port, OPT2_Pin) << 9;
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	482e      	ldr	r0, [pc, #184]	; (8000a94 <GPIO_Poll+0x1d8>)
 80009da:	f000 fecf 	bl	800177c <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	0259      	lsls	r1, r3, #9
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	b20b      	sxth	r3, r1
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(OPT3_GPIO_Port, OPT3_Pin) << 10;
 80009f4:	2140      	movs	r1, #64	; 0x40
 80009f6:	4827      	ldr	r0, [pc, #156]	; (8000a94 <GPIO_Poll+0x1d8>)
 80009f8:	f000 fec0 	bl	800177c <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	0299      	lsls	r1, r3, #10
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	b20b      	sxth	r3, r1
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(OPT4_GPIO_Port, OPT4_Pin) << 11;
 8000a12:	2120      	movs	r1, #32
 8000a14:	481f      	ldr	r0, [pc, #124]	; (8000a94 <GPIO_Poll+0x1d8>)
 8000a16:	f000 feb1 	bl	800177c <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	02d9      	lsls	r1, r3, #11
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	b20b      	sxth	r3, r1
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(OPT5_GPIO_Port, OPT5_Pin) << 12;
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <GPIO_Poll+0x1d4>)
 8000a36:	f000 fea1 	bl	800177c <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	0319      	lsls	r1, r3, #12
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	b20b      	sxth	r3, r1
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	801a      	strh	r2, [r3, #0]
	*p_button_state |= HAL_GPIO_ReadPin(OPT6_GPIO_Port, OPT6_Pin) << 13;
 8000a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a54:	480e      	ldr	r0, [pc, #56]	; (8000a90 <GPIO_Poll+0x1d4>)
 8000a56:	f000 fe91 	bl	800177c <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	0359      	lsls	r1, r3, #13
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	b20b      	sxth	r3, r1
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	801a      	strh	r2, [r3, #0]
	*p_button_state ^= 0x3FFF;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	f483 537f 	eor.w	r3, r3, #16320	; 0x3fc0
 8000a78:	f083 033f 	eor.w	r3, r3, #63	; 0x3f
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	801a      	strh	r2, [r3, #0]
	return;
 8000a82:	bf00      	nop
}
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020400 	.word	0x40020400

08000a98 <DPAD_Poll>:
void DPAD_Poll (uint8_t * p_dpad_state)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	*p_dpad_state 	= DPAD_NONE;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	701a      	strb	r2, [r3, #0]
	uint8_t dpad_LR	= DPAD_NONE;
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	73fb      	strb	r3, [r7, #15]
	uint8_t dpad_UD	= DPAD_NONE;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	73bb      	strb	r3, [r7, #14]
	uint8_t up 		= !(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin));
 8000aae:	2108      	movs	r1, #8
 8000ab0:	483f      	ldr	r0, [pc, #252]	; (8000bb0 <DPAD_Poll+0x118>)
 8000ab2:	f000 fe63 	bl	800177c <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf0c      	ite	eq
 8000abc:	2301      	moveq	r3, #1
 8000abe:	2300      	movne	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	737b      	strb	r3, [r7, #13]
	uint8_t right 	= !(HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin));
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	483a      	ldr	r0, [pc, #232]	; (8000bb0 <DPAD_Poll+0x118>)
 8000ac8:	f000 fe58 	bl	800177c <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2301      	moveq	r3, #1
 8000ad4:	2300      	movne	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	733b      	strb	r3, [r7, #12]
	uint8_t down 	= !(HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin));
 8000ada:	2102      	movs	r1, #2
 8000adc:	4834      	ldr	r0, [pc, #208]	; (8000bb0 <DPAD_Poll+0x118>)
 8000ade:	f000 fe4d 	bl	800177c <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	72fb      	strb	r3, [r7, #11]
	uint8_t left 	= !(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin));
 8000af0:	2101      	movs	r1, #1
 8000af2:	482f      	ldr	r0, [pc, #188]	; (8000bb0 <DPAD_Poll+0x118>)
 8000af4:	f000 fe42 	bl	800177c <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf0c      	ite	eq
 8000afe:	2301      	moveq	r3, #1
 8000b00:	2300      	movne	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	72bb      	strb	r3, [r7, #10]

	//SOCD Cleaning

	if (down && (!up)) {
 8000b06:	7afb      	ldrb	r3, [r7, #11]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d004      	beq.n	8000b16 <DPAD_Poll+0x7e>
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <DPAD_Poll+0x7e>
		dpad_UD	= DPAD_DOWN;
 8000b12:	2304      	movs	r3, #4
 8000b14:	73bb      	strb	r3, [r7, #14]
	}

	if (up) {
 8000b16:	7b7b      	ldrb	r3, [r7, #13]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <DPAD_Poll+0x88>
		dpad_UD	= DPAD_UP;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73bb      	strb	r3, [r7, #14]
	}

	if (left && right) {
 8000b20:	7abb      	ldrb	r3, [r7, #10]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d005      	beq.n	8000b32 <DPAD_Poll+0x9a>
 8000b26:	7b3b      	ldrb	r3, [r7, #12]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <DPAD_Poll+0x9a>
		dpad_LR = DPAD_NONE;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	e010      	b.n	8000b54 <DPAD_Poll+0xbc>
	} else if (left && (!right)) {
 8000b32:	7abb      	ldrb	r3, [r7, #10]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <DPAD_Poll+0xac>
 8000b38:	7b3b      	ldrb	r3, [r7, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <DPAD_Poll+0xac>
		dpad_LR = DPAD_LEFT;
 8000b3e:	2306      	movs	r3, #6
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e007      	b.n	8000b54 <DPAD_Poll+0xbc>
	} else if ((!left) && right) {
 8000b44:	7abb      	ldrb	r3, [r7, #10]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d104      	bne.n	8000b54 <DPAD_Poll+0xbc>
 8000b4a:	7b3b      	ldrb	r3, [r7, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <DPAD_Poll+0xbc>
		dpad_LR = DPAD_RIGHT;
 8000b50:	2302      	movs	r3, #2
 8000b52:	73fb      	strb	r3, [r7, #15]
	}

	if (dpad_LR != DPAD_NONE) {
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b0f      	cmp	r3, #15
 8000b58:	d01f      	beq.n	8000b9a <DPAD_Poll+0x102>
		if (dpad_UD == DPAD_NONE) {
 8000b5a:	7bbb      	ldrb	r3, [r7, #14]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d103      	bne.n	8000b68 <DPAD_Poll+0xd0>
			*p_dpad_state = dpad_LR;	//cardinal LR
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	7bfa      	ldrb	r2, [r7, #15]
 8000b64:	701a      	strb	r2, [r3, #0]
		}
	} else if (dpad_UD != DPAD_NONE) {
		*p_dpad_state = dpad_UD;		//cardinal UD
	}

	return;
 8000b66:	e01f      	b.n	8000ba8 <DPAD_Poll+0x110>
			if(dpad_UD == DPAD_UP) {
 8000b68:	7bbb      	ldrb	r3, [r7, #14]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10a      	bne.n	8000b84 <DPAD_Poll+0xec>
				if (dpad_LR == DPAD_RIGHT) {
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d103      	bne.n	8000b7c <DPAD_Poll+0xe4>
					*p_dpad_state = DPAD_UPRIGHT;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
	return;
 8000b7a:	e015      	b.n	8000ba8 <DPAD_Poll+0x110>
					*p_dpad_state = DPAD_UPLEFT;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2207      	movs	r2, #7
 8000b80:	701a      	strb	r2, [r3, #0]
	return;
 8000b82:	e011      	b.n	8000ba8 <DPAD_Poll+0x110>
				if (dpad_LR == DPAD_RIGHT) {
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d103      	bne.n	8000b92 <DPAD_Poll+0xfa>
					*p_dpad_state = DPAD_DOWNRIGHT;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	701a      	strb	r2, [r3, #0]
	return;
 8000b90:	e00a      	b.n	8000ba8 <DPAD_Poll+0x110>
					*p_dpad_state = DPAD_DOWNLEFT;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2205      	movs	r2, #5
 8000b96:	701a      	strb	r2, [r3, #0]
	return;
 8000b98:	e006      	b.n	8000ba8 <DPAD_Poll+0x110>
	} else if (dpad_UD != DPAD_NONE) {
 8000b9a:	7bbb      	ldrb	r3, [r7, #14]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d003      	beq.n	8000ba8 <DPAD_Poll+0x110>
		*p_dpad_state = dpad_UD;		//cardinal UD
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7bba      	ldrb	r2, [r7, #14]
 8000ba4:	701a      	strb	r2, [r3, #0]
	return;
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
}
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <DrawAll>:
void DrawAll(uint8_t* button_state,uint8_t* dpad_state) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	ssd1306_Fill(Black);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f005 fdda 	bl	8006778 <ssd1306_Fill>
	Draw_Buttons(button_state);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f809 	bl	8000bdc <Draw_Buttons>
	Draw_DPAD(dpad_state);
 8000bca:	6838      	ldr	r0, [r7, #0]
 8000bcc:	f000 f882 	bl	8000cd4 <Draw_DPAD>
	ssd1306_UpdateScreen();
 8000bd0:	f005 fdea 	bl	80067a8 <ssd1306_UpdateScreen>
	return;
 8000bd4:	bf00      	nop
}
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <Draw_Buttons>:

void Draw_Buttons(uint8_t* button_state) {
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	((*button_state & (0x1 << 0)) ? ssd1306_FillCircle : ssd1306_DrawCircle)(66, 16, 7, White); //LP
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <Draw_Buttons+0x18>
 8000bf0:	4c36      	ldr	r4, [pc, #216]	; (8000ccc <Draw_Buttons+0xf0>)
 8000bf2:	e000      	b.n	8000bf6 <Draw_Buttons+0x1a>
 8000bf4:	4c36      	ldr	r4, [pc, #216]	; (8000cd0 <Draw_Buttons+0xf4>)
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	2042      	movs	r0, #66	; 0x42
 8000bfe:	47a0      	blx	r4
	((*button_state & (0x1 << 1)) ? ssd1306_FillCircle : ssd1306_DrawCircle)(82, 10, 7, White); //MP
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <Draw_Buttons+0x34>
 8000c0c:	4c2f      	ldr	r4, [pc, #188]	; (8000ccc <Draw_Buttons+0xf0>)
 8000c0e:	e000      	b.n	8000c12 <Draw_Buttons+0x36>
 8000c10:	4c2f      	ldr	r4, [pc, #188]	; (8000cd0 <Draw_Buttons+0xf4>)
 8000c12:	2301      	movs	r3, #1
 8000c14:	2207      	movs	r2, #7
 8000c16:	210a      	movs	r1, #10
 8000c18:	2052      	movs	r0, #82	; 0x52
 8000c1a:	47a0      	blx	r4
	((*button_state & (0x1 << 2)) ? ssd1306_FillCircle : ssd1306_DrawCircle)(98, 10, 7, White); //HP
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <Draw_Buttons+0x50>
 8000c28:	4c28      	ldr	r4, [pc, #160]	; (8000ccc <Draw_Buttons+0xf0>)
 8000c2a:	e000      	b.n	8000c2e <Draw_Buttons+0x52>
 8000c2c:	4c28      	ldr	r4, [pc, #160]	; (8000cd0 <Draw_Buttons+0xf4>)
 8000c2e:	2301      	movs	r3, #1
 8000c30:	2207      	movs	r2, #7
 8000c32:	210a      	movs	r1, #10
 8000c34:	2062      	movs	r0, #98	; 0x62
 8000c36:	47a0      	blx	r4
	((*button_state & (0x1 << 3)) ? ssd1306_FillCircle : ssd1306_DrawCircle)(114, 10, 7, White); //EXP
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <Draw_Buttons+0x6c>
 8000c44:	4c21      	ldr	r4, [pc, #132]	; (8000ccc <Draw_Buttons+0xf0>)
 8000c46:	e000      	b.n	8000c4a <Draw_Buttons+0x6e>
 8000c48:	4c21      	ldr	r4, [pc, #132]	; (8000cd0 <Draw_Buttons+0xf4>)
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	210a      	movs	r1, #10
 8000c50:	2072      	movs	r0, #114	; 0x72
 8000c52:	47a0      	blx	r4
	((*button_state & (0x1 << 4)) ? ssd1306_FillCircle : ssd1306_DrawCircle)(63, 33, 7, White); //LK
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <Draw_Buttons+0x88>
 8000c60:	4c1a      	ldr	r4, [pc, #104]	; (8000ccc <Draw_Buttons+0xf0>)
 8000c62:	e000      	b.n	8000c66 <Draw_Buttons+0x8a>
 8000c64:	4c1a      	ldr	r4, [pc, #104]	; (8000cd0 <Draw_Buttons+0xf4>)
 8000c66:	2301      	movs	r3, #1
 8000c68:	2207      	movs	r2, #7
 8000c6a:	2121      	movs	r1, #33	; 0x21
 8000c6c:	203f      	movs	r0, #63	; 0x3f
 8000c6e:	47a0      	blx	r4
	((*button_state & (0x1 << 5)) ? ssd1306_FillCircle : ssd1306_DrawCircle)(79, 28, 7, White); //MK
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	f003 0320 	and.w	r3, r3, #32
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <Draw_Buttons+0xa4>
 8000c7c:	4c13      	ldr	r4, [pc, #76]	; (8000ccc <Draw_Buttons+0xf0>)
 8000c7e:	e000      	b.n	8000c82 <Draw_Buttons+0xa6>
 8000c80:	4c13      	ldr	r4, [pc, #76]	; (8000cd0 <Draw_Buttons+0xf4>)
 8000c82:	2301      	movs	r3, #1
 8000c84:	2207      	movs	r2, #7
 8000c86:	211c      	movs	r1, #28
 8000c88:	204f      	movs	r0, #79	; 0x4f
 8000c8a:	47a0      	blx	r4
	((*button_state & (0x1 << 6)) ? ssd1306_FillCircle : ssd1306_DrawCircle)(95, 28, 7, White); //HK
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <Draw_Buttons+0xc0>
 8000c98:	4c0c      	ldr	r4, [pc, #48]	; (8000ccc <Draw_Buttons+0xf0>)
 8000c9a:	e000      	b.n	8000c9e <Draw_Buttons+0xc2>
 8000c9c:	4c0c      	ldr	r4, [pc, #48]	; (8000cd0 <Draw_Buttons+0xf4>)
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	211c      	movs	r1, #28
 8000ca4:	205f      	movs	r0, #95	; 0x5f
 8000ca6:	47a0      	blx	r4
	((*button_state & (0x1 << 7)) ? ssd1306_FillCircle : ssd1306_DrawCircle)(111, 28, 7, White); //EXK
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	da01      	bge.n	8000cb6 <Draw_Buttons+0xda>
 8000cb2:	4c06      	ldr	r4, [pc, #24]	; (8000ccc <Draw_Buttons+0xf0>)
 8000cb4:	e000      	b.n	8000cb8 <Draw_Buttons+0xdc>
 8000cb6:	4c06      	ldr	r4, [pc, #24]	; (8000cd0 <Draw_Buttons+0xf4>)
 8000cb8:	2301      	movs	r3, #1
 8000cba:	2207      	movs	r2, #7
 8000cbc:	211c      	movs	r1, #28
 8000cbe:	206f      	movs	r0, #111	; 0x6f
 8000cc0:	47a0      	blx	r4


	return;
 8000cc2:	bf00      	nop
}
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	08006b4f 	.word	0x08006b4f
 8000cd0:	08006a41 	.word	0x08006a41

08000cd4 <Draw_DPAD>:
void Draw_DPAD(uint8_t* dpad_state) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	ssd1306_DrawCircle(56, 52, 9, White);
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2209      	movs	r2, #9
 8000ce0:	2134      	movs	r1, #52	; 0x34
 8000ce2:	2038      	movs	r0, #56	; 0x38
 8000ce4:	f005 feac 	bl	8006a40 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(17, 16, 7, White);
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2207      	movs	r2, #7
 8000cec:	2110      	movs	r1, #16
 8000cee:	2011      	movs	r0, #17
 8000cf0:	f005 fea6 	bl	8006a40 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(33, 16, 7, White);
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	2021      	movs	r0, #33	; 0x21
 8000cfc:	f005 fea0 	bl	8006a40 <ssd1306_DrawCircle>
	ssd1306_DrawCircle(48, 22, 7, White);
 8000d00:	2301      	movs	r3, #1
 8000d02:	2207      	movs	r2, #7
 8000d04:	2116      	movs	r1, #22
 8000d06:	2030      	movs	r0, #48	; 0x30
 8000d08:	f005 fe9a 	bl	8006a40 <ssd1306_DrawCircle>
	switch (*dpad_state) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b07      	cmp	r3, #7
 8000d12:	d863      	bhi.n	8000ddc <Draw_DPAD+0x108>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <Draw_DPAD+0x48>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d3d 	.word	0x08000d3d
 8000d20:	08000d4b 	.word	0x08000d4b
 8000d24:	08000d65 	.word	0x08000d65
 8000d28:	08000d73 	.word	0x08000d73
 8000d2c:	08000d8d 	.word	0x08000d8d
 8000d30:	08000d9b 	.word	0x08000d9b
 8000d34:	08000db5 	.word	0x08000db5
 8000d38:	08000dc3 	.word	0x08000dc3
		case DPAD_UP:
			ssd1306_FillCircle(56, 52, 9, White);
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	2209      	movs	r2, #9
 8000d40:	2134      	movs	r1, #52	; 0x34
 8000d42:	2038      	movs	r0, #56	; 0x38
 8000d44:	f005 ff03 	bl	8006b4e <ssd1306_FillCircle>
			break;
 8000d48:	e049      	b.n	8000dde <Draw_DPAD+0x10a>
		case DPAD_UPRIGHT:
			ssd1306_FillCircle(56, 52, 9, White);
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	2209      	movs	r2, #9
 8000d4e:	2134      	movs	r1, #52	; 0x34
 8000d50:	2038      	movs	r0, #56	; 0x38
 8000d52:	f005 fefc 	bl	8006b4e <ssd1306_FillCircle>
			ssd1306_FillCircle(48, 22, 7, White);
 8000d56:	2301      	movs	r3, #1
 8000d58:	2207      	movs	r2, #7
 8000d5a:	2116      	movs	r1, #22
 8000d5c:	2030      	movs	r0, #48	; 0x30
 8000d5e:	f005 fef6 	bl	8006b4e <ssd1306_FillCircle>
			break;
 8000d62:	e03c      	b.n	8000dde <Draw_DPAD+0x10a>
		case DPAD_RIGHT:
			ssd1306_FillCircle(48, 22, 7, White);
 8000d64:	2301      	movs	r3, #1
 8000d66:	2207      	movs	r2, #7
 8000d68:	2116      	movs	r1, #22
 8000d6a:	2030      	movs	r0, #48	; 0x30
 8000d6c:	f005 feef 	bl	8006b4e <ssd1306_FillCircle>
			break;
 8000d70:	e035      	b.n	8000dde <Draw_DPAD+0x10a>
		case DPAD_DOWNRIGHT:
			ssd1306_FillCircle(33, 16, 7, White);
 8000d72:	2301      	movs	r3, #1
 8000d74:	2207      	movs	r2, #7
 8000d76:	2110      	movs	r1, #16
 8000d78:	2021      	movs	r0, #33	; 0x21
 8000d7a:	f005 fee8 	bl	8006b4e <ssd1306_FillCircle>
			ssd1306_FillCircle(48, 22, 7, White);
 8000d7e:	2301      	movs	r3, #1
 8000d80:	2207      	movs	r2, #7
 8000d82:	2116      	movs	r1, #22
 8000d84:	2030      	movs	r0, #48	; 0x30
 8000d86:	f005 fee2 	bl	8006b4e <ssd1306_FillCircle>
			break;
 8000d8a:	e028      	b.n	8000dde <Draw_DPAD+0x10a>
		case DPAD_DOWN:
			ssd1306_FillCircle(33, 16, 7, White);
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	2207      	movs	r2, #7
 8000d90:	2110      	movs	r1, #16
 8000d92:	2021      	movs	r0, #33	; 0x21
 8000d94:	f005 fedb 	bl	8006b4e <ssd1306_FillCircle>
			break;
 8000d98:	e021      	b.n	8000dde <Draw_DPAD+0x10a>
		case DPAD_DOWNLEFT:
			ssd1306_FillCircle(17, 16, 7, White);
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	2110      	movs	r1, #16
 8000da0:	2011      	movs	r0, #17
 8000da2:	f005 fed4 	bl	8006b4e <ssd1306_FillCircle>
			ssd1306_FillCircle(33, 16, 7, White);
 8000da6:	2301      	movs	r3, #1
 8000da8:	2207      	movs	r2, #7
 8000daa:	2110      	movs	r1, #16
 8000dac:	2021      	movs	r0, #33	; 0x21
 8000dae:	f005 fece 	bl	8006b4e <ssd1306_FillCircle>
			break;
 8000db2:	e014      	b.n	8000dde <Draw_DPAD+0x10a>
		case DPAD_LEFT:
			ssd1306_FillCircle(17, 16, 7, White);
 8000db4:	2301      	movs	r3, #1
 8000db6:	2207      	movs	r2, #7
 8000db8:	2110      	movs	r1, #16
 8000dba:	2011      	movs	r0, #17
 8000dbc:	f005 fec7 	bl	8006b4e <ssd1306_FillCircle>
			break;
 8000dc0:	e00d      	b.n	8000dde <Draw_DPAD+0x10a>
		case DPAD_UPLEFT:
			ssd1306_FillCircle(56, 52, 9, White);
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	2209      	movs	r2, #9
 8000dc6:	2134      	movs	r1, #52	; 0x34
 8000dc8:	2038      	movs	r0, #56	; 0x38
 8000dca:	f005 fec0 	bl	8006b4e <ssd1306_FillCircle>
			ssd1306_FillCircle(17, 16, 7, White);
 8000dce:	2301      	movs	r3, #1
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	2011      	movs	r0, #17
 8000dd6:	f005 feba 	bl	8006b4e <ssd1306_FillCircle>
			break;
 8000dda:	e000      	b.n	8000dde <Draw_DPAD+0x10a>
		default:
			break;
 8000ddc:	bf00      	nop
	}
	return;
 8000dde:	bf00      	nop
}
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_CRC_MspInit+0x3c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10d      	bne.n	8000e72 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_CRC_MspInit+0x40>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_CRC_MspInit+0x40>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_CRC_MspInit+0x40>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023000 	.word	0x40023000
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a29      	ldr	r2, [pc, #164]	; (8000f4c <HAL_I2C_MspInit+0xc4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d14b      	bne.n	8000f42 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <HAL_I2C_MspInit+0xcc>)
 8000f00:	f000 faa8 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0a:	2312      	movs	r3, #18
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f16:	2304      	movs	r3, #4
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <HAL_I2C_MspInit+0xd0>)
 8000f22:	f000 fa97 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000f30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40005c00 	.word	0x40005c00
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020000 	.word	0x40020000

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_UART_MspInit+0x84>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d12b      	bne.n	8000fd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_UART_MspInit+0x88>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_UART_MspInit+0x88>)
 8000f88:	f043 0320 	orr.w	r3, r3, #32
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_UART_MspInit+0x88>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f003 0320 	and.w	r3, r3, #32
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_UART_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_UART_MspInit+0x88>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_UART_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23c0      	movs	r3, #192	; 0xc0
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_UART_MspInit+0x8c>)
 8000fd2:	f000 fa3f 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40011400 	.word	0x40011400
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020800 	.word	0x40020800

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f89a 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <OTG_FS_IRQHandler+0x10>)
 8001046:	f001 f97d 	bl	8002344 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000aa8 	.word	0x20000aa8

08001054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ffd7 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f007 ffc3 	bl	8009030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fa2d 	bl	8000508 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80010bc:	08009890 	.word	0x08009890
  ldr r2, =_sbss
 80010c0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80010c4:	20000fc8 	.word	0x20000fc8

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f94f 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fe78 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f967 	bl	8001402 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f92f 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000008 	.word	0x20000008
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	200001c0 	.word	0x200001c0

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200001c0 	.word	0x200001c0

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff3e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff31 	bl	800125c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e00e      	b.n	800144a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	795b      	ldrb	r3, [r3, #5]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d105      	bne.n	8001442 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fd01 	bl	8000e44 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e165      	b.n	800173c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8154 	bne.w	8001736 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80ae 	beq.w	8001736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <HAL_GPIO_Init+0x300>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a5c      	ldr	r2, [pc, #368]	; (8001754 <HAL_GPIO_Init+0x300>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <HAL_GPIO_Init+0x300>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_GPIO_Init+0x304>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4f      	ldr	r2, [pc, #316]	; (800175c <HAL_GPIO_Init+0x308>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d025      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <HAL_GPIO_Init+0x30c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01f      	beq.n	800166a <HAL_GPIO_Init+0x216>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4d      	ldr	r2, [pc, #308]	; (8001764 <HAL_GPIO_Init+0x310>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <HAL_GPIO_Init+0x314>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x20e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4b      	ldr	r2, [pc, #300]	; (800176c <HAL_GPIO_Init+0x318>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x20a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4a      	ldr	r2, [pc, #296]	; (8001770 <HAL_GPIO_Init+0x31c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x206>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a49      	ldr	r2, [pc, #292]	; (8001774 <HAL_GPIO_Init+0x320>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x202>
 8001652:	2306      	movs	r3, #6
 8001654:	e00c      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001656:	2307      	movs	r3, #7
 8001658:	e00a      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165a:	2305      	movs	r3, #5
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x304>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_GPIO_Init+0x324>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a26      	ldr	r2, [pc, #152]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_GPIO_Init+0x324>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_GPIO_Init+0x324>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_GPIO_Init+0x324>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f ae96 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40021800 	.word	0x40021800
 8001778:	40013c00 	.word	0x40013c00

0800177c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e12b      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fb3e 	bl	8000e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001844:	f001 ffca 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8001848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a81      	ldr	r2, [pc, #516]	; (8001a54 <HAL_I2C_Init+0x274>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d807      	bhi.n	8001864 <HAL_I2C_Init+0x84>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a80      	ldr	r2, [pc, #512]	; (8001a58 <HAL_I2C_Init+0x278>)
 8001858:	4293      	cmp	r3, r2
 800185a:	bf94      	ite	ls
 800185c:	2301      	movls	r3, #1
 800185e:	2300      	movhi	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e006      	b.n	8001872 <HAL_I2C_Init+0x92>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a7d      	ldr	r2, [pc, #500]	; (8001a5c <HAL_I2C_Init+0x27c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	bf94      	ite	ls
 800186c:	2301      	movls	r3, #1
 800186e:	2300      	movhi	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0e7      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a78      	ldr	r2, [pc, #480]	; (8001a60 <HAL_I2C_Init+0x280>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a6a      	ldr	r2, [pc, #424]	; (8001a54 <HAL_I2C_Init+0x274>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d802      	bhi.n	80018b4 <HAL_I2C_Init+0xd4>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	e009      	b.n	80018c8 <HAL_I2C_Init+0xe8>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a69      	ldr	r2, [pc, #420]	; (8001a64 <HAL_I2C_Init+0x284>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	3301      	adds	r3, #1
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	495c      	ldr	r1, [pc, #368]	; (8001a54 <HAL_I2C_Init+0x274>)
 80018e4:	428b      	cmp	r3, r1
 80018e6:	d819      	bhi.n	800191c <HAL_I2C_Init+0x13c>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e59      	subs	r1, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018fc:	400b      	ands	r3, r1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <HAL_I2C_Init+0x138>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1e59      	subs	r1, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001916:	e051      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001918:	2304      	movs	r3, #4
 800191a:	e04f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <HAL_I2C_Init+0x168>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e012      	b.n	800196e <HAL_I2C_Init+0x18e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	0099      	lsls	r1, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Init+0x196>
 8001972:	2301      	movs	r3, #1
 8001974:	e022      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10e      	bne.n	800199c <HAL_I2C_Init+0x1bc>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e58      	subs	r0, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	440b      	add	r3, r1
 800198c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199a:	e00f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6911      	ldr	r1, [r2, #16]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	000186a0 	.word	0x000186a0
 8001a58:	001e847f 	.word	0x001e847f
 8001a5c:	003d08ff 	.word	0x003d08ff
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f7ff fb89 	bl	8001198 <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	f040 80d9 	bne.w	8001c48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2319      	movs	r3, #25
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	496d      	ldr	r1, [pc, #436]	; (8001c54 <HAL_I2C_Mem_Write+0x1ec>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f971 	bl	8001d88 <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0cc      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_I2C_Mem_Write+0x56>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e0c5      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d007      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2221      	movs	r2, #33	; 0x21
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_I2C_Mem_Write+0x1f0>)
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b26:	88f8      	ldrh	r0, [r7, #6]
 8001b28:	893a      	ldrh	r2, [r7, #8]
 8001b2a:	8979      	ldrh	r1, [r7, #10]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4603      	mov	r3, r0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f890 	bl	8001c5c <I2C_RequestMemoryWrite>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d052      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e081      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f9f2 	bl	8001f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d107      	bne.n	8001b6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11b      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x180>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1aa      	bne.n	8001b46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f9de 	bl	8001fb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e016      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	00100002 	.word	0x00100002
 8001c58:	ffff0000 	.word	0xffff0000

08001c5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	817b      	strh	r3, [r7, #10]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	813b      	strh	r3, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f878 	bl	8001d88 <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00d      	beq.n	8001cba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cac:	d103      	bne.n	8001cb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e05f      	b.n	8001d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cba:	897b      	ldrh	r3, [r7, #10]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	492d      	ldr	r1, [pc, #180]	; (8001d84 <I2C_RequestMemoryWrite+0x128>)
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f8b0 	bl	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e04c      	b.n	8001d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f91a 	bl	8001f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d107      	bne.n	8001d1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e02b      	b.n	8001d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d28:	893b      	ldrh	r3, [r7, #8]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	e021      	b.n	8001d78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d34:	893b      	ldrh	r3, [r7, #8]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8f4 	bl	8001f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d107      	bne.n	8001d6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e005      	b.n	8001d7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d6e:	893b      	ldrh	r3, [r7, #8]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	00010002 	.word	0x00010002

08001d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d98:	e025      	b.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d021      	beq.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da2:	f7ff f9f9 	bl	8001198 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d302      	bcc.n	8001db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d116      	bne.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e023      	b.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	0c1b      	lsrs	r3, r3, #16
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d10d      	bne.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	e00c      	b.n	8001e26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4013      	ands	r3, r2
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2301      	moveq	r3, #1
 8001e20:	2300      	movne	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d0b6      	beq.n	8001d9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e44:	e051      	b.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e54:	d123      	bne.n	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f043 0204 	orr.w	r2, r3, #4
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e046      	b.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d021      	beq.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea6:	f7ff f977 	bl	8001198 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d302      	bcc.n	8001ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d116      	bne.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f043 0220 	orr.w	r2, r3, #32
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e020      	b.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10c      	bne.n	8001f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4013      	ands	r3, r2
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	e00b      	b.n	8001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	43da      	mvns	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d18d      	bne.n	8001e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f40:	e02d      	b.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f878 	bl	8002038 <I2C_IsAcknowledgeFailed>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e02d      	b.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d021      	beq.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7ff f91d 	bl	8001198 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d302      	bcc.n	8001f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d116      	bne.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e007      	b.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d1ca      	bne.n	8001f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fc2:	e02d      	b.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f837 	bl	8002038 <I2C_IsAcknowledgeFailed>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e02d      	b.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fda:	d021      	beq.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fdc:	f7ff f8dc 	bl	8001198 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d302      	bcc.n	8001ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f043 0220 	orr.w	r2, r3, #32
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b04      	cmp	r3, #4
 800202c:	d1ca      	bne.n	8001fc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204e:	d11b      	bne.n	8002088 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002058:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f043 0204 	orr.w	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002098:	b08f      	sub	sp, #60	; 0x3c
 800209a:	af0a      	add	r7, sp, #40	; 0x28
 800209c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e116      	b.n	80022d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f006 fc4e 	bl	8008964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 ff6f 	bl	8004fca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	687e      	ldr	r6, [r7, #4]
 80020f4:	466d      	mov	r5, sp
 80020f6:	f106 0410 	add.w	r4, r6, #16
 80020fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002106:	e885 0003 	stmia.w	r5, {r0, r1}
 800210a:	1d33      	adds	r3, r6, #4
 800210c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210e:	6838      	ldr	r0, [r7, #0]
 8002110:	f002 fe46 	bl	8004da0 <USB_CoreInit>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0d7      	b.n	80022d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f002 ff5d 	bl	8004fec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	e04a      	b.n	80021ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	333d      	adds	r3, #61	; 0x3d
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	333c      	adds	r3, #60	; 0x3c
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	b298      	uxth	r0, r3
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3344      	adds	r3, #68	; 0x44
 8002174:	4602      	mov	r2, r0
 8002176:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3340      	adds	r3, #64	; 0x40
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3348      	adds	r3, #72	; 0x48
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	334c      	adds	r3, #76	; 0x4c
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3354      	adds	r3, #84	; 0x54
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3af      	bcc.n	8002138 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e044      	b.n	8002268 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	3301      	adds	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d3b5      	bcc.n	80021de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	687e      	ldr	r6, [r7, #4]
 800227a:	466d      	mov	r5, sp
 800227c:	f106 0410 	add.w	r4, r6, #16
 8002280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002288:	e894 0003 	ldmia.w	r4, {r0, r1}
 800228c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002290:	1d33      	adds	r3, r6, #4
 8002292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f002 fef5 	bl	8005084 <USB_DevInit>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e014      	b.n	80022d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d102      	bne.n	80022ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f001 f973 	bl	80035b0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 f837 	bl	8006342 <USB_DevDisconnect>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_PCD_Start+0x1c>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e020      	b.n	800233c <HAL_PCD_Start+0x5e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	2b01      	cmp	r3, #1
 8002308:	d109      	bne.n	800231e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800230e:	2b01      	cmp	r3, #1
 8002310:	d005      	beq.n	800231e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f002 fe40 	bl	8004fa8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 ffe7 	bl	8006300 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b08d      	sub	sp, #52	; 0x34
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f004 f8a5 	bl	80064aa <USB_GetMode>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 84b7 	bne.w	8002cd6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f004 f809 	bl	8006384 <USB_ReadInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 84ad 	beq.w	8002cd4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f003 fff6 	bl	8006384 <USB_ReadInterrupts>
 8002398:	4603      	mov	r3, r0
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d107      	bne.n	80023b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f002 0202 	and.w	r2, r2, #2
 80023b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 ffe4 	bl	8006384 <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d161      	bne.n	800248a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699a      	ldr	r2, [r3, #24]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0210 	bic.w	r2, r2, #16
 80023d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f003 020f 	and.w	r2, r3, #15
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	3304      	adds	r3, #4
 80023f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	0c5b      	lsrs	r3, r3, #17
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d124      	bne.n	800244c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d035      	beq.n	800247a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800241c:	b29b      	uxth	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	6a38      	ldr	r0, [r7, #32]
 8002422:	f003 fe1b 	bl	800605c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002432:	441a      	add	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002444:	441a      	add	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	621a      	str	r2, [r3, #32]
 800244a:	e016      	b.n	800247a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	0c5b      	lsrs	r3, r3, #17
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	2b06      	cmp	r3, #6
 8002456:	d110      	bne.n	800247a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800245e:	2208      	movs	r2, #8
 8002460:	4619      	mov	r1, r3
 8002462:	6a38      	ldr	r0, [r7, #32]
 8002464:	f003 fdfa 	bl	800605c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002474:	441a      	add	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0210 	orr.w	r2, r2, #16
 8002488:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 ff78 	bl	8006384 <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800249a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800249e:	f040 80a7 	bne.w	80025f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 ff7d 	bl	80063aa <USB_ReadDevAllOutEpInterrupt>
 80024b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024b2:	e099      	b.n	80025e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 808e 	beq.w	80025dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 ffa1 	bl	8006412 <USB_ReadDevOutEPInterrupt>
 80024d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00c      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e8:	461a      	mov	r2, r3
 80024ea:	2301      	movs	r3, #1
 80024ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fed7 	bl	80032a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00c      	beq.n	800251a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250c:	461a      	mov	r2, r3
 800250e:	2308      	movs	r3, #8
 8002510:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 ffad 	bl	8003474 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002530:	461a      	mov	r2, r3
 8002532:	2310      	movs	r3, #16
 8002534:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d030      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d109      	bne.n	8002560 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800255a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	78db      	ldrb	r3, [r3, #3]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d108      	bne.n	8002590 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f006 fb06 	bl	8008b9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259c:	461a      	mov	r2, r3
 800259e:	2302      	movs	r3, #2
 80025a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	2320      	movs	r3, #32
 80025bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d4:	461a      	mov	r2, r3
 80025d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	3301      	adds	r3, #1
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f47f af62 	bne.w	80024b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fec5 	bl	8006384 <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002604:	f040 80db 	bne.w	80027be <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f003 fee6 	bl	80063de <USB_ReadDevAllInEpInterrupt>
 8002612:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002618:	e0cd      	b.n	80027b6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80c2 	beq.w	80027aa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f003 ff0c 	bl	800644e <USB_ReadDevInEPInterrupt>
 8002636:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d057      	beq.n	80026f2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	2201      	movs	r2, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43db      	mvns	r3, r3
 800265c:	69f9      	ldr	r1, [r7, #28]
 800265e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002662:	4013      	ands	r3, r2
 8002664:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002672:	461a      	mov	r2, r3
 8002674:	2301      	movs	r3, #1
 8002676:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d132      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	334c      	adds	r3, #76	; 0x4c
 8002690:	6819      	ldr	r1, [r3, #0]
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4403      	add	r3, r0
 80026a0:	3348      	adds	r3, #72	; 0x48
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4419      	add	r1, r3
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4403      	add	r3, r0
 80026b4:	334c      	adds	r3, #76	; 0x4c
 80026b6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d113      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x3a2>
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3354      	adds	r3, #84	; 0x54
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d108      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026de:	461a      	mov	r2, r3
 80026e0:	2101      	movs	r1, #1
 80026e2:	f003 ff13 	bl	800650c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4619      	mov	r1, r3
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f006 f9d0 	bl	8008a92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002708:	461a      	mov	r2, r3
 800270a:	2308      	movs	r3, #8
 800270c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002724:	461a      	mov	r2, r3
 8002726:	2310      	movs	r3, #16
 8002728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002740:	461a      	mov	r2, r3
 8002742:	2340      	movs	r3, #64	; 0x40
 8002744:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d023      	beq.n	8002798 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002752:	6a38      	ldr	r0, [r7, #32]
 8002754:	f002 fdf4 	bl	8005340 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	3338      	adds	r3, #56	; 0x38
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	3304      	adds	r3, #4
 800276a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	78db      	ldrb	r3, [r3, #3]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d108      	bne.n	8002786 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2200      	movs	r2, #0
 8002778:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	b2db      	uxtb	r3, r3
 800277e:	4619      	mov	r1, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f006 fa1d 	bl	8008bc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002792:	461a      	mov	r2, r3
 8002794:	2302      	movs	r3, #2
 8002796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fcf0 	bl	800318a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	3301      	adds	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f47f af2e 	bne.w	800261a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fdde 	bl	8006384 <USB_ReadInterrupts>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027d2:	d122      	bne.n	800281a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d108      	bne.n	8002804 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027fa:	2100      	movs	r1, #0
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f006 fb85 	bl	8008f0c <HAL_PCDEx_LPM_Callback>
 8002802:	e002      	b.n	800280a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f006 f9bb 	bl	8008b80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f003 fdb0 	bl	8006384 <USB_ReadInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800282e:	d112      	bne.n	8002856 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d102      	bne.n	8002846 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f006 f977 	bl	8008b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002854:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fd92 	bl	8006384 <USB_ReadInterrupts>
 8002860:	4603      	mov	r3, r0
 8002862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800286a:	d121      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800287a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d111      	bne.n	80028aa <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	f003 020f 	and.w	r2, r3, #15
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80028a0:	2101      	movs	r1, #1
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f006 fb32 	bl	8008f0c <HAL_PCDEx_LPM_Callback>
 80028a8:	e002      	b.n	80028b0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f006 f942 	bl	8008b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fd65 	bl	8006384 <USB_ReadInterrupts>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	f040 80b7 	bne.w	8002a36 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2110      	movs	r1, #16
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 fd2c 	bl	8005340 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ec:	e046      	b.n	800297c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028fa:	461a      	mov	r2, r3
 80028fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002900:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002912:	0151      	lsls	r1, r2, #5
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	440a      	add	r2, r1
 8002918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800291c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002920:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292e:	461a      	mov	r2, r3
 8002930:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002934:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002946:	0151      	lsls	r1, r2, #5
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	440a      	add	r2, r1
 800294c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002954:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	440a      	add	r2, r1
 800296c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002970:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002974:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	3301      	adds	r3, #1
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002982:	429a      	cmp	r2, r3
 8002984:	d3b3      	bcc.n	80028ee <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002994:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002998:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b2:	f043 030b 	orr.w	r3, r3, #11
 80029b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c8:	f043 030b 	orr.w	r3, r3, #11
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	e015      	b.n	80029fc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f6:	f043 030b 	orr.w	r3, r3, #11
 80029fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a20:	461a      	mov	r2, r3
 8002a22:	f003 fd73 	bl	800650c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 fca2 	bl	8006384 <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4a:	d124      	bne.n	8002a96 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 fd38 	bl	80064c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fced 	bl	800543a <USB_GetDevSpeed>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681c      	ldr	r4, [r3, #0]
 8002a6c:	f000 feaa 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 8002a70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f002 f9f2 	bl	8004e64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f006 f82e 	bl	8008ae2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 fc72 	bl	8006384 <USB_ReadInterrupts>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f006 f80b 	bl	8008ac6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f002 0208 	and.w	r2, r2, #8
 8002abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fc5d 	bl	8006384 <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	d122      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	e014      	b.n	8002b10 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d105      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fb0f 	bl	8003128 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d3e5      	bcc.n	8002ae6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 fc30 	bl	8006384 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b2e:	d13b      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b30:	2301      	movs	r3, #1
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
 8002b34:	e02b      	b.n	8002b8e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3340      	adds	r3, #64	; 0x40
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d115      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da12      	bge.n	8002b88 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	333f      	adds	r3, #63	; 0x3f
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fad0 	bl	8003128 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d3ce      	bcc.n	8002b36 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 fbe9 	bl	8006384 <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bbc:	d155      	bne.n	8002c6a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	e045      	b.n	8002c50 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d12e      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da2b      	bge.n	8002c4a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002bfe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d121      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c46:	6053      	str	r3, [r2, #4]
            break;
 8002c48:	e007      	b.n	8002c5a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3b4      	bcc.n	8002bc4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 fb88 	bl	8006384 <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7e:	d10a      	bne.n	8002c96 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f005 ffaf 	bl	8008be4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fb72 	bl	8006384 <USB_ReadInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d115      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f005 ff9f 	bl	8008c00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	e000      	b.n	8002cd6 <HAL_PCD_IRQHandler+0x992>
      return;
 8002cd4:	bf00      	nop
    }
  }
}
 8002cd6:	3734      	adds	r7, #52	; 0x34
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd90      	pop	{r4, r7, pc}

08002cdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_PCD_SetAddress+0x1a>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e013      	b.n	8002d1e <HAL_PCD_SetAddress+0x42>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 fad0 	bl	80062b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	4608      	mov	r0, r1
 8002d30:	4611      	mov	r1, r2
 8002d32:	461a      	mov	r2, r3
 8002d34:	4603      	mov	r3, r0
 8002d36:	70fb      	strb	r3, [r7, #3]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	803b      	strh	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	da0f      	bge.n	8002d6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	f003 020f 	and.w	r2, r3, #15
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	3338      	adds	r3, #56	; 0x38
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	705a      	strb	r2, [r3, #1]
 8002d6a:	e00f      	b.n	8002d8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d98:	883a      	ldrh	r2, [r7, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	78ba      	ldrb	r2, [r7, #2]
 8002da2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002db6:	78bb      	ldrb	r3, [r7, #2]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d102      	bne.n	8002dc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_PCD_EP_Open+0xaa>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e00e      	b.n	8002dee <HAL_PCD_EP_Open+0xc8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 fb50 	bl	8005484 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002dec:	7afb      	ldrb	r3, [r7, #11]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da0f      	bge.n	8002e2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	3338      	adds	r3, #56	; 0x38
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3304      	adds	r3, #4
 8002e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	705a      	strb	r2, [r3, #1]
 8002e28:	e00f      	b.n	8002e4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_PCD_EP_Close+0x6e>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e00e      	b.n	8002e82 <HAL_PCD_EP_Close+0x8c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f002 fb8e 	bl	8005594 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	460b      	mov	r3, r1
 8002e98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e9a:	7afb      	ldrb	r3, [r7, #11]
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d102      	bne.n	8002ee6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee6:	7afb      	ldrb	r3, [r7, #11]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	6979      	ldr	r1, [r7, #20]
 8002efe:	f002 fe6d 	bl	8005bdc <USB_EP0StartXfer>
 8002f02:	e008      	b.n	8002f16 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6979      	ldr	r1, [r7, #20]
 8002f12:	f002 fc1b 	bl	800574c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f30:	7afb      	ldrb	r3, [r7, #11]
 8002f32:	f003 020f 	and.w	r2, r3, #15
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	3338      	adds	r3, #56	; 0x38
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	3304      	adds	r3, #4
 8002f46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2200      	movs	r2, #0
 8002f58:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f60:	7afb      	ldrb	r3, [r7, #11]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d102      	bne.n	8002f7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f7a:	7afb      	ldrb	r3, [r7, #11]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6979      	ldr	r1, [r7, #20]
 8002f92:	f002 fe23 	bl	8005bdc <USB_EP0StartXfer>
 8002f96:	e008      	b.n	8002faa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	6979      	ldr	r1, [r7, #20]
 8002fa6:	f002 fbd1 	bl	800574c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d901      	bls.n	8002fd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e050      	b.n	8003074 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da0f      	bge.n	8002ffa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	3338      	adds	r3, #56	; 0x38
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	705a      	strb	r2, [r3, #1]
 8002ff8:	e00d      	b.n	8003016 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	3304      	adds	r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_PCD_EP_SetStall+0x82>
 8003032:	2302      	movs	r3, #2
 8003034:	e01e      	b.n	8003074 <HAL_PCD_EP_SetStall+0xc0>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	4618      	mov	r0, r3
 8003046:	f003 f861 	bl	800610c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	b2d9      	uxtb	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003064:	461a      	mov	r2, r3
 8003066:	f003 fa51 	bl	800650c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	d901      	bls.n	800309a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e042      	b.n	8003120 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800309a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da0f      	bge.n	80030c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	f003 020f 	and.w	r2, r3, #15
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3338      	adds	r3, #56	; 0x38
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	705a      	strb	r2, [r3, #1]
 80030c0:	e00f      	b.n	80030e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 020f 	and.w	r2, r3, #15
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_PCD_EP_ClrStall+0x86>
 80030fe:	2302      	movs	r3, #2
 8003100:	e00e      	b.n	8003120 <HAL_PCD_EP_ClrStall+0xa4>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68f9      	ldr	r1, [r7, #12]
 8003110:	4618      	mov	r0, r3
 8003112:	f003 f869 	bl	80061e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003138:	2b00      	cmp	r3, #0
 800313a:	da0c      	bge.n	8003156 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	3338      	adds	r3, #56	; 0x38
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	3304      	adds	r3, #4
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	e00c      	b.n	8003170 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	4618      	mov	r0, r3
 8003178:	f002 fe88 	bl	8005e8c <USB_EPStopXfer>
 800317c:	4603      	mov	r3, r0
 800317e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003180:	7afb      	ldrb	r3, [r7, #11]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b08a      	sub	sp, #40	; 0x28
 800318e:	af02      	add	r7, sp, #8
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3338      	adds	r3, #56	; 0x38
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a1a      	ldr	r2, [r3, #32]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d901      	bls.n	80031c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06c      	b.n	800329c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d902      	bls.n	80031de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3303      	adds	r3, #3
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031e6:	e02b      	b.n	8003240 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d902      	bls.n	8003204 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3303      	adds	r3, #3
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6919      	ldr	r1, [r3, #16]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800321c:	b2db      	uxtb	r3, r3
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4603      	mov	r3, r0
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f002 fedc 	bl	8005fe0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	441a      	add	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	441a      	add	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	b29b      	uxth	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	429a      	cmp	r2, r3
 8003254:	d809      	bhi.n	800326a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800325e:	429a      	cmp	r2, r3
 8003260:	d203      	bcs.n	800326a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1be      	bne.n	80031e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	429a      	cmp	r2, r3
 8003274:	d811      	bhi.n	800329a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	2201      	movs	r2, #1
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	43db      	mvns	r3, r3
 8003290:	6939      	ldr	r1, [r7, #16]
 8003292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003296:	4013      	ands	r3, r2
 8003298:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	333c      	adds	r3, #60	; 0x3c
 80032bc:	3304      	adds	r3, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d17b      	bne.n	80033d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d015      	beq.n	8003310 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4a61      	ldr	r2, [pc, #388]	; (800346c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	f240 80b9 	bls.w	8003460 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80b3 	beq.w	8003460 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003306:	461a      	mov	r2, r3
 8003308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330c:	6093      	str	r3, [r2, #8]
 800330e:	e0a7      	b.n	8003460 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	461a      	mov	r2, r3
 8003328:	2320      	movs	r3, #32
 800332a:	6093      	str	r3, [r2, #8]
 800332c:	e098      	b.n	8003460 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 8093 	bne.w	8003460 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4a4b      	ldr	r2, [pc, #300]	; (800346c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d90f      	bls.n	8003362 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335e:	6093      	str	r3, [r2, #8]
 8003360:	e07e      	b.n	8003460 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	0159      	lsls	r1, r3, #5
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	440b      	add	r3, r1
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338e:	1ad2      	subs	r2, r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d114      	bne.n	80033c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033ac:	461a      	mov	r2, r3
 80033ae:	2101      	movs	r1, #1
 80033b0:	f003 f8ac 	bl	800650c <USB_EP0_OutStart>
 80033b4:	e006      	b.n	80033c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f005 fb46 	bl	8008a5c <HAL_PCD_DataOutStageCallback>
 80033d0:	e046      	b.n	8003460 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4a26      	ldr	r2, [pc, #152]	; (8003470 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d124      	bne.n	8003424 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f0:	461a      	mov	r2, r3
 80033f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f6:	6093      	str	r3, [r2, #8]
 80033f8:	e032      	b.n	8003460 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003410:	461a      	mov	r2, r3
 8003412:	2320      	movs	r3, #32
 8003414:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	4619      	mov	r1, r3
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f005 fb1d 	bl	8008a5c <HAL_PCD_DataOutStageCallback>
 8003422:	e01d      	b.n	8003460 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d114      	bne.n	8003454 <PCD_EP_OutXfrComplete_int+0x1b0>
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d108      	bne.n	8003454 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800344c:	461a      	mov	r2, r3
 800344e:	2100      	movs	r1, #0
 8003450:	f003 f85c 	bl	800650c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	4619      	mov	r1, r3
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f005 fafe 	bl	8008a5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	4f54300a 	.word	0x4f54300a
 8003470:	4f54310a 	.word	0x4f54310a

08003474 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	333c      	adds	r3, #60	; 0x3c
 800348c:	3304      	adds	r3, #4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a15      	ldr	r2, [pc, #84]	; (80034fc <PCD_EP_OutSetupPacket_int+0x88>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d90e      	bls.n	80034c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	461a      	mov	r2, r3
 80034c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f005 fab5 	bl	8008a38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <PCD_EP_OutSetupPacket_int+0x88>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d90c      	bls.n	80034f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d108      	bne.n	80034f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e8:	461a      	mov	r2, r3
 80034ea:	2101      	movs	r1, #1
 80034ec:	f003 f80e 	bl	800650c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	4f54300a 	.word	0x4f54300a

08003500 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
 800350c:	4613      	mov	r3, r2
 800350e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800351e:	883b      	ldrh	r3, [r7, #0]
 8003520:	0419      	lsls	r1, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	430a      	orrs	r2, r1
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
 800352c:	e028      	b.n	8003580 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	4413      	add	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e00d      	b.n	800355e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	3340      	adds	r3, #64	; 0x40
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	4413      	add	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	3301      	adds	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	3b01      	subs	r3, #1
 8003564:	429a      	cmp	r2, r3
 8003566:	d3ec      	bcc.n	8003542 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003568:	883b      	ldrh	r3, [r7, #0]
 800356a:	0418      	lsls	r0, r3, #16
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	3b01      	subs	r3, #1
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	4302      	orrs	r2, r0
 8003578:	3340      	adds	r3, #64	; 0x40
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e2:	f043 0303 	orr.w	r3, r3, #3
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0cc      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800360c:	4b68      	ldr	r3, [pc, #416]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d90c      	bls.n	8003634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b65      	ldr	r3, [pc, #404]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0b8      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800364c:	4b59      	ldr	r3, [pc, #356]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a58      	ldr	r2, [pc, #352]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003664:	4b53      	ldr	r3, [pc, #332]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a52      	ldr	r2, [pc, #328]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800366e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	494d      	ldr	r1, [pc, #308]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d044      	beq.n	8003718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d119      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e07f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e067      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d6:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 0203 	bic.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4934      	ldr	r1, [pc, #208]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e8:	f7fd fd56 	bl	8001198 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f0:	f7fd fd52 	bl	8001198 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e04f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 020c 	and.w	r2, r3, #12
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	429a      	cmp	r2, r3
 8003716:	d1eb      	bne.n	80036f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d20c      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e032      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4916      	ldr	r1, [pc, #88]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	490e      	ldr	r1, [pc, #56]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377e:	f000 fb7f 	bl	8003e80 <HAL_RCC_GetSysClockFreq>
 8003782:	4602      	mov	r2, r0
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	490a      	ldr	r1, [pc, #40]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003790:	5ccb      	ldrb	r3, [r1, r3]
 8003792:	fa22 f303 	lsr.w	r3, r2, r3
 8003796:	4a09      	ldr	r2, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1c8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd fcb6 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023c00 	.word	0x40023c00
 80037b4:	40023800 	.word	0x40023800
 80037b8:	080090f0 	.word	0x080090f0
 80037bc:	20000000 	.word	0x20000000
 80037c0:	20000004 	.word	0x20000004

080037c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000000 	.word	0x20000000

080037dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e0:	f7ff fff0 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	0a9b      	lsrs	r3, r3, #10
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4903      	ldr	r1, [pc, #12]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	08009100 	.word	0x08009100

08003804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003808:	f7ff ffdc 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	0b5b      	lsrs	r3, r3, #13
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4903      	ldr	r1, [pc, #12]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	08009100 	.word	0x08009100

0800382c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08c      	sub	sp, #48	; 0x30
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003864:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	496c      	ldr	r1, [pc, #432]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003882:	2301      	movs	r3, #1
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003892:	4b64      	ldr	r3, [pc, #400]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003898:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	4960      	ldr	r1, [pc, #384]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80038b0:	2301      	movs	r3, #1
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d017      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c0:	4b58      	ldr	r3, [pc, #352]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4955      	ldr	r1, [pc, #340]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038de:	d101      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80038e0:	2301      	movs	r3, #1
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80038ec:	2301      	movs	r3, #1
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d017      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038fc:	4b49      	ldr	r3, [pc, #292]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003902:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	4946      	ldr	r1, [pc, #280]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391a:	d101      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800391c:	2301      	movs	r3, #1
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003928:	2301      	movs	r3, #1
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 808a 	beq.w	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4a38      	ldr	r2, [pc, #224]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6413      	str	r3, [r2, #64]	; 0x40
 800394a:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003956:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a33      	ldr	r2, [pc, #204]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800395c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003960:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003962:	f7fd fc19 	bl	8001198 <HAL_GetTick>
 8003966:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003968:	e008      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800396a:	f7fd fc15 	bl	8001198 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e278      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003988:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003990:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d02f      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d028      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a6:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039b0:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d114      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fd fbe3 	bl	8001198 <HAL_GetTick>
 80039d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	e00a      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7fd fbdf 	bl	8001198 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e240      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ec:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ee      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a04:	d114      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1a:	4902      	ldr	r1, [pc, #8]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]
 8003a20:	e00c      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	42470e40 	.word	0x42470e40
 8003a30:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a49      	ldr	r2, [pc, #292]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a3a:	6093      	str	r3, [r2, #8]
 8003a3c:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a48:	4944      	ldr	r1, [pc, #272]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003a60:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003a62:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003a70:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7e:	4937      	ldr	r1, [pc, #220]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a92:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a98:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	492e      	ldr	r1, [pc, #184]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d011      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ab4:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aba:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	4926      	ldr	r1, [pc, #152]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	491a      	ldr	r1, [pc, #104]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d011      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	4911      	ldr	r1, [pc, #68]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b24:	d101      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003b26:	2301      	movs	r3, #1
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b38:	f040 80ff 	bne.w	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b42:	f7fd fb29 	bl	8001198 <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b48:	e00e      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b4a:	f7fd fb25 	bl	8001198 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d907      	bls.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e188      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	424711e0 	.word	0x424711e0
 8003b64:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b68:	4b7e      	ldr	r3, [pc, #504]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ea      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d028      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d124      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b9c:	4b71      	ldr	r3, [pc, #452]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba2:	0c1b      	lsrs	r3, r3, #16
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bae:	4b6d      	ldr	r3, [pc, #436]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb4:	0e1b      	lsrs	r3, r3, #24
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	019b      	lsls	r3, r3, #6
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	4961      	ldr	r1, [pc, #388]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d004      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d035      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c10:	d130      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c12:	4b54      	ldr	r3, [pc, #336]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c24:	4b4f      	ldr	r3, [pc, #316]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2a:	0f1b      	lsrs	r3, r3, #28
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	019b      	lsls	r3, r3, #6
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	3b01      	subs	r3, #1
 8003c44:	041b      	lsls	r3, r3, #16
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	071b      	lsls	r3, r3, #28
 8003c54:	4943      	ldr	r1, [pc, #268]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c5c:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c62:	f023 021f 	bic.w	r2, r3, #31
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	493d      	ldr	r1, [pc, #244]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d029      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c88:	d124      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	3301      	adds	r3, #1
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c9c:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca2:	0f1b      	lsrs	r3, r3, #28
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	019b      	lsls	r3, r3, #6
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	071b      	lsls	r3, r3, #28
 8003ccc:	4925      	ldr	r1, [pc, #148]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d016      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	019b      	lsls	r3, r3, #6
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	071b      	lsls	r3, r3, #28
 8003d06:	4917      	ldr	r1, [pc, #92]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d0e:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d14:	f7fd fa40 	bl	8001198 <HAL_GetTick>
 8003d18:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d1c:	f7fd fa3c 	bl	8001198 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e09f      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	f040 8095 	bne.w	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fd fa26 	bl	8001198 <HAL_GetTick>
 8003d4c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d4e:	e00f      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d50:	f7fd fa22 	bl	8001198 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d908      	bls.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e085      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800
 8003d68:	42470068 	.word	0x42470068
 8003d6c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d70:	4b41      	ldr	r3, [pc, #260]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7c:	d0e8      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d02b      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d127      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003da6:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	0c1b      	lsrs	r3, r3, #16
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	3301      	adds	r3, #1
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	4928      	ldr	r1, [pc, #160]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ddc:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	3b01      	subs	r3, #1
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	4922      	ldr	r1, [pc, #136]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01d      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0a:	d118      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	0e1b      	lsrs	r3, r3, #24
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	019b      	lsls	r3, r3, #6
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	4910      	ldr	r1, [pc, #64]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fd f9a8 	bl	8001198 <HAL_GetTick>
 8003e48:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e4c:	f7fd f9a4 	bl	8001198 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e007      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6a:	d1ef      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3730      	adds	r7, #48	; 0x30
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	42470070 	.word	0x42470070

08003e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e84:	b0ae      	sub	sp, #184	; 0xb8
 8003e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ea6:	4bcb      	ldr	r3, [pc, #812]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	f200 8206 	bhi.w	80042c0 <HAL_RCC_GetSysClockFreq+0x440>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ef1 	.word	0x08003ef1
 8003ec0:	080042c1 	.word	0x080042c1
 8003ec4:	080042c1 	.word	0x080042c1
 8003ec8:	080042c1 	.word	0x080042c1
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	080042c1 	.word	0x080042c1
 8003ed4:	080042c1 	.word	0x080042c1
 8003ed8:	080042c1 	.word	0x080042c1
 8003edc:	08003f01 	.word	0x08003f01
 8003ee0:	080042c1 	.word	0x080042c1
 8003ee4:	080042c1 	.word	0x080042c1
 8003ee8:	080042c1 	.word	0x080042c1
 8003eec:	080040f1 	.word	0x080040f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ef0:	4bb9      	ldr	r3, [pc, #740]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ef6:	e1e7      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef8:	4bb8      	ldr	r3, [pc, #736]	; (80041dc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003efe:	e1e3      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f00:	4bb4      	ldr	r3, [pc, #720]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f0c:	4bb1      	ldr	r3, [pc, #708]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d071      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f18:	4bae      	ldr	r3, [pc, #696]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f24:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f3e:	4622      	mov	r2, r4
 8003f40:	462b      	mov	r3, r5
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	0159      	lsls	r1, r3, #5
 8003f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f50:	0150      	lsls	r0, r2, #5
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4621      	mov	r1, r4
 8003f58:	1a51      	subs	r1, r2, r1
 8003f5a:	6439      	str	r1, [r7, #64]	; 0x40
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f62:	647b      	str	r3, [r7, #68]	; 0x44
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003f70:	4649      	mov	r1, r9
 8003f72:	018b      	lsls	r3, r1, #6
 8003f74:	4641      	mov	r1, r8
 8003f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	018a      	lsls	r2, r1, #6
 8003f7e:	4641      	mov	r1, r8
 8003f80:	1a51      	subs	r1, r2, r1
 8003f82:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f84:	4649      	mov	r1, r9
 8003f86:	eb63 0301 	sbc.w	r3, r3, r1
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003f98:	4649      	mov	r1, r9
 8003f9a:	00cb      	lsls	r3, r1, #3
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	00ca      	lsls	r2, r1, #3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	4622      	mov	r2, r4
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	460a      	mov	r2, r1
 8003fb6:	eb42 0303 	adc.w	r3, r2, r3
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fc8:	4629      	mov	r1, r5
 8003fca:	024b      	lsls	r3, r1, #9
 8003fcc:	4621      	mov	r1, r4
 8003fce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	024a      	lsls	r2, r1, #9
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fe4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fe8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003fec:	f7fc f90a 	bl	8000204 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ffa:	e067      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffc:	4b75      	ldr	r3, [pc, #468]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	099b      	lsrs	r3, r3, #6
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004008:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800400c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004014:	67bb      	str	r3, [r7, #120]	; 0x78
 8004016:	2300      	movs	r3, #0
 8004018:	67fb      	str	r3, [r7, #124]	; 0x7c
 800401a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800401e:	4622      	mov	r2, r4
 8004020:	462b      	mov	r3, r5
 8004022:	f04f 0000 	mov.w	r0, #0
 8004026:	f04f 0100 	mov.w	r1, #0
 800402a:	0159      	lsls	r1, r3, #5
 800402c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004030:	0150      	lsls	r0, r2, #5
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4621      	mov	r1, r4
 8004038:	1a51      	subs	r1, r2, r1
 800403a:	62b9      	str	r1, [r7, #40]	; 0x28
 800403c:	4629      	mov	r1, r5
 800403e:	eb63 0301 	sbc.w	r3, r3, r1
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004050:	4649      	mov	r1, r9
 8004052:	018b      	lsls	r3, r1, #6
 8004054:	4641      	mov	r1, r8
 8004056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800405a:	4641      	mov	r1, r8
 800405c:	018a      	lsls	r2, r1, #6
 800405e:	4641      	mov	r1, r8
 8004060:	ebb2 0a01 	subs.w	sl, r2, r1
 8004064:	4649      	mov	r1, r9
 8004066:	eb63 0b01 	sbc.w	fp, r3, r1
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004076:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800407a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800407e:	4692      	mov	sl, r2
 8004080:	469b      	mov	fp, r3
 8004082:	4623      	mov	r3, r4
 8004084:	eb1a 0303 	adds.w	r3, sl, r3
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	462b      	mov	r3, r5
 800408c:	eb4b 0303 	adc.w	r3, fp, r3
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800409e:	4629      	mov	r1, r5
 80040a0:	028b      	lsls	r3, r1, #10
 80040a2:	4621      	mov	r1, r4
 80040a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a8:	4621      	mov	r1, r4
 80040aa:	028a      	lsls	r2, r1, #10
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040b4:	2200      	movs	r2, #0
 80040b6:	673b      	str	r3, [r7, #112]	; 0x70
 80040b8:	677a      	str	r2, [r7, #116]	; 0x74
 80040ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80040be:	f7fc f8a1 	bl	8000204 <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4613      	mov	r3, r2
 80040c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040cc:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	3301      	adds	r3, #1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80040de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040ee:	e0eb      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f0:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040fc:	4b35      	ldr	r3, [pc, #212]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d06b      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004108:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	2200      	movs	r2, #0
 8004110:	66bb      	str	r3, [r7, #104]	; 0x68
 8004112:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411a:	663b      	str	r3, [r7, #96]	; 0x60
 800411c:	2300      	movs	r3, #0
 800411e:	667b      	str	r3, [r7, #100]	; 0x64
 8004120:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004124:	4622      	mov	r2, r4
 8004126:	462b      	mov	r3, r5
 8004128:	f04f 0000 	mov.w	r0, #0
 800412c:	f04f 0100 	mov.w	r1, #0
 8004130:	0159      	lsls	r1, r3, #5
 8004132:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004136:	0150      	lsls	r0, r2, #5
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4621      	mov	r1, r4
 800413e:	1a51      	subs	r1, r2, r1
 8004140:	61b9      	str	r1, [r7, #24]
 8004142:	4629      	mov	r1, r5
 8004144:	eb63 0301 	sbc.w	r3, r3, r1
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004156:	4659      	mov	r1, fp
 8004158:	018b      	lsls	r3, r1, #6
 800415a:	4651      	mov	r1, sl
 800415c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004160:	4651      	mov	r1, sl
 8004162:	018a      	lsls	r2, r1, #6
 8004164:	4651      	mov	r1, sl
 8004166:	ebb2 0801 	subs.w	r8, r2, r1
 800416a:	4659      	mov	r1, fp
 800416c:	eb63 0901 	sbc.w	r9, r3, r1
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800417c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004180:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004184:	4690      	mov	r8, r2
 8004186:	4699      	mov	r9, r3
 8004188:	4623      	mov	r3, r4
 800418a:	eb18 0303 	adds.w	r3, r8, r3
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	462b      	mov	r3, r5
 8004192:	eb49 0303 	adc.w	r3, r9, r3
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041a4:	4629      	mov	r1, r5
 80041a6:	024b      	lsls	r3, r1, #9
 80041a8:	4621      	mov	r1, r4
 80041aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ae:	4621      	mov	r1, r4
 80041b0:	024a      	lsls	r2, r1, #9
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041ba:	2200      	movs	r2, #0
 80041bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80041be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041c4:	f7fc f81e 	bl	8000204 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4613      	mov	r3, r2
 80041ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041d2:	e065      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x420>
 80041d4:	40023800 	.word	0x40023800
 80041d8:	00f42400 	.word	0x00f42400
 80041dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	2200      	movs	r2, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	4611      	mov	r1, r2
 80041ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041f0:	653b      	str	r3, [r7, #80]	; 0x50
 80041f2:	2300      	movs	r3, #0
 80041f4:	657b      	str	r3, [r7, #84]	; 0x54
 80041f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80041fa:	4642      	mov	r2, r8
 80041fc:	464b      	mov	r3, r9
 80041fe:	f04f 0000 	mov.w	r0, #0
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	0159      	lsls	r1, r3, #5
 8004208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420c:	0150      	lsls	r0, r2, #5
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4641      	mov	r1, r8
 8004214:	1a51      	subs	r1, r2, r1
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	4649      	mov	r1, r9
 800421a:	eb63 0301 	sbc.w	r3, r3, r1
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800422c:	4659      	mov	r1, fp
 800422e:	018b      	lsls	r3, r1, #6
 8004230:	4651      	mov	r1, sl
 8004232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004236:	4651      	mov	r1, sl
 8004238:	018a      	lsls	r2, r1, #6
 800423a:	4651      	mov	r1, sl
 800423c:	1a54      	subs	r4, r2, r1
 800423e:	4659      	mov	r1, fp
 8004240:	eb63 0501 	sbc.w	r5, r3, r1
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	00eb      	lsls	r3, r5, #3
 800424e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004252:	00e2      	lsls	r2, r4, #3
 8004254:	4614      	mov	r4, r2
 8004256:	461d      	mov	r5, r3
 8004258:	4643      	mov	r3, r8
 800425a:	18e3      	adds	r3, r4, r3
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	464b      	mov	r3, r9
 8004260:	eb45 0303 	adc.w	r3, r5, r3
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004272:	4629      	mov	r1, r5
 8004274:	028b      	lsls	r3, r1, #10
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800427c:	4621      	mov	r1, r4
 800427e:	028a      	lsls	r2, r1, #10
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004288:	2200      	movs	r2, #0
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48
 800428c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800428e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004292:	f7fb ffb7 	bl	8000204 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4613      	mov	r3, r2
 800429c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	0f1b      	lsrs	r3, r3, #28
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80042ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042be:	e003      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80042c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	37b8      	adds	r7, #184	; 0xb8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	00f42400 	.word	0x00f42400

080042e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e28d      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8083 	beq.w	8004406 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004300:	4b94      	ldr	r3, [pc, #592]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b04      	cmp	r3, #4
 800430a:	d019      	beq.n	8004340 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800430c:	4b91      	ldr	r3, [pc, #580]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004314:	2b08      	cmp	r3, #8
 8004316:	d106      	bne.n	8004326 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004318:	4b8e      	ldr	r3, [pc, #568]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004324:	d00c      	beq.n	8004340 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004326:	4b8b      	ldr	r3, [pc, #556]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800432e:	2b0c      	cmp	r3, #12
 8004330:	d112      	bne.n	8004358 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433e:	d10b      	bne.n	8004358 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	4b84      	ldr	r3, [pc, #528]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05b      	beq.n	8004404 <HAL_RCC_OscConfig+0x124>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d157      	bne.n	8004404 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e25a      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004360:	d106      	bne.n	8004370 <HAL_RCC_OscConfig+0x90>
 8004362:	4b7c      	ldr	r3, [pc, #496]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a7b      	ldr	r2, [pc, #492]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e01d      	b.n	80043ac <HAL_RCC_OscConfig+0xcc>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0xb4>
 800437a:	4b76      	ldr	r3, [pc, #472]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a75      	ldr	r2, [pc, #468]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b73      	ldr	r3, [pc, #460]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a72      	ldr	r2, [pc, #456]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0xcc>
 8004394:	4b6f      	ldr	r3, [pc, #444]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6e      	ldr	r2, [pc, #440]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 800439a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b6c      	ldr	r3, [pc, #432]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6b      	ldr	r2, [pc, #428]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 80043a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fc fef0 	bl	8001198 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fc feec 	bl	8001198 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	; 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e21f      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	4b61      	ldr	r3, [pc, #388]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0xdc>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fc fedc 	bl	8001198 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fc fed8 	bl	8001198 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	; 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e20b      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f6:	4b57      	ldr	r3, [pc, #348]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x104>
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d06f      	beq.n	80044f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004412:	4b50      	ldr	r3, [pc, #320]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b00      	cmp	r3, #0
 800441c:	d017      	beq.n	800444e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800441e:	4b4d      	ldr	r3, [pc, #308]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004426:	2b08      	cmp	r3, #8
 8004428:	d105      	bne.n	8004436 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800442a:	4b4a      	ldr	r3, [pc, #296]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b47      	ldr	r3, [pc, #284]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d11c      	bne.n	800447c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b44      	ldr	r3, [pc, #272]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	4b41      	ldr	r3, [pc, #260]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x186>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1d3      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4937      	ldr	r1, [pc, #220]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	e03a      	b.n	80044f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004484:	4b34      	ldr	r3, [pc, #208]	; (8004558 <HAL_RCC_OscConfig+0x278>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fc fe85 	bl	8001198 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004492:	f7fc fe81 	bl	8001198 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e1b4      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b28      	ldr	r3, [pc, #160]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4925      	ldr	r1, [pc, #148]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
 80044c4:	e015      	b.n	80044f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_RCC_OscConfig+0x278>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fc fe64 	bl	8001198 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d4:	f7fc fe60 	bl	8001198 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e193      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d036      	beq.n	800456c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004506:	4b15      	ldr	r3, [pc, #84]	; (800455c <HAL_RCC_OscConfig+0x27c>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fc fe44 	bl	8001198 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004514:	f7fc fe40 	bl	8001198 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e173      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_OscConfig+0x274>)
 8004528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x234>
 8004532:	e01b      	b.n	800456c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCC_OscConfig+0x27c>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453a:	f7fc fe2d 	bl	8001198 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	e00e      	b.n	8004560 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004542:	f7fc fe29 	bl	8001198 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d907      	bls.n	8004560 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e15c      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
 8004554:	40023800 	.word	0x40023800
 8004558:	42470000 	.word	0x42470000
 800455c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	4b8a      	ldr	r3, [pc, #552]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ea      	bne.n	8004542 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8097 	beq.w	80046a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457e:	4b83      	ldr	r3, [pc, #524]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	4b7f      	ldr	r3, [pc, #508]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	4a7e      	ldr	r2, [pc, #504]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	; 0x40
 800459a:	4b7c      	ldr	r3, [pc, #496]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045aa:	4b79      	ldr	r3, [pc, #484]	; (8004790 <HAL_RCC_OscConfig+0x4b0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d118      	bne.n	80045e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b6:	4b76      	ldr	r3, [pc, #472]	; (8004790 <HAL_RCC_OscConfig+0x4b0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a75      	ldr	r2, [pc, #468]	; (8004790 <HAL_RCC_OscConfig+0x4b0>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c2:	f7fc fde9 	bl	8001198 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ca:	f7fc fde5 	bl	8001198 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e118      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	4b6c      	ldr	r3, [pc, #432]	; (8004790 <HAL_RCC_OscConfig+0x4b0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x31e>
 80045f0:	4b66      	ldr	r3, [pc, #408]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	4a65      	ldr	r2, [pc, #404]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	6713      	str	r3, [r2, #112]	; 0x70
 80045fc:	e01c      	b.n	8004638 <HAL_RCC_OscConfig+0x358>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b05      	cmp	r3, #5
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0x340>
 8004606:	4b61      	ldr	r3, [pc, #388]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a60      	ldr	r2, [pc, #384]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
 8004612:	4b5e      	ldr	r3, [pc, #376]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a5d      	ldr	r2, [pc, #372]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0x358>
 8004620:	4b5a      	ldr	r3, [pc, #360]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a59      	ldr	r2, [pc, #356]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
 800462c:	4b57      	ldr	r3, [pc, #348]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a56      	ldr	r2, [pc, #344]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004632:	f023 0304 	bic.w	r3, r3, #4
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d015      	beq.n	800466c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fc fdaa 	bl	8001198 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004646:	e00a      	b.n	800465e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fc fda6 	bl	8001198 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0d7      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ee      	beq.n	8004648 <HAL_RCC_OscConfig+0x368>
 800466a:	e014      	b.n	8004696 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fc fd94 	bl	8001198 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004672:	e00a      	b.n	800468a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004674:	f7fc fd90 	bl	8001198 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0c1      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468a:	4b40      	ldr	r3, [pc, #256]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ee      	bne.n	8004674 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469c:	4b3b      	ldr	r3, [pc, #236]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	4a3a      	ldr	r2, [pc, #232]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 80046a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80ad 	beq.w	800480c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b2:	4b36      	ldr	r3, [pc, #216]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d060      	beq.n	8004780 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d145      	bne.n	8004752 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b33      	ldr	r3, [pc, #204]	; (8004794 <HAL_RCC_OscConfig+0x4b4>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fc fd64 	bl	8001198 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fc fd60 	bl	8001198 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e093      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	4b29      	ldr	r3, [pc, #164]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	3b01      	subs	r3, #1
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	071b      	lsls	r3, r3, #28
 800471e:	491b      	ldr	r1, [pc, #108]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004720:	4313      	orrs	r3, r2
 8004722:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004724:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_RCC_OscConfig+0x4b4>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fc fd35 	bl	8001198 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004732:	f7fc fd31 	bl	8001198 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e064      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x452>
 8004750:	e05c      	b.n	800480c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <HAL_RCC_OscConfig+0x4b4>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fc fd1e 	bl	8001198 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004760:	f7fc fd1a 	bl	8001198 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e04d      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCC_OscConfig+0x4ac>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x480>
 800477e:	e045      	b.n	800480c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e040      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
 800478c:	40023800 	.word	0x40023800
 8004790:	40007000 	.word	0x40007000
 8004794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004798:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <HAL_RCC_OscConfig+0x538>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d030      	beq.n	8004808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d129      	bne.n	8004808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047be:	429a      	cmp	r2, r3
 80047c0:	d122      	bne.n	8004808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047c8:	4013      	ands	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d119      	bne.n	8004808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	3b01      	subs	r3, #1
 80047e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d10f      	bne.n	8004808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d107      	bne.n	8004808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800

0800481c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e03f      	b.n	80048ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fc fb8a 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800485e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f829 	bl	80048b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b0c0      	sub	sp, #256	; 0x100
 80048be:	af00      	add	r7, sp, #0
 80048c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	ea40 0301 	orr.w	r3, r0, r1
 80048e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004910:	f021 010c 	bic.w	r1, r1, #12
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800491e:	430b      	orrs	r3, r1
 8004920:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	6999      	ldr	r1, [r3, #24]
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	ea40 0301 	orr.w	r3, r0, r1
 800493e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8f      	ldr	r3, [pc, #572]	; (8004b84 <UART_SetConfig+0x2cc>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d005      	beq.n	8004958 <UART_SetConfig+0xa0>
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b8d      	ldr	r3, [pc, #564]	; (8004b88 <UART_SetConfig+0x2d0>)
 8004954:	429a      	cmp	r2, r3
 8004956:	d104      	bne.n	8004962 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004958:	f7fe ff54 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 800495c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004960:	e003      	b.n	800496a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004962:	f7fe ff3b 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8004966:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	f040 810c 	bne.w	8004b90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004982:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800498a:	4622      	mov	r2, r4
 800498c:	462b      	mov	r3, r5
 800498e:	1891      	adds	r1, r2, r2
 8004990:	65b9      	str	r1, [r7, #88]	; 0x58
 8004992:	415b      	adcs	r3, r3
 8004994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004996:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800499a:	4621      	mov	r1, r4
 800499c:	eb12 0801 	adds.w	r8, r2, r1
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb43 0901 	adc.w	r9, r3, r1
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ba:	4690      	mov	r8, r2
 80049bc:	4699      	mov	r9, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	eb18 0303 	adds.w	r3, r8, r3
 80049c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049c8:	462b      	mov	r3, r5
 80049ca:	eb49 0303 	adc.w	r3, r9, r3
 80049ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049e6:	460b      	mov	r3, r1
 80049e8:	18db      	adds	r3, r3, r3
 80049ea:	653b      	str	r3, [r7, #80]	; 0x50
 80049ec:	4613      	mov	r3, r2
 80049ee:	eb42 0303 	adc.w	r3, r2, r3
 80049f2:	657b      	str	r3, [r7, #84]	; 0x54
 80049f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049fc:	f7fb fc02 	bl	8000204 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4b61      	ldr	r3, [pc, #388]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004a06:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	011c      	lsls	r4, r3, #4
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	1891      	adds	r1, r2, r2
 8004a26:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a28:	415b      	adcs	r3, r3
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a30:	4641      	mov	r1, r8
 8004a32:	eb12 0a01 	adds.w	sl, r2, r1
 8004a36:	4649      	mov	r1, r9
 8004a38:	eb43 0b01 	adc.w	fp, r3, r1
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a50:	4692      	mov	sl, r2
 8004a52:	469b      	mov	fp, r3
 8004a54:	4643      	mov	r3, r8
 8004a56:	eb1a 0303 	adds.w	r3, sl, r3
 8004a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	eb4b 0303 	adc.w	r3, fp, r3
 8004a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	18db      	adds	r3, r3, r3
 8004a80:	643b      	str	r3, [r7, #64]	; 0x40
 8004a82:	4613      	mov	r3, r2
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a92:	f7fb fbb7 	bl	8000204 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	; 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac0:	441c      	add	r4, r3
 8004ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004acc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ad0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	1891      	adds	r1, r2, r2
 8004ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8004adc:	415b      	adcs	r3, r3
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	1851      	adds	r1, r2, r1
 8004ae8:	6339      	str	r1, [r7, #48]	; 0x30
 8004aea:	4649      	mov	r1, r9
 8004aec:	414b      	adcs	r3, r1
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004afc:	4659      	mov	r1, fp
 8004afe:	00cb      	lsls	r3, r1, #3
 8004b00:	4651      	mov	r1, sl
 8004b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b06:	4651      	mov	r1, sl
 8004b08:	00ca      	lsls	r2, r1, #3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4642      	mov	r2, r8
 8004b12:	189b      	adds	r3, r3, r2
 8004b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b18:	464b      	mov	r3, r9
 8004b1a:	460a      	mov	r2, r1
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b38:	460b      	mov	r3, r1
 8004b3a:	18db      	adds	r3, r3, r3
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3e:	4613      	mov	r3, r2
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b4e:	f7fb fb59 	bl	8000204 <__aeabi_uldivmod>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004b58:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	2164      	movs	r1, #100	; 0x64
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3332      	adds	r3, #50	; 0x32
 8004b6a:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	f003 0207 	and.w	r2, r3, #7
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4422      	add	r2, r4
 8004b7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b80:	e105      	b.n	8004d8e <UART_SetConfig+0x4d6>
 8004b82:	bf00      	nop
 8004b84:	40011000 	.word	0x40011000
 8004b88:	40011400 	.word	0x40011400
 8004b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	1891      	adds	r1, r2, r2
 8004ba8:	6239      	str	r1, [r7, #32]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
 8004bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	1854      	adds	r4, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb43 0501 	adc.w	r5, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	00eb      	lsls	r3, r5, #3
 8004bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bca:	00e2      	lsls	r2, r4, #3
 8004bcc:	4614      	mov	r4, r2
 8004bce:	461d      	mov	r5, r3
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	18e3      	adds	r3, r4, r3
 8004bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bd8:	464b      	mov	r3, r9
 8004bda:	eb45 0303 	adc.w	r3, r5, r3
 8004bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bfe:	4629      	mov	r1, r5
 8004c00:	008b      	lsls	r3, r1, #2
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c08:	4621      	mov	r1, r4
 8004c0a:	008a      	lsls	r2, r1, #2
 8004c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c10:	f7fb faf8 	bl	8000204 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4b60      	ldr	r3, [pc, #384]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011c      	lsls	r4, r3, #4
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	61b9      	str	r1, [r7, #24]
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c44:	4641      	mov	r1, r8
 8004c46:	1851      	adds	r1, r2, r1
 8004c48:	6139      	str	r1, [r7, #16]
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	414b      	adcs	r3, r1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	00cb      	lsls	r3, r1, #3
 8004c60:	4651      	mov	r1, sl
 8004c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c66:	4651      	mov	r1, sl
 8004c68:	00ca      	lsls	r2, r1, #3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4642      	mov	r2, r8
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c78:	464b      	mov	r3, r9
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	eb42 0303 	adc.w	r3, r2, r3
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	008b      	lsls	r3, r1, #2
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	008a      	lsls	r2, r1, #2
 8004caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cae:	f7fb faa9 	bl	8000204 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	2164      	movs	r1, #100	; 0x64
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	3332      	adds	r3, #50	; 0x32
 8004cca:	4a34      	ldr	r2, [pc, #208]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd6:	441c      	add	r4, r3
 8004cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cdc:	2200      	movs	r2, #0
 8004cde:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ce2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	464b      	mov	r3, r9
 8004cea:	1891      	adds	r1, r2, r2
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	415b      	adcs	r3, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	1851      	adds	r1, r2, r1
 8004cfa:	6039      	str	r1, [r7, #0]
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	414b      	adcs	r3, r1
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d0e:	4659      	mov	r1, fp
 8004d10:	00cb      	lsls	r3, r1, #3
 8004d12:	4651      	mov	r1, sl
 8004d14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d18:	4651      	mov	r1, sl
 8004d1a:	00ca      	lsls	r2, r1, #3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4603      	mov	r3, r0
 8004d22:	4642      	mov	r2, r8
 8004d24:	189b      	adds	r3, r3, r2
 8004d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3c:	667a      	str	r2, [r7, #100]	; 0x64
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	008b      	lsls	r3, r1, #2
 8004d4e:	4641      	mov	r1, r8
 8004d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d54:	4641      	mov	r1, r8
 8004d56:	008a      	lsls	r2, r1, #2
 8004d58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d5c:	f7fb fa52 	bl	8000204 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004d66:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2164      	movs	r1, #100	; 0x64
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	; 0x32
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 020f 	and.w	r2, r3, #15
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4422      	add	r2, r4
 8004d8c:	609a      	str	r2, [r3, #8]
}
 8004d8e:	bf00      	nop
 8004d90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	51eb851f 	.word	0x51eb851f

08004da0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004da0:	b084      	sub	sp, #16
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	f107 001c 	add.w	r0, r7, #28
 8004dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d122      	bne.n	8004dfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d105      	bne.n	8004df2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f001 fbe8 	bl	80065c8 <USB_CoreReset>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
 8004dfc:	e01a      	b.n	8004e34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f001 fbdc 	bl	80065c8 <USB_CoreReset>
 8004e10:	4603      	mov	r3, r0
 8004e12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
 8004e26:	e005      	b.n	8004e34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d10b      	bne.n	8004e52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f043 0206 	orr.w	r2, r3, #6
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f043 0220 	orr.w	r2, r3, #32
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e5e:	b004      	add	sp, #16
 8004e60:	4770      	bx	lr
	...

08004e64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d165      	bne.n	8004f44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a41      	ldr	r2, [pc, #260]	; (8004f80 <USB_SetTurnaroundTime+0x11c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d906      	bls.n	8004e8e <USB_SetTurnaroundTime+0x2a>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a40      	ldr	r2, [pc, #256]	; (8004f84 <USB_SetTurnaroundTime+0x120>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d202      	bcs.n	8004e8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e88:	230f      	movs	r3, #15
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e062      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a3c      	ldr	r2, [pc, #240]	; (8004f84 <USB_SetTurnaroundTime+0x120>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d306      	bcc.n	8004ea4 <USB_SetTurnaroundTime+0x40>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4a3b      	ldr	r2, [pc, #236]	; (8004f88 <USB_SetTurnaroundTime+0x124>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d202      	bcs.n	8004ea4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e9e:	230e      	movs	r3, #14
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	e057      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a38      	ldr	r2, [pc, #224]	; (8004f88 <USB_SetTurnaroundTime+0x124>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d306      	bcc.n	8004eba <USB_SetTurnaroundTime+0x56>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a37      	ldr	r2, [pc, #220]	; (8004f8c <USB_SetTurnaroundTime+0x128>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d202      	bcs.n	8004eba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004eb4:	230d      	movs	r3, #13
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e04c      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a33      	ldr	r2, [pc, #204]	; (8004f8c <USB_SetTurnaroundTime+0x128>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d306      	bcc.n	8004ed0 <USB_SetTurnaroundTime+0x6c>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4a32      	ldr	r2, [pc, #200]	; (8004f90 <USB_SetTurnaroundTime+0x12c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d802      	bhi.n	8004ed0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004eca:	230c      	movs	r3, #12
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e041      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a2f      	ldr	r2, [pc, #188]	; (8004f90 <USB_SetTurnaroundTime+0x12c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d906      	bls.n	8004ee6 <USB_SetTurnaroundTime+0x82>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a2e      	ldr	r2, [pc, #184]	; (8004f94 <USB_SetTurnaroundTime+0x130>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d802      	bhi.n	8004ee6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ee0:	230b      	movs	r3, #11
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e036      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a2a      	ldr	r2, [pc, #168]	; (8004f94 <USB_SetTurnaroundTime+0x130>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d906      	bls.n	8004efc <USB_SetTurnaroundTime+0x98>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a29      	ldr	r2, [pc, #164]	; (8004f98 <USB_SetTurnaroundTime+0x134>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d802      	bhi.n	8004efc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ef6:	230a      	movs	r3, #10
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e02b      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a26      	ldr	r2, [pc, #152]	; (8004f98 <USB_SetTurnaroundTime+0x134>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d906      	bls.n	8004f12 <USB_SetTurnaroundTime+0xae>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a25      	ldr	r2, [pc, #148]	; (8004f9c <USB_SetTurnaroundTime+0x138>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d202      	bcs.n	8004f12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f0c:	2309      	movs	r3, #9
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e020      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a21      	ldr	r2, [pc, #132]	; (8004f9c <USB_SetTurnaroundTime+0x138>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d306      	bcc.n	8004f28 <USB_SetTurnaroundTime+0xc4>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <USB_SetTurnaroundTime+0x13c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d802      	bhi.n	8004f28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f22:	2308      	movs	r3, #8
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e015      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <USB_SetTurnaroundTime+0x13c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d906      	bls.n	8004f3e <USB_SetTurnaroundTime+0xda>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <USB_SetTurnaroundTime+0x140>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d202      	bcs.n	8004f3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f38:	2307      	movs	r3, #7
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e00a      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f3e:	2306      	movs	r3, #6
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	e007      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d102      	bne.n	8004f50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f4a:	2309      	movs	r3, #9
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e001      	b.n	8004f54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f50:	2309      	movs	r3, #9
 8004f52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	029b      	lsls	r3, r3, #10
 8004f68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	00d8acbf 	.word	0x00d8acbf
 8004f84:	00e4e1c0 	.word	0x00e4e1c0
 8004f88:	00f42400 	.word	0x00f42400
 8004f8c:	01067380 	.word	0x01067380
 8004f90:	011a499f 	.word	0x011a499f
 8004f94:	01312cff 	.word	0x01312cff
 8004f98:	014ca43f 	.word	0x014ca43f
 8004f9c:	016e3600 	.word	0x016e3600
 8004fa0:	01a6ab1f 	.word	0x01a6ab1f
 8004fa4:	01e84800 	.word	0x01e84800

08004fa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f043 0201 	orr.w	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f023 0201 	bic.w	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d115      	bne.n	800503a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800501a:	2001      	movs	r0, #1
 800501c:	f7fc f8c8 	bl	80011b0 <HAL_Delay>
      ms++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 fa3f 	bl	80064aa <USB_GetMode>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d01e      	beq.n	8005070 <USB_SetCurrentMode+0x84>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b31      	cmp	r3, #49	; 0x31
 8005036:	d9f0      	bls.n	800501a <USB_SetCurrentMode+0x2e>
 8005038:	e01a      	b.n	8005070 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d115      	bne.n	800506c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800504c:	2001      	movs	r0, #1
 800504e:	f7fc f8af 	bl	80011b0 <HAL_Delay>
      ms++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3301      	adds	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f001 fa26 	bl	80064aa <USB_GetMode>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <USB_SetCurrentMode+0x84>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b31      	cmp	r3, #49	; 0x31
 8005068:	d9f0      	bls.n	800504c <USB_SetCurrentMode+0x60>
 800506a:	e001      	b.n	8005070 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e005      	b.n	800507c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b32      	cmp	r3, #50	; 0x32
 8005074:	d101      	bne.n	800507a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005084:	b084      	sub	sp, #16
 8005086:	b580      	push	{r7, lr}
 8005088:	b086      	sub	sp, #24
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	e009      	b.n	80050b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	3340      	adds	r3, #64	; 0x40
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	2200      	movs	r2, #0
 80050b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3301      	adds	r3, #1
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b0e      	cmp	r3, #14
 80050bc:	d9f2      	bls.n	80050a4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11c      	bne.n	80050fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050d2:	f043 0302 	orr.w	r3, r3, #2
 80050d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e005      	b.n	800510a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005110:	461a      	mov	r2, r3
 8005112:	2300      	movs	r3, #0
 8005114:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	4619      	mov	r1, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	461a      	mov	r2, r3
 8005126:	680b      	ldr	r3, [r1, #0]
 8005128:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	2b01      	cmp	r3, #1
 800512e:	d10c      	bne.n	800514a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005136:	2100      	movs	r1, #0
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f965 	bl	8005408 <USB_SetDevSpeed>
 800513e:	e008      	b.n	8005152 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005140:	2101      	movs	r1, #1
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f960 	bl	8005408 <USB_SetDevSpeed>
 8005148:	e003      	b.n	8005152 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800514a:	2103      	movs	r1, #3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f95b 	bl	8005408 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005152:	2110      	movs	r1, #16
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8f3 	bl	8005340 <USB_FlushTxFifo>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f91f 	bl	80053a8 <USB_FlushRxFifo>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	461a      	mov	r2, r3
 800517c:	2300      	movs	r3, #0
 800517e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005198:	2300      	movs	r3, #0
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	e043      	b.n	8005226 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b4:	d118      	bne.n	80051e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	461a      	mov	r2, r3
 80051ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e013      	b.n	80051fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	461a      	mov	r2, r3
 80051e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e008      	b.n	80051fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	461a      	mov	r2, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	461a      	mov	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	461a      	mov	r2, r3
 800521a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800521e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	3301      	adds	r3, #1
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	429a      	cmp	r2, r3
 800522c:	d3b7      	bcc.n	800519e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e043      	b.n	80052bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800524a:	d118      	bne.n	800527e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	461a      	mov	r2, r3
 8005260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e013      	b.n	8005290 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	461a      	mov	r2, r3
 8005276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e008      	b.n	8005290 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	461a      	mov	r2, r3
 800528c:	2300      	movs	r3, #0
 800528e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	461a      	mov	r2, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	461a      	mov	r2, r3
 80052b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	3301      	adds	r3, #1
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d3b7      	bcc.n	8005234 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f043 0210 	orr.w	r2, r3, #16
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	4b0f      	ldr	r3, [pc, #60]	; (800533c <USB_DevInit+0x2b8>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f043 0208 	orr.w	r2, r3, #8
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d107      	bne.n	800532c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005324:	f043 0304 	orr.w	r3, r3, #4
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800532c:	7dfb      	ldrb	r3, [r7, #23]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005338:	b004      	add	sp, #16
 800533a:	4770      	bx	lr
 800533c:	803c3800 	.word	0x803c3800

08005340 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <USB_FlushTxFifo+0x64>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d901      	bls.n	8005360 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e01b      	b.n	8005398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	daf2      	bge.n	800534e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	019b      	lsls	r3, r3, #6
 8005370:	f043 0220 	orr.w	r2, r3, #32
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3301      	adds	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <USB_FlushTxFifo+0x64>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e006      	b.n	8005398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b20      	cmp	r3, #32
 8005394:	d0f0      	beq.n	8005378 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	00030d40 	.word	0x00030d40

080053a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4a11      	ldr	r2, [pc, #68]	; (8005404 <USB_FlushRxFifo+0x5c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e018      	b.n	80053f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	daf2      	bge.n	80053b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2210      	movs	r2, #16
 80053d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a08      	ldr	r2, [pc, #32]	; (8005404 <USB_FlushRxFifo+0x5c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e006      	b.n	80053f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d0f0      	beq.n	80053d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	00030d40 	.word	0x00030d40

08005408 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005428:	4313      	orrs	r3, r2
 800542a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800543a:	b480      	push	{r7}
 800543c:	b087      	sub	sp, #28
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0306 	and.w	r3, r3, #6
 8005452:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d102      	bne.n	8005460 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800545a:	2300      	movs	r3, #0
 800545c:	75fb      	strb	r3, [r7, #23]
 800545e:	e00a      	b.n	8005476 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d002      	beq.n	800546c <USB_GetDevSpeed+0x32>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d102      	bne.n	8005472 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800546c:	2302      	movs	r3, #2
 800546e:	75fb      	strb	r3, [r7, #23]
 8005470:	e001      	b.n	8005476 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005472:	230f      	movs	r3, #15
 8005474:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d13a      	bne.n	8005516 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	2101      	movs	r1, #1
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	68f9      	ldr	r1, [r7, #12]
 80054ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054be:	4313      	orrs	r3, r2
 80054c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d155      	bne.n	8005584 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	791b      	ldrb	r3, [r3, #4]
 80054f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	059b      	lsls	r3, r3, #22
 80054fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054fc:	4313      	orrs	r3, r2
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	e036      	b.n	8005584 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551c:	69da      	ldr	r2, [r3, #28]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005534:	4313      	orrs	r3, r2
 8005536:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d11a      	bne.n	8005584 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	791b      	ldrb	r3, [r3, #4]
 8005568:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800556a:	430b      	orrs	r3, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005582:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d161      	bne.n	8005674 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c6:	d11f      	bne.n	8005608 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005602:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005606:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	2101      	movs	r1, #1
 800561a:	fa01 f303 	lsl.w	r3, r1, r3
 800561e:	b29b      	uxth	r3, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005628:	4013      	ands	r3, r2
 800562a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	2101      	movs	r1, #1
 800563e:	fa01 f303 	lsl.w	r3, r1, r3
 8005642:	b29b      	uxth	r3, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800564c:	4013      	ands	r3, r2
 800564e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	0159      	lsls	r1, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	440b      	add	r3, r1
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	4619      	mov	r1, r3
 800566c:	4b35      	ldr	r3, [pc, #212]	; (8005744 <USB_DeactivateEndpoint+0x1b0>)
 800566e:	4013      	ands	r3, r2
 8005670:	600b      	str	r3, [r1, #0]
 8005672:	e060      	b.n	8005736 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800568a:	d11f      	bne.n	80056cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	0151      	lsls	r1, r2, #5
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	440a      	add	r2, r1
 80056a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	2101      	movs	r1, #1
 80056de:	fa01 f303 	lsl.w	r3, r1, r3
 80056e2:	041b      	lsls	r3, r3, #16
 80056e4:	43db      	mvns	r3, r3
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ec:	4013      	ands	r3, r2
 80056ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	2101      	movs	r1, #1
 8005702:	fa01 f303 	lsl.w	r3, r1, r3
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	43db      	mvns	r3, r3
 800570a:	68f9      	ldr	r1, [r7, #12]
 800570c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005710:	4013      	ands	r3, r2
 8005712:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	0159      	lsls	r1, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	440b      	add	r3, r1
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	4619      	mov	r1, r3
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <USB_DeactivateEndpoint+0x1b4>)
 8005732:	4013      	ands	r3, r2
 8005734:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	ec337800 	.word	0xec337800
 8005748:	eff37800 	.word	0xeff37800

0800574c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4613      	mov	r3, r2
 8005758:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b01      	cmp	r3, #1
 800576a:	f040 815c 	bne.w	8005a26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d132      	bne.n	80057dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d4:	0cdb      	lsrs	r3, r3, #19
 80057d6:	04db      	lsls	r3, r3, #19
 80057d8:	6113      	str	r3, [r2, #16]
 80057da:	e074      	b.n	80058c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f6:	0cdb      	lsrs	r3, r3, #19
 80057f8:	04db      	lsls	r3, r3, #19
 80057fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005816:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800581a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800581e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	440b      	add	r3, r1
 8005838:	1e59      	subs	r1, r3, #1
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005842:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005844:	4b9d      	ldr	r3, [pc, #628]	; (8005abc <USB_EPStartXfer+0x370>)
 8005846:	400b      	ands	r3, r1
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	0148      	lsls	r0, r1, #5
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	4401      	add	r1, r0
 8005850:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005854:	4313      	orrs	r3, r2
 8005856:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800586e:	69b9      	ldr	r1, [r7, #24]
 8005870:	0148      	lsls	r0, r1, #5
 8005872:	69f9      	ldr	r1, [r7, #28]
 8005874:	4401      	add	r1, r0
 8005876:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800587a:	4313      	orrs	r3, r2
 800587c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	791b      	ldrb	r3, [r3, #4]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d11f      	bne.n	80058c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80058a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d14b      	bne.n	8005964 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	461a      	mov	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	791b      	ldrb	r3, [r3, #4]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d128      	bne.n	8005942 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d110      	bne.n	8005922 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e00f      	b.n	8005942 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005940:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	440a      	add	r2, r1
 8005958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	e133      	b.n	8005bcc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	440a      	add	r2, r1
 800597a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005982:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	791b      	ldrb	r3, [r3, #4]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d015      	beq.n	80059b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 811b 	beq.w	8005bcc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	2101      	movs	r1, #1
 80059a8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ac:	69f9      	ldr	r1, [r7, #28]
 80059ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b2:	4313      	orrs	r3, r2
 80059b4:	634b      	str	r3, [r1, #52]	; 0x34
 80059b6:	e109      	b.n	8005bcc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d110      	bne.n	80059ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e00f      	b.n	8005a0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6919      	ldr	r1, [r3, #16]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	b298      	uxth	r0, r3
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fade 	bl	8005fe0 <USB_WritePacket>
 8005a24:	e0d2      	b.n	8005bcc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a40:	0cdb      	lsrs	r3, r3, #19
 8005a42:	04db      	lsls	r3, r3, #19
 8005a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d126      	bne.n	8005ac0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a88:	69b9      	ldr	r1, [r7, #24]
 8005a8a:	0148      	lsls	r0, r1, #5
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	4401      	add	r1, r0
 8005a90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a94:	4313      	orrs	r3, r2
 8005a96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab6:	6113      	str	r3, [r2, #16]
 8005ab8:	e03a      	b.n	8005b30 <USB_EPStartXfer+0x3e4>
 8005aba:	bf00      	nop
 8005abc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	1e5a      	subs	r2, r3, #1
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	8afa      	ldrh	r2, [r7, #22]
 8005adc:	fb03 f202 	mul.w	r2, r3, r2
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	8afb      	ldrh	r3, [r7, #22]
 8005af4:	04d9      	lsls	r1, r3, #19
 8005af6:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <USB_EPStartXfer+0x48c>)
 8005af8:	400b      	ands	r3, r1
 8005afa:	69b9      	ldr	r1, [r7, #24]
 8005afc:	0148      	lsls	r0, r1, #5
 8005afe:	69f9      	ldr	r1, [r7, #28]
 8005b00:	4401      	add	r1, r0
 8005b02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b06:	4313      	orrs	r3, r2
 8005b08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b20:	69b9      	ldr	r1, [r7, #24]
 8005b22:	0148      	lsls	r0, r1, #5
 8005b24:	69f9      	ldr	r1, [r7, #28]
 8005b26:	4401      	add	r1, r0
 8005b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10d      	bne.n	8005b52 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6919      	ldr	r1, [r3, #16]
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	460a      	mov	r2, r1
 8005b50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	791b      	ldrb	r3, [r3, #4]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d128      	bne.n	8005bac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d110      	bne.n	8005b8c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	e00f      	b.n	8005bac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005baa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	1ff80000 	.word	0x1ff80000

08005bdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	f040 80ce 	bne.w	8005d9a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d132      	bne.n	8005c6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c64:	0cdb      	lsrs	r3, r3, #19
 8005c66:	04db      	lsls	r3, r3, #19
 8005c68:	6113      	str	r3, [r2, #16]
 8005c6a:	e04e      	b.n	8005d0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c86:	0cdb      	lsrs	r3, r3, #19
 8005c88:	04db      	lsls	r3, r3, #19
 8005c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d903      	bls.n	8005cc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cfa:	6939      	ldr	r1, [r7, #16]
 8005cfc:	0148      	lsls	r0, r1, #5
 8005cfe:	6979      	ldr	r1, [r7, #20]
 8005d00:	4401      	add	r1, r0
 8005d02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d06:	4313      	orrs	r3, r2
 8005d08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d11e      	bne.n	8005d4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	461a      	mov	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e097      	b.n	8005e7e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8083 	beq.w	8005e7e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	2101      	movs	r1, #1
 8005d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8e:	6979      	ldr	r1, [r7, #20]
 8005d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d94:	4313      	orrs	r3, r2
 8005d96:	634b      	str	r3, [r1, #52]	; 0x34
 8005d98:	e071      	b.n	8005e7e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db4:	0cdb      	lsrs	r3, r3, #19
 8005db6:	04db      	lsls	r3, r3, #19
 8005db8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ddc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e2c:	6939      	ldr	r1, [r7, #16]
 8005e2e:	0148      	lsls	r0, r1, #5
 8005e30:	6979      	ldr	r1, [r7, #20]
 8005e32:	4401      	add	r1, r0
 8005e34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d10d      	bne.n	8005e5e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6919      	ldr	r1, [r3, #16]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d14a      	bne.n	8005f40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec2:	f040 8086 	bne.w	8005fd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	7812      	ldrb	r2, [r2, #0]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ee8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	7812      	ldrb	r2, [r2, #0]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3301      	adds	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d902      	bls.n	8005f24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]
          break;
 8005f22:	e056      	b.n	8005fd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f3c:	d0e7      	beq.n	8005f0e <USB_EPStopXfer+0x82>
 8005f3e:	e048      	b.n	8005fd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f58:	d13b      	bne.n	8005fd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d902      	bls.n	8005fb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fb6:	e00c      	b.n	8005fd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fd0:	d0e7      	beq.n	8005fa2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	; 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	4611      	mov	r1, r2
 8005fec:	461a      	mov	r2, r3
 8005fee:	460b      	mov	r3, r1
 8005ff0:	71fb      	strb	r3, [r7, #7]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d123      	bne.n	800604e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006006:	88bb      	ldrh	r3, [r7, #4]
 8006008:	3303      	adds	r3, #3
 800600a:	089b      	lsrs	r3, r3, #2
 800600c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	e018      	b.n	8006046 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	031a      	lsls	r2, r3, #12
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	4413      	add	r3, r2
 800601c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006020:	461a      	mov	r2, r3
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	3301      	adds	r3, #1
 800602c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	3301      	adds	r3, #1
 8006032:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	3301      	adds	r3, #1
 800603e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	3301      	adds	r3, #1
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	d3e2      	bcc.n	8006014 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3724      	adds	r7, #36	; 0x24
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800605c:	b480      	push	{r7}
 800605e:	b08b      	sub	sp, #44	; 0x2c
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	089b      	lsrs	r3, r3, #2
 8006076:	b29b      	uxth	r3, r3
 8006078:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006082:	2300      	movs	r3, #0
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	e014      	b.n	80060b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	601a      	str	r2, [r3, #0]
    pDest++;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	3301      	adds	r3, #1
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	3301      	adds	r3, #1
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	3301      	adds	r3, #1
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	3301      	adds	r3, #1
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	3301      	adds	r3, #1
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	6a3a      	ldr	r2, [r7, #32]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d3e6      	bcc.n	8006088 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060ba:	8bfb      	ldrh	r3, [r7, #30]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01e      	beq.n	80060fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ca:	461a      	mov	r2, r3
 80060cc:	f107 0310 	add.w	r3, r7, #16
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	701a      	strb	r2, [r3, #0]
      i++;
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	3301      	adds	r3, #1
 80060ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	3301      	adds	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060f2:	8bfb      	ldrh	r3, [r7, #30]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060f8:	8bfb      	ldrh	r3, [r7, #30]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1ea      	bne.n	80060d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006100:	4618      	mov	r0, r3
 8006102:	372c      	adds	r7, #44	; 0x2c
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d12c      	bne.n	8006182 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	db12      	blt.n	8006160 <USB_EPSetStall+0x54>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00f      	beq.n	8006160 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800615e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	e02b      	b.n	80061da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	db12      	blt.n	80061ba <USB_EPSetStall+0xae>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00f      	beq.n	80061ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d128      	bne.n	8006256 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006222:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	791b      	ldrb	r3, [r3, #4]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d003      	beq.n	8006234 <USB_EPClearStall+0x4c>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	791b      	ldrb	r3, [r3, #4]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d138      	bne.n	80062a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	e027      	b.n	80062a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006270:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006274:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	791b      	ldrb	r3, [r3, #4]
 800627a:	2b03      	cmp	r3, #3
 800627c:	d003      	beq.n	8006286 <USB_EPClearStall+0x9e>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	791b      	ldrb	r3, [r3, #4]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d10f      	bne.n	80062a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062e8:	68f9      	ldr	r1, [r7, #12]
 80062ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ee:	4313      	orrs	r3, r2
 80062f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800631a:	f023 0303 	bic.w	r3, r3, #3
 800631e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800632e:	f023 0302 	bic.w	r3, r3, #2
 8006332:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800635c:	f023 0303 	bic.w	r3, r3, #3
 8006360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006370:	f043 0302 	orr.w	r3, r3, #2
 8006374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4013      	ands	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	4013      	ands	r3, r2
 80063cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	0c1b      	lsrs	r3, r3, #16
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	4013      	ands	r3, r2
 8006400:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	b29b      	uxth	r3, r3
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006422:	78fb      	ldrb	r3, [r7, #3]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4013      	ands	r3, r2
 800643e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006440:	68bb      	ldr	r3, [r7, #8]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800644e:	b480      	push	{r7}
 8006450:	b087      	sub	sp, #28
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006470:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	fa22 f303 	lsr.w	r3, r2, r3
 800647e:	01db      	lsls	r3, r3, #7
 8006480:	b2db      	uxtb	r3, r3
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4013      	ands	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800649c:	68bb      	ldr	r3, [r7, #8]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f003 0301 	and.w	r3, r3, #1
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b085      	sub	sp, #20
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064e4:	f023 0307 	bic.w	r3, r3, #7
 80064e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	460b      	mov	r3, r1
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	333c      	adds	r3, #60	; 0x3c
 8006522:	3304      	adds	r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <USB_EP0_OutStart+0xb8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d90a      	bls.n	8006546 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800653c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006540:	d101      	bne.n	8006546 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	e037      	b.n	80065b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	461a      	mov	r2, r3
 800654e:	2300      	movs	r3, #0
 8006550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006574:	f043 0318 	orr.w	r3, r3, #24
 8006578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006588:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800658c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10f      	bne.n	80065b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	4f54300a 	.word	0x4f54300a

080065c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4a13      	ldr	r2, [pc, #76]	; (800662c <USB_CoreReset+0x64>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e01b      	b.n	800661e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	daf2      	bge.n	80065d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f043 0201 	orr.w	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4a09      	ldr	r2, [pc, #36]	; (800662c <USB_CoreReset+0x64>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d901      	bls.n	8006610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e006      	b.n	800661e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d0f0      	beq.n	80065fe <USB_CoreReset+0x36>

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	00030d40 	.word	0x00030d40

08006630 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006634:	bf00      	nop
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af04      	add	r7, sp, #16
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800664a:	f04f 33ff 	mov.w	r3, #4294967295
 800664e:	9302      	str	r3, [sp, #8]
 8006650:	2301      	movs	r3, #1
 8006652:	9301      	str	r3, [sp, #4]
 8006654:	1dfb      	adds	r3, r7, #7
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2301      	movs	r3, #1
 800665a:	2200      	movs	r2, #0
 800665c:	2178      	movs	r1, #120	; 0x78
 800665e:	4803      	ldr	r0, [pc, #12]	; (800666c <ssd1306_WriteCommand+0x2c>)
 8006660:	f7fb fa02 	bl	8001a68 <HAL_I2C_Mem_Write>
}
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20000120 	.word	0x20000120

08006670 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af04      	add	r7, sp, #16
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	9202      	str	r2, [sp, #8]
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	2301      	movs	r3, #1
 800668c:	2240      	movs	r2, #64	; 0x40
 800668e:	2178      	movs	r1, #120	; 0x78
 8006690:	4803      	ldr	r0, [pc, #12]	; (80066a0 <ssd1306_WriteData+0x30>)
 8006692:	f7fb f9e9 	bl	8001a68 <HAL_I2C_Mem_Write>
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000120 	.word	0x20000120

080066a4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80066a8:	f7ff ffc2 	bl	8006630 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80066ac:	2064      	movs	r0, #100	; 0x64
 80066ae:	f7fa fd7f 	bl	80011b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80066b2:	2000      	movs	r0, #0
 80066b4:	f000 fad2 	bl	8006c5c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80066b8:	2020      	movs	r0, #32
 80066ba:	f7ff ffc1 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80066be:	2000      	movs	r0, #0
 80066c0:	f7ff ffbe 	bl	8006640 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80066c4:	20b0      	movs	r0, #176	; 0xb0
 80066c6:	f7ff ffbb 	bl	8006640 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80066ca:	20c8      	movs	r0, #200	; 0xc8
 80066cc:	f7ff ffb8 	bl	8006640 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80066d0:	2000      	movs	r0, #0
 80066d2:	f7ff ffb5 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80066d6:	2010      	movs	r0, #16
 80066d8:	f7ff ffb2 	bl	8006640 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80066dc:	2040      	movs	r0, #64	; 0x40
 80066de:	f7ff ffaf 	bl	8006640 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80066e2:	20ff      	movs	r0, #255	; 0xff
 80066e4:	f000 faa6 	bl	8006c34 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80066e8:	20a1      	movs	r0, #161	; 0xa1
 80066ea:	f7ff ffa9 	bl	8006640 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80066ee:	20a6      	movs	r0, #166	; 0xa6
 80066f0:	f7ff ffa6 	bl	8006640 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80066f4:	20a8      	movs	r0, #168	; 0xa8
 80066f6:	f7ff ffa3 	bl	8006640 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80066fa:	203f      	movs	r0, #63	; 0x3f
 80066fc:	f7ff ffa0 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006700:	20a4      	movs	r0, #164	; 0xa4
 8006702:	f7ff ff9d 	bl	8006640 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006706:	20d3      	movs	r0, #211	; 0xd3
 8006708:	f7ff ff9a 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800670c:	2000      	movs	r0, #0
 800670e:	f7ff ff97 	bl	8006640 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006712:	20d5      	movs	r0, #213	; 0xd5
 8006714:	f7ff ff94 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006718:	20f0      	movs	r0, #240	; 0xf0
 800671a:	f7ff ff91 	bl	8006640 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800671e:	20d9      	movs	r0, #217	; 0xd9
 8006720:	f7ff ff8e 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006724:	2022      	movs	r0, #34	; 0x22
 8006726:	f7ff ff8b 	bl	8006640 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800672a:	20da      	movs	r0, #218	; 0xda
 800672c:	f7ff ff88 	bl	8006640 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006730:	2012      	movs	r0, #18
 8006732:	f7ff ff85 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006736:	20db      	movs	r0, #219	; 0xdb
 8006738:	f7ff ff82 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800673c:	2020      	movs	r0, #32
 800673e:	f7ff ff7f 	bl	8006640 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006742:	208d      	movs	r0, #141	; 0x8d
 8006744:	f7ff ff7c 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006748:	2014      	movs	r0, #20
 800674a:	f7ff ff79 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800674e:	2001      	movs	r0, #1
 8006750:	f000 fa84 	bl	8006c5c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006754:	2000      	movs	r0, #0
 8006756:	f000 f80f 	bl	8006778 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800675a:	f000 f825 	bl	80067a8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800675e:	4b05      	ldr	r3, [pc, #20]	; (8006774 <ssd1306_Init+0xd0>)
 8006760:	2200      	movs	r2, #0
 8006762:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006764:	4b03      	ldr	r3, [pc, #12]	; (8006774 <ssd1306_Init+0xd0>)
 8006766:	2200      	movs	r2, #0
 8006768:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800676a:	4b02      	ldr	r3, [pc, #8]	; (8006774 <ssd1306_Init+0xd0>)
 800676c:	2201      	movs	r2, #1
 800676e:	711a      	strb	r2, [r3, #4]
}
 8006770:	bf00      	nop
 8006772:	bd80      	pop	{r7, pc}
 8006774:	200005c4 	.word	0x200005c4

08006778 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <ssd1306_Fill+0x14>
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <ssd1306_Fill+0x16>
 800678c:	23ff      	movs	r3, #255	; 0xff
 800678e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006792:	4619      	mov	r1, r3
 8006794:	4803      	ldr	r0, [pc, #12]	; (80067a4 <ssd1306_Fill+0x2c>)
 8006796:	f002 fc6f 	bl	8009078 <memset>
}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200001c4 	.word	0x200001c4

080067a8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80067ae:	2300      	movs	r3, #0
 80067b0:	71fb      	strb	r3, [r7, #7]
 80067b2:	e016      	b.n	80067e2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	3b50      	subs	r3, #80	; 0x50
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff ff40 	bl	8006640 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80067c0:	2000      	movs	r0, #0
 80067c2:	f7ff ff3d 	bl	8006640 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80067c6:	2010      	movs	r0, #16
 80067c8:	f7ff ff3a 	bl	8006640 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	01db      	lsls	r3, r3, #7
 80067d0:	4a08      	ldr	r2, [pc, #32]	; (80067f4 <ssd1306_UpdateScreen+0x4c>)
 80067d2:	4413      	add	r3, r2
 80067d4:	2180      	movs	r1, #128	; 0x80
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff ff4a 	bl	8006670 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	3301      	adds	r3, #1
 80067e0:	71fb      	strb	r3, [r7, #7]
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	2b07      	cmp	r3, #7
 80067e6:	d9e5      	bls.n	80067b4 <ssd1306_UpdateScreen+0xc>
    }
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	200001c4 	.word	0x200001c4

080067f8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	71fb      	strb	r3, [r7, #7]
 8006802:	460b      	mov	r3, r1
 8006804:	71bb      	strb	r3, [r7, #6]
 8006806:	4613      	mov	r3, r2
 8006808:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800680a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680e:	2b00      	cmp	r3, #0
 8006810:	db3d      	blt.n	800688e <ssd1306_DrawPixel+0x96>
 8006812:	79bb      	ldrb	r3, [r7, #6]
 8006814:	2b3f      	cmp	r3, #63	; 0x3f
 8006816:	d83a      	bhi.n	800688e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006818:	797b      	ldrb	r3, [r7, #5]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d11a      	bne.n	8006854 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800681e:	79fa      	ldrb	r2, [r7, #7]
 8006820:	79bb      	ldrb	r3, [r7, #6]
 8006822:	08db      	lsrs	r3, r3, #3
 8006824:	b2d8      	uxtb	r0, r3
 8006826:	4603      	mov	r3, r0
 8006828:	01db      	lsls	r3, r3, #7
 800682a:	4413      	add	r3, r2
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <ssd1306_DrawPixel+0xa4>)
 800682e:	5cd3      	ldrb	r3, [r2, r3]
 8006830:	b25a      	sxtb	r2, r3
 8006832:	79bb      	ldrb	r3, [r7, #6]
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	2101      	movs	r1, #1
 800683a:	fa01 f303 	lsl.w	r3, r1, r3
 800683e:	b25b      	sxtb	r3, r3
 8006840:	4313      	orrs	r3, r2
 8006842:	b259      	sxtb	r1, r3
 8006844:	79fa      	ldrb	r2, [r7, #7]
 8006846:	4603      	mov	r3, r0
 8006848:	01db      	lsls	r3, r3, #7
 800684a:	4413      	add	r3, r2
 800684c:	b2c9      	uxtb	r1, r1
 800684e:	4a13      	ldr	r2, [pc, #76]	; (800689c <ssd1306_DrawPixel+0xa4>)
 8006850:	54d1      	strb	r1, [r2, r3]
 8006852:	e01d      	b.n	8006890 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006854:	79fa      	ldrb	r2, [r7, #7]
 8006856:	79bb      	ldrb	r3, [r7, #6]
 8006858:	08db      	lsrs	r3, r3, #3
 800685a:	b2d8      	uxtb	r0, r3
 800685c:	4603      	mov	r3, r0
 800685e:	01db      	lsls	r3, r3, #7
 8006860:	4413      	add	r3, r2
 8006862:	4a0e      	ldr	r2, [pc, #56]	; (800689c <ssd1306_DrawPixel+0xa4>)
 8006864:	5cd3      	ldrb	r3, [r2, r3]
 8006866:	b25a      	sxtb	r2, r3
 8006868:	79bb      	ldrb	r3, [r7, #6]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	2101      	movs	r1, #1
 8006870:	fa01 f303 	lsl.w	r3, r1, r3
 8006874:	b25b      	sxtb	r3, r3
 8006876:	43db      	mvns	r3, r3
 8006878:	b25b      	sxtb	r3, r3
 800687a:	4013      	ands	r3, r2
 800687c:	b259      	sxtb	r1, r3
 800687e:	79fa      	ldrb	r2, [r7, #7]
 8006880:	4603      	mov	r3, r0
 8006882:	01db      	lsls	r3, r3, #7
 8006884:	4413      	add	r3, r2
 8006886:	b2c9      	uxtb	r1, r1
 8006888:	4a04      	ldr	r2, [pc, #16]	; (800689c <ssd1306_DrawPixel+0xa4>)
 800688a:	54d1      	strb	r1, [r2, r3]
 800688c:	e000      	b.n	8006890 <ssd1306_DrawPixel+0x98>
        return;
 800688e:	bf00      	nop
    }
}
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	200001c4 	.word	0x200001c4

080068a0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80068a0:	b590      	push	{r4, r7, lr}
 80068a2:	b089      	sub	sp, #36	; 0x24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4604      	mov	r4, r0
 80068a8:	4638      	mov	r0, r7
 80068aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80068ae:	4623      	mov	r3, r4
 80068b0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b1f      	cmp	r3, #31
 80068b6:	d902      	bls.n	80068be <ssd1306_WriteChar+0x1e>
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	2b7e      	cmp	r3, #126	; 0x7e
 80068bc:	d901      	bls.n	80068c2 <ssd1306_WriteChar+0x22>
        return 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	e079      	b.n	80069b6 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80068c2:	4b3f      	ldr	r3, [pc, #252]	; (80069c0 <ssd1306_WriteChar+0x120>)
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	783b      	ldrb	r3, [r7, #0]
 80068ca:	4413      	add	r3, r2
 80068cc:	2b80      	cmp	r3, #128	; 0x80
 80068ce:	dc06      	bgt.n	80068de <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80068d0:	4b3b      	ldr	r3, [pc, #236]	; (80069c0 <ssd1306_WriteChar+0x120>)
 80068d2:	885b      	ldrh	r3, [r3, #2]
 80068d4:	461a      	mov	r2, r3
 80068d6:	787b      	ldrb	r3, [r7, #1]
 80068d8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80068da:	2b40      	cmp	r3, #64	; 0x40
 80068dc:	dd01      	ble.n	80068e2 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	e069      	b.n	80069b6 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e04e      	b.n	8006986 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	3b20      	subs	r3, #32
 80068ee:	7879      	ldrb	r1, [r7, #1]
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	4619      	mov	r1, r3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	440b      	add	r3, r1
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e036      	b.n	8006976 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d013      	beq.n	8006940 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006918:	4b29      	ldr	r3, [pc, #164]	; (80069c0 <ssd1306_WriteChar+0x120>)
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b2da      	uxtb	r2, r3
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	4413      	add	r3, r2
 8006924:	b2d8      	uxtb	r0, r3
 8006926:	4b26      	ldr	r3, [pc, #152]	; (80069c0 <ssd1306_WriteChar+0x120>)
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	4413      	add	r3, r2
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006938:	4619      	mov	r1, r3
 800693a:	f7ff ff5d 	bl	80067f8 <ssd1306_DrawPixel>
 800693e:	e017      	b.n	8006970 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006940:	4b1f      	ldr	r3, [pc, #124]	; (80069c0 <ssd1306_WriteChar+0x120>)
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	4413      	add	r3, r2
 800694c:	b2d8      	uxtb	r0, r3
 800694e:	4b1c      	ldr	r3, [pc, #112]	; (80069c0 <ssd1306_WriteChar+0x120>)
 8006950:	885b      	ldrh	r3, [r3, #2]
 8006952:	b2da      	uxtb	r2, r3
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	4413      	add	r3, r2
 800695a:	b2d9      	uxtb	r1, r3
 800695c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006960:	2b00      	cmp	r3, #0
 8006962:	bf0c      	ite	eq
 8006964:	2301      	moveq	r3, #1
 8006966:	2300      	movne	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	f7ff ff44 	bl	80067f8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	3301      	adds	r3, #1
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	783b      	ldrb	r3, [r7, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	4293      	cmp	r3, r2
 800697e:	d3c3      	bcc.n	8006908 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	787b      	ldrb	r3, [r7, #1]
 8006988:	461a      	mov	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4293      	cmp	r3, r2
 800698e:	d3ab      	bcc.n	80068e8 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <ssd1306_WriteChar+0x120>)
 8006992:	881a      	ldrh	r2, [r3, #0]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d006      	beq.n	80069a8 <ssd1306_WriteChar+0x108>
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	3b20      	subs	r3, #32
 80069a0:	440b      	add	r3, r1
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	e001      	b.n	80069ac <ssd1306_WriteChar+0x10c>
 80069a8:	783b      	ldrb	r3, [r7, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	4413      	add	r3, r2
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <ssd1306_WriteChar+0x120>)
 80069b2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3724      	adds	r7, #36	; 0x24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd90      	pop	{r4, r7, pc}
 80069be:	bf00      	nop
 80069c0:	200005c4 	.word	0x200005c4

080069c4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	4638      	mov	r0, r7
 80069ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80069d2:	e013      	b.n	80069fc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	7818      	ldrb	r0, [r3, #0]
 80069d8:	7e3b      	ldrb	r3, [r7, #24]
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	463b      	mov	r3, r7
 80069de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069e0:	f7ff ff5e 	bl	80068a0 <ssd1306_WriteChar>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d002      	beq.n	80069f6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	e008      	b.n	8006a08 <ssd1306_WriteString+0x44>
        }
        str++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3301      	adds	r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e7      	bne.n	80069d4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	781b      	ldrb	r3, [r3, #0]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	460a      	mov	r2, r1
 8006a1a:	71fb      	strb	r3, [r7, #7]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <ssd1306_SetCursor+0x2c>)
 8006a26:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006a28:	79bb      	ldrb	r3, [r7, #6]
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <ssd1306_SetCursor+0x2c>)
 8006a2e:	805a      	strh	r2, [r3, #2]
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	200005c4 	.word	0x200005c4

08006a40 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8006a40:	b590      	push	{r4, r7, lr}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4623      	mov	r3, r4
 8006a50:	71fb      	strb	r3, [r7, #7]
 8006a52:	4603      	mov	r3, r0
 8006a54:	71bb      	strb	r3, [r7, #6]
 8006a56:	460b      	mov	r3, r1
 8006a58:	717b      	strb	r3, [r7, #5]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8006a5e:	797b      	ldrb	r3, [r7, #5]
 8006a60:	425b      	negs	r3, r3
 8006a62:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8006a68:	797b      	ldrb	r3, [r7, #5]
 8006a6a:	f1c3 0301 	rsb	r3, r3, #1
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8006a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	db65      	blt.n	8006b46 <ssd1306_DrawCircle+0x106>
 8006a7a:	79bb      	ldrb	r3, [r7, #6]
 8006a7c:	2b3f      	cmp	r3, #63	; 0x3f
 8006a7e:	d862      	bhi.n	8006b46 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	79fa      	ldrb	r2, [r7, #7]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	b2d8      	uxtb	r0, r3
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	79bb      	ldrb	r3, [r7, #6]
 8006a90:	4413      	add	r3, r2
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	793a      	ldrb	r2, [r7, #4]
 8006a96:	4619      	mov	r1, r3
 8006a98:	f7ff feae 	bl	80067f8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	b2d8      	uxtb	r0, r3
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	79bb      	ldrb	r3, [r7, #6]
 8006aac:	4413      	add	r3, r2
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	793a      	ldrb	r2, [r7, #4]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f7ff fea0 	bl	80067f8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	79fb      	ldrb	r3, [r7, #7]
 8006abe:	4413      	add	r3, r2
 8006ac0:	b2d8      	uxtb	r0, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	79ba      	ldrb	r2, [r7, #6]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	793a      	ldrb	r2, [r7, #4]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f7ff fe92 	bl	80067f8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	79fa      	ldrb	r2, [r7, #7]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	b2d8      	uxtb	r0, r3
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	79ba      	ldrb	r2, [r7, #6]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	793a      	ldrb	r2, [r7, #4]
 8006aea:	4619      	mov	r1, r3
 8006aec:	f7ff fe84 	bl	80067f8 <ssd1306_DrawPixel>
        e2 = err;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	dc13      	bgt.n	8006b24 <ssd1306_DrawCircle+0xe4>
            y++;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	3301      	adds	r3, #1
 8006b00:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	3301      	adds	r3, #1
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	425b      	negs	r3, r3
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d105      	bne.n	8006b24 <ssd1306_DrawCircle+0xe4>
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	dc01      	bgt.n	8006b24 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	dd08      	ble.n	8006b3e <ssd1306_DrawCircle+0xfe>
            x++;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	3301      	adds	r3, #1
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dd9d      	ble.n	8006a80 <ssd1306_DrawCircle+0x40>

    return;
 8006b44:	e000      	b.n	8006b48 <ssd1306_DrawCircle+0x108>
        return;
 8006b46:	bf00      	nop
}
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd90      	pop	{r4, r7, pc}

08006b4e <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8006b4e:	b590      	push	{r4, r7, lr}
 8006b50:	b089      	sub	sp, #36	; 0x24
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	4604      	mov	r4, r0
 8006b56:	4608      	mov	r0, r1
 8006b58:	4611      	mov	r1, r2
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4623      	mov	r3, r4
 8006b5e:	71fb      	strb	r3, [r7, #7]
 8006b60:	4603      	mov	r3, r0
 8006b62:	71bb      	strb	r3, [r7, #6]
 8006b64:	460b      	mov	r3, r1
 8006b66:	717b      	strb	r3, [r7, #5]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8006b6c:	797b      	ldrb	r3, [r7, #5]
 8006b6e:	425b      	negs	r3, r3
 8006b70:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8006b76:	797b      	ldrb	r3, [r7, #5]
 8006b78:	f1c3 0301 	rsb	r3, r3, #1
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8006b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	db51      	blt.n	8006c2c <ssd1306_FillCircle+0xde>
 8006b88:	79bb      	ldrb	r3, [r7, #6]
 8006b8a:	2b3f      	cmp	r3, #63	; 0x3f
 8006b8c:	d84e      	bhi.n	8006c2c <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	79bb      	ldrb	r3, [r7, #6]
 8006b94:	4413      	add	r3, r2
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e017      	b.n	8006bca <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	79fa      	ldrb	r2, [r7, #7]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	73bb      	strb	r3, [r7, #14]
 8006ba4:	e008      	b.n	8006bb8 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8006ba6:	793a      	ldrb	r2, [r7, #4]
 8006ba8:	7bf9      	ldrb	r1, [r7, #15]
 8006baa:	7bbb      	ldrb	r3, [r7, #14]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff fe23 	bl	80067f8 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	73bb      	strb	r3, [r7, #14]
 8006bb8:	7bba      	ldrb	r2, [r7, #14]
 8006bba:	79f9      	ldrb	r1, [r7, #7]
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	440b      	add	r3, r1
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	daf0      	bge.n	8006ba6 <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	73fb      	strb	r3, [r7, #15]
 8006bca:	7bfa      	ldrb	r2, [r7, #15]
 8006bcc:	79b9      	ldrb	r1, [r7, #6]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	1acb      	subs	r3, r1, r3
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	dae1      	bge.n	8006b9a <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	dc13      	bgt.n	8006c0a <ssd1306_FillCircle+0xbc>
            y++;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3301      	adds	r3, #1
 8006be6:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	3301      	adds	r3, #1
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	425b      	negs	r3, r3
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d105      	bne.n	8006c0a <ssd1306_FillCircle+0xbc>
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	dc01      	bgt.n	8006c0a <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	dd08      	ble.n	8006c24 <ssd1306_FillCircle+0xd6>
            x++;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	3301      	adds	r3, #1
 8006c16:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4413      	add	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	ddb1      	ble.n	8006b8e <ssd1306_FillCircle+0x40>

    return;
 8006c2a:	e000      	b.n	8006c2e <ssd1306_FillCircle+0xe0>
        return;
 8006c2c:	bf00      	nop
}
 8006c2e:	3724      	adds	r7, #36	; 0x24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd90      	pop	{r4, r7, pc}

08006c34 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006c3e:	2381      	movs	r3, #129	; 0x81
 8006c40:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fcfb 	bl	8006640 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fcf7 	bl	8006640 <ssd1306_WriteCommand>
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006c6c:	23af      	movs	r3, #175	; 0xaf
 8006c6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8006c70:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <ssd1306_SetDisplayOn+0x38>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	715a      	strb	r2, [r3, #5]
 8006c76:	e004      	b.n	8006c82 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006c78:	23ae      	movs	r3, #174	; 0xae
 8006c7a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <ssd1306_SetDisplayOn+0x38>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fcdb 	bl	8006640 <ssd1306_WriteCommand>
}
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	200005c4 	.word	0x200005c4

08006c98 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006ca4:	2010      	movs	r0, #16
 8006ca6:	f002 f97f 	bl	8008fa8 <USBD_static_malloc>
 8006caa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	32b0      	adds	r2, #176	; 0xb0
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e048      	b.n	8006d58 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	32b0      	adds	r2, #176	; 0xb0
 8006cd0:	68f9      	ldr	r1, [r7, #12]
 8006cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	32b0      	adds	r2, #176	; 0xb0
 8006ce0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	7c1b      	ldrb	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10d      	bne.n	8006d0e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006cf2:	4b1b      	ldr	r3, [pc, #108]	; (8006d60 <USBD_HID_Init+0xc8>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f003 020f 	and.w	r2, r3, #15
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	3326      	adds	r3, #38	; 0x26
 8006d08:	2207      	movs	r2, #7
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e00c      	b.n	8006d28 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006d0e:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <USBD_HID_Init+0xc8>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f003 020f 	and.w	r2, r3, #15
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	440b      	add	r3, r1
 8006d22:	3326      	adds	r3, #38	; 0x26
 8006d24:	2201      	movs	r2, #1
 8006d26:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006d28:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <USBD_HID_Init+0xc8>)
 8006d2a:	7819      	ldrb	r1, [r3, #0]
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	2203      	movs	r2, #3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 ffda 	bl	8008cea <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006d36:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <USBD_HID_Init+0xc8>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	f003 020f 	and.w	r2, r3, #15
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	440b      	add	r3, r1
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	200000a9 	.word	0x200000a9

08006d64 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006d70:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <USBD_HID_DeInit+0x8c>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 ffdd 	bl	8008d36 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8006d7c:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <USBD_HID_DeInit+0x8c>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	f003 020f 	and.w	r2, r3, #15
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	440b      	add	r3, r1
 8006d90:	3324      	adds	r3, #36	; 0x24
 8006d92:	2200      	movs	r2, #0
 8006d94:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006d96:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <USBD_HID_DeInit+0x8c>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	f003 020f 	and.w	r2, r3, #15
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	3326      	adds	r3, #38	; 0x26
 8006dac:	2200      	movs	r2, #0
 8006dae:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32b0      	adds	r2, #176	; 0xb0
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d011      	beq.n	8006de6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	32b0      	adds	r2, #176	; 0xb0
 8006dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f002 f8f7 	bl	8008fc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	32b0      	adds	r2, #176	; 0xb0
 8006de0:	2100      	movs	r1, #0
 8006de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	200000a9 	.word	0x200000a9

08006df4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	32b0      	adds	r2, #176	; 0xb0
 8006e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e0e8      	b.n	8006ff2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d046      	beq.n	8006eba <USBD_HID_Setup+0xc6>
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	f040 80d8 	bne.w	8006fe2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	3b02      	subs	r3, #2
 8006e38:	2b09      	cmp	r3, #9
 8006e3a:	d836      	bhi.n	8006eaa <USBD_HID_Setup+0xb6>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <USBD_HID_Setup+0x50>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e9b 	.word	0x08006e9b
 8006e48:	08006e7b 	.word	0x08006e7b
 8006e4c:	08006eab 	.word	0x08006eab
 8006e50:	08006eab 	.word	0x08006eab
 8006e54:	08006eab 	.word	0x08006eab
 8006e58:	08006eab 	.word	0x08006eab
 8006e5c:	08006eab 	.word	0x08006eab
 8006e60:	08006eab 	.word	0x08006eab
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006e6d 	.word	0x08006e6d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	885b      	ldrh	r3, [r3, #2]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	601a      	str	r2, [r3, #0]
          break;
 8006e78:	e01e      	b.n	8006eb8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 fbd5 	bl	8008630 <USBD_CtlSendData>
          break;
 8006e86:	e017      	b.n	8006eb8 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	885b      	ldrh	r3, [r3, #2]
 8006e8c:	0a1b      	lsrs	r3, r3, #8
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	605a      	str	r2, [r3, #4]
          break;
 8006e98:	e00e      	b.n	8006eb8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 fbc4 	bl	8008630 <USBD_CtlSendData>
          break;
 8006ea8:	e006      	b.n	8006eb8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 fb4e 	bl	800854e <USBD_CtlError>
          ret = USBD_FAIL;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb6:	bf00      	nop
      }
      break;
 8006eb8:	e09a      	b.n	8006ff0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b0b      	cmp	r3, #11
 8006ec0:	f200 8086 	bhi.w	8006fd0 <USBD_HID_Setup+0x1dc>
 8006ec4:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <USBD_HID_Setup+0xd8>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006efd 	.word	0x08006efd
 8006ed0:	08006fdf 	.word	0x08006fdf
 8006ed4:	08006fd1 	.word	0x08006fd1
 8006ed8:	08006fd1 	.word	0x08006fd1
 8006edc:	08006fd1 	.word	0x08006fd1
 8006ee0:	08006fd1 	.word	0x08006fd1
 8006ee4:	08006f27 	.word	0x08006f27
 8006ee8:	08006fd1 	.word	0x08006fd1
 8006eec:	08006fd1 	.word	0x08006fd1
 8006ef0:	08006fd1 	.word	0x08006fd1
 8006ef4:	08006f7f 	.word	0x08006f7f
 8006ef8:	08006fa9 	.word	0x08006fa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d107      	bne.n	8006f18 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f08:	f107 030a 	add.w	r3, r7, #10
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 fb8d 	bl	8008630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f16:	e063      	b.n	8006fe0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fb17 	bl	800854e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f20:	2303      	movs	r3, #3
 8006f22:	75fb      	strb	r3, [r7, #23]
          break;
 8006f24:	e05c      	b.n	8006fe0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	885b      	ldrh	r3, [r3, #2]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b22      	cmp	r3, #34	; 0x22
 8006f30:	d108      	bne.n	8006f44 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	88db      	ldrh	r3, [r3, #6]
 8006f36:	2b29      	cmp	r3, #41	; 0x29
 8006f38:	bf28      	it	cs
 8006f3a:	2329      	movcs	r3, #41	; 0x29
 8006f3c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006f3e:	4b2f      	ldr	r3, [pc, #188]	; (8006ffc <USBD_HID_Setup+0x208>)
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	e015      	b.n	8006f70 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	885b      	ldrh	r3, [r3, #2]
 8006f48:	0a1b      	lsrs	r3, r3, #8
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b21      	cmp	r3, #33	; 0x21
 8006f4e:	d108      	bne.n	8006f62 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006f50:	4b2b      	ldr	r3, [pc, #172]	; (8007000 <USBD_HID_Setup+0x20c>)
 8006f52:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	88db      	ldrh	r3, [r3, #6]
 8006f58:	2b09      	cmp	r3, #9
 8006f5a:	bf28      	it	cs
 8006f5c:	2309      	movcs	r3, #9
 8006f5e:	82bb      	strh	r3, [r7, #20]
 8006f60:	e006      	b.n	8006f70 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 faf2 	bl	800854e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	75fb      	strb	r3, [r7, #23]
            break;
 8006f6e:	e037      	b.n	8006fe0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f70:	8abb      	ldrh	r3, [r7, #20]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6939      	ldr	r1, [r7, #16]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 fb5a 	bl	8008630 <USBD_CtlSendData>
          break;
 8006f7c:	e030      	b.n	8006fe0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d107      	bne.n	8006f9a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	2201      	movs	r2, #1
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 fb4c 	bl	8008630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f98:	e022      	b.n	8006fe0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fad6 	bl	800854e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fa6:	e01b      	b.n	8006fe0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d106      	bne.n	8006fc2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	885b      	ldrh	r3, [r3, #2]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fc0:	e00e      	b.n	8006fe0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 fac2 	bl	800854e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8006fce:	e007      	b.n	8006fe0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fabb 	bl	800854e <USBD_CtlError>
          ret = USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	75fb      	strb	r3, [r7, #23]
          break;
 8006fdc:	e000      	b.n	8006fe0 <USBD_HID_Setup+0x1ec>
          break;
 8006fde:	bf00      	nop
      }
      break;
 8006fe0:	e006      	b.n	8006ff0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fab2 	bl	800854e <USBD_CtlError>
      ret = USBD_FAIL;
 8006fea:	2303      	movs	r3, #3
 8006fec:	75fb      	strb	r3, [r7, #23]
      break;
 8006fee:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000080 	.word	0x20000080
 8007000:	20000068 	.word	0x20000068

08007004 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	4613      	mov	r3, r2
 8007010:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	32b0      	adds	r2, #176	; 0xb0
 800701c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007020:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007028:	2303      	movs	r3, #3
 800702a:	e014      	b.n	8007056 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b03      	cmp	r3, #3
 8007036:	d10d      	bne.n	8007054 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	7b1b      	ldrb	r3, [r3, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d109      	bne.n	8007054 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2201      	movs	r2, #1
 8007044:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007046:	4b06      	ldr	r3, [pc, #24]	; (8007060 <USBD_HID_SendReport+0x5c>)
 8007048:	7819      	ldrb	r1, [r3, #0]
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 ff19 	bl	8008e86 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	200000a9 	.word	0x200000a9

08007064 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800706c:	2181      	movs	r1, #129	; 0x81
 800706e:	4809      	ldr	r0, [pc, #36]	; (8007094 <USBD_HID_GetFSCfgDesc+0x30>)
 8007070:	f000 fc35 	bl	80078de <USBD_GetEpDesc>
 8007074:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2222      	movs	r2, #34	; 0x22
 8007086:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007088:	4b02      	ldr	r3, [pc, #8]	; (8007094 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20000044 	.word	0x20000044

08007098 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80070a0:	2181      	movs	r1, #129	; 0x81
 80070a2:	4809      	ldr	r0, [pc, #36]	; (80070c8 <USBD_HID_GetHSCfgDesc+0x30>)
 80070a4:	f000 fc1b 	bl	80078de <USBD_GetEpDesc>
 80070a8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2207      	movs	r2, #7
 80070b4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2222      	movs	r2, #34	; 0x22
 80070ba:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80070bc:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000044 	.word	0x20000044

080070cc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80070d4:	2181      	movs	r1, #129	; 0x81
 80070d6:	4809      	ldr	r0, [pc, #36]	; (80070fc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80070d8:	f000 fc01 	bl	80078de <USBD_GetEpDesc>
 80070dc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2222      	movs	r2, #34	; 0x22
 80070ee:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80070f0:	4b02      	ldr	r3, [pc, #8]	; (80070fc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000044 	.word	0x20000044

08007100 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	32b0      	adds	r2, #176	; 0xb0
 8007116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711a:	2200      	movs	r2, #0
 800711c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	220a      	movs	r2, #10
 8007138:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800713a:	4b03      	ldr	r3, [pc, #12]	; (8007148 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	20000074 	.word	0x20000074

0800714c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007160:	2303      	movs	r3, #3
 8007162:	e01f      	b.n	80071a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	79fa      	ldrb	r2, [r7, #7]
 8007196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f001 fd3f 	bl	8008c1c <USBD_LL_Init>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e025      	b.n	8007210 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	32ae      	adds	r2, #174	; 0xae
 80071d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00f      	beq.n	8007200 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32ae      	adds	r2, #174	; 0xae
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	f107 020e 	add.w	r2, r7, #14
 80071f4:	4610      	mov	r0, r2
 80071f6:	4798      	blx	r3
 80071f8:	4602      	mov	r2, r0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 fd47 	bl	8008cb4 <USBD_LL_Start>
 8007226:	4603      	mov	r3, r0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d009      	beq.n	8007274 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	78fa      	ldrb	r2, [r7, #3]
 800726a:	4611      	mov	r1, r2
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	4798      	blx	r3
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	4611      	mov	r1, r2
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f001 f908 	bl	80084da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80072d8:	461a      	mov	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d01a      	beq.n	8007324 <USBD_LL_SetupStage+0x72>
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d822      	bhi.n	8007338 <USBD_LL_SetupStage+0x86>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <USBD_LL_SetupStage+0x4a>
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d00a      	beq.n	8007310 <USBD_LL_SetupStage+0x5e>
 80072fa:	e01d      	b.n	8007338 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fb5f 	bl	80079c8 <USBD_StdDevReq>
 800730a:	4603      	mov	r3, r0
 800730c:	73fb      	strb	r3, [r7, #15]
      break;
 800730e:	e020      	b.n	8007352 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fbc7 	bl	8007aac <USBD_StdItfReq>
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]
      break;
 8007322:	e016      	b.n	8007352 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc29 	bl	8007b84 <USBD_StdEPReq>
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
      break;
 8007336:	e00c      	b.n	8007352 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800733e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fd14 	bl	8008d74 <USBD_LL_StallEP>
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
      break;
 8007350:	bf00      	nop
  }

  return ret;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	460b      	mov	r3, r1
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d16e      	bne.n	8007452 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800737a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007382:	2b03      	cmp	r3, #3
 8007384:	f040 8098 	bne.w	80074b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	429a      	cmp	r2, r3
 8007392:	d913      	bls.n	80073bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	1ad2      	subs	r2, r2, r3
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	bf28      	it	cs
 80073ae:	4613      	movcs	r3, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f001 f967 	bl	8008688 <USBD_CtlContinueRx>
 80073ba:	e07d      	b.n	80074b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d014      	beq.n	80073f4 <USBD_LL_DataOutStage+0x98>
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d81d      	bhi.n	800740a <USBD_LL_DataOutStage+0xae>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <USBD_LL_DataOutStage+0x7c>
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d003      	beq.n	80073de <USBD_LL_DataOutStage+0x82>
 80073d6:	e018      	b.n	800740a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	75bb      	strb	r3, [r7, #22]
            break;
 80073dc:	e018      	b.n	8007410 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	4619      	mov	r1, r3
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fa5e 	bl	80078aa <USBD_CoreFindIF>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75bb      	strb	r3, [r7, #22]
            break;
 80073f2:	e00d      	b.n	8007410 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fa60 	bl	80078c4 <USBD_CoreFindEP>
 8007404:	4603      	mov	r3, r0
 8007406:	75bb      	strb	r3, [r7, #22]
            break;
 8007408:	e002      	b.n	8007410 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	75bb      	strb	r3, [r7, #22]
            break;
 800740e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007410:	7dbb      	ldrb	r3, [r7, #22]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d119      	bne.n	800744a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b03      	cmp	r3, #3
 8007420:	d113      	bne.n	800744a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007422:	7dba      	ldrb	r2, [r7, #22]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	32ae      	adds	r2, #174	; 0xae
 8007428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007432:	7dba      	ldrb	r2, [r7, #22]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800743a:	7dba      	ldrb	r2, [r7, #22]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	32ae      	adds	r2, #174	; 0xae
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f001 f92d 	bl	80086aa <USBD_CtlSendStatus>
 8007450:	e032      	b.n	80074b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007452:	7afb      	ldrb	r3, [r7, #11]
 8007454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007458:	b2db      	uxtb	r3, r3
 800745a:	4619      	mov	r1, r3
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fa31 	bl	80078c4 <USBD_CoreFindEP>
 8007462:	4603      	mov	r3, r0
 8007464:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007466:	7dbb      	ldrb	r3, [r7, #22]
 8007468:	2bff      	cmp	r3, #255	; 0xff
 800746a:	d025      	beq.n	80074b8 <USBD_LL_DataOutStage+0x15c>
 800746c:	7dbb      	ldrb	r3, [r7, #22]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d122      	bne.n	80074b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b03      	cmp	r3, #3
 800747c:	d117      	bne.n	80074ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800747e:	7dba      	ldrb	r2, [r7, #22]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	32ae      	adds	r2, #174	; 0xae
 8007484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00f      	beq.n	80074ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800748e:	7dba      	ldrb	r2, [r7, #22]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007496:	7dba      	ldrb	r2, [r7, #22]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	32ae      	adds	r2, #174	; 0xae
 800749c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	7afa      	ldrb	r2, [r7, #11]
 80074a4:	4611      	mov	r1, r2
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	4798      	blx	r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	e000      	b.n	80074ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b086      	sub	sp, #24
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	460b      	mov	r3, r1
 80074cc:	607a      	str	r2, [r7, #4]
 80074ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d16f      	bne.n	80075b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3314      	adds	r3, #20
 80074da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d15a      	bne.n	800759c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d914      	bls.n	800751c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	461a      	mov	r2, r3
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 f8ac 	bl	8008666 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800750e:	2300      	movs	r3, #0
 8007510:	2200      	movs	r2, #0
 8007512:	2100      	movs	r1, #0
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f001 fcd7 	bl	8008ec8 <USBD_LL_PrepareReceive>
 800751a:	e03f      	b.n	800759c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	d11c      	bne.n	8007562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007530:	429a      	cmp	r2, r3
 8007532:	d316      	bcc.n	8007562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800753e:	429a      	cmp	r2, r3
 8007540:	d20f      	bcs.n	8007562 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007542:	2200      	movs	r2, #0
 8007544:	2100      	movs	r1, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f001 f88d 	bl	8008666 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007554:	2300      	movs	r3, #0
 8007556:	2200      	movs	r2, #0
 8007558:	2100      	movs	r1, #0
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f001 fcb4 	bl	8008ec8 <USBD_LL_PrepareReceive>
 8007560:	e01c      	b.n	800759c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b03      	cmp	r3, #3
 800756c:	d10f      	bne.n	800758e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800758e:	2180      	movs	r1, #128	; 0x80
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f001 fbef 	bl	8008d74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f001 f89a 	bl	80086d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d03a      	beq.n	800761c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff fe42 	bl	8007230 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075b4:	e032      	b.n	800761c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075b6:	7afb      	ldrb	r3, [r7, #11]
 80075b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	4619      	mov	r1, r3
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f97f 	bl	80078c4 <USBD_CoreFindEP>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	2bff      	cmp	r3, #255	; 0xff
 80075ce:	d025      	beq.n	800761c <USBD_LL_DataInStage+0x15a>
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d122      	bne.n	800761c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d11c      	bne.n	800761c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80075e2:	7dfa      	ldrb	r2, [r7, #23]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	32ae      	adds	r2, #174	; 0xae
 80075e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d014      	beq.n	800761c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80075f2:	7dfa      	ldrb	r2, [r7, #23]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80075fa:	7dfa      	ldrb	r2, [r7, #23]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	32ae      	adds	r2, #174	; 0xae
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	7afa      	ldrb	r2, [r7, #11]
 8007608:	4611      	mov	r1, r2
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	4798      	blx	r3
 800760e:	4603      	mov	r3, r0
 8007610:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007612:	7dbb      	ldrb	r3, [r7, #22]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007618:	7dbb      	ldrb	r3, [r7, #22]
 800761a:	e000      	b.n	800761e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d014      	beq.n	800768c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00e      	beq.n	800768c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6852      	ldr	r2, [r2, #4]
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	4611      	mov	r1, r2
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007688:	2303      	movs	r3, #3
 800768a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800768c:	2340      	movs	r3, #64	; 0x40
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fb29 	bl	8008cea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2240      	movs	r2, #64	; 0x40
 80076a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076a8:	2340      	movs	r3, #64	; 0x40
 80076aa:	2200      	movs	r2, #0
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fb1b 	bl	8008cea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2240      	movs	r2, #64	; 0x40
 80076be:	621a      	str	r2, [r3, #32]

  return ret;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2204      	movs	r2, #4
 8007704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b04      	cmp	r3, #4
 8007728:	d106      	bne.n	8007738 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007730:	b2da      	uxtb	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b03      	cmp	r3, #3
 8007758:	d110      	bne.n	800777c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d005      	beq.n	800777c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	32ae      	adds	r2, #174	; 0xae
 800779c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e01c      	b.n	80077e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d115      	bne.n	80077e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	32ae      	adds	r2, #174	; 0xae
 80077be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32ae      	adds	r2, #174	; 0xae
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	78fa      	ldrb	r2, [r7, #3]
 80077da:	4611      	mov	r1, r2
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	32ae      	adds	r2, #174	; 0xae
 8007800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007808:	2303      	movs	r3, #3
 800780a:	e01c      	b.n	8007846 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b03      	cmp	r3, #3
 8007816:	d115      	bne.n	8007844 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32ae      	adds	r2, #174	; 0xae
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	32ae      	adds	r2, #174	; 0xae
 8007836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	78fa      	ldrb	r2, [r7, #3]
 800783e:	4611      	mov	r1, r2
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00e      	beq.n	80078a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6852      	ldr	r2, [r2, #4]
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	4611      	mov	r1, r2
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800789c:	2303      	movs	r3, #3
 800789e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	885b      	ldrh	r3, [r3, #2]
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b29b      	uxth	r3, r3
 8007902:	429a      	cmp	r2, r3
 8007904:	d920      	bls.n	8007948 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800790e:	e013      	b.n	8007938 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007910:	f107 030a 	add.w	r3, r7, #10
 8007914:	4619      	mov	r1, r3
 8007916:	6978      	ldr	r0, [r7, #20]
 8007918:	f000 f81b 	bl	8007952 <USBD_GetNextDesc>
 800791c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b05      	cmp	r3, #5
 8007924:	d108      	bne.n	8007938 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	789b      	ldrb	r3, [r3, #2]
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	429a      	cmp	r2, r3
 8007932:	d008      	beq.n	8007946 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	885b      	ldrh	r3, [r3, #2]
 800793c:	b29a      	uxth	r2, r3
 800793e:	897b      	ldrh	r3, [r7, #10]
 8007940:	429a      	cmp	r2, r3
 8007942:	d8e5      	bhi.n	8007910 <USBD_GetEpDesc+0x32>
 8007944:	e000      	b.n	8007948 <USBD_GetEpDesc+0x6a>
          break;
 8007946:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007948:	693b      	ldr	r3, [r7, #16]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	881a      	ldrh	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	4413      	add	r3, r2
 800796c:	b29a      	uxth	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4413      	add	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800797e:	68fb      	ldr	r3, [r7, #12]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	3301      	adds	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079aa:	8a3b      	ldrh	r3, [r7, #16]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	b21a      	sxth	r2, r3
 80079b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	b21b      	sxth	r3, r3
 80079b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079ba:	89fb      	ldrh	r3, [r7, #14]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d005      	beq.n	80079ee <USBD_StdDevReq+0x26>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d857      	bhi.n	8007a96 <USBD_StdDevReq+0xce>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00f      	beq.n	8007a0a <USBD_StdDevReq+0x42>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d153      	bne.n	8007a96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	32ae      	adds	r2, #174	; 0xae
 80079f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]
      break;
 8007a08:	e04a      	b.n	8007aa0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b09      	cmp	r3, #9
 8007a10:	d83b      	bhi.n	8007a8a <USBD_StdDevReq+0xc2>
 8007a12:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBD_StdDevReq+0x50>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a6d 	.word	0x08007a6d
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007a8b 	.word	0x08007a8b
 8007a24:	08007a77 	.word	0x08007a77
 8007a28:	08007a8b 	.word	0x08007a8b
 8007a2c:	08007a4b 	.word	0x08007a4b
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007a8b 	.word	0x08007a8b
 8007a38:	08007a63 	.word	0x08007a63
 8007a3c:	08007a55 	.word	0x08007a55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa3c 	bl	8007ec0 <USBD_GetDescriptor>
          break;
 8007a48:	e024      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fba1 	bl	8008194 <USBD_SetAddress>
          break;
 8007a52:	e01f      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fbe0 	bl	800821c <USBD_SetConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
          break;
 8007a60:	e018      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fc83 	bl	8008370 <USBD_GetConfig>
          break;
 8007a6a:	e013      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fcb4 	bl	80083dc <USBD_GetStatus>
          break;
 8007a74:	e00e      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fce3 	bl	8008444 <USBD_SetFeature>
          break;
 8007a7e:	e009      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fd07 	bl	8008496 <USBD_ClrFeature>
          break;
 8007a88:	e004      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fd5e 	bl	800854e <USBD_CtlError>
          break;
 8007a92:	bf00      	nop
      }
      break;
 8007a94:	e004      	b.n	8007aa0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fd58 	bl	800854e <USBD_CtlError>
      break;
 8007a9e:	bf00      	nop
  }

  return ret;
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop

08007aac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d005      	beq.n	8007ad2 <USBD_StdItfReq+0x26>
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d852      	bhi.n	8007b70 <USBD_StdItfReq+0xc4>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <USBD_StdItfReq+0x26>
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d14e      	bne.n	8007b70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d840      	bhi.n	8007b62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	889b      	ldrh	r3, [r3, #4]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d836      	bhi.n	8007b58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	889b      	ldrh	r3, [r3, #4]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff fed9 	bl	80078aa <USBD_CoreFindIF>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2bff      	cmp	r3, #255	; 0xff
 8007b00:	d01d      	beq.n	8007b3e <USBD_StdItfReq+0x92>
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d11a      	bne.n	8007b3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b08:	7bba      	ldrb	r2, [r7, #14]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	32ae      	adds	r2, #174	; 0xae
 8007b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00f      	beq.n	8007b38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b18:	7bba      	ldrb	r2, [r7, #14]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b20:	7bba      	ldrb	r2, [r7, #14]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	32ae      	adds	r2, #174	; 0xae
 8007b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b36:	e004      	b.n	8007b42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b3c:	e001      	b.n	8007b42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	88db      	ldrh	r3, [r3, #6]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d110      	bne.n	8007b6c <USBD_StdItfReq+0xc0>
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10d      	bne.n	8007b6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fdaa 	bl	80086aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b56:	e009      	b.n	8007b6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fcf7 	bl	800854e <USBD_CtlError>
          break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fcf2 	bl	800854e <USBD_CtlError>
          break;
 8007b6a:	e000      	b.n	8007b6e <USBD_StdItfReq+0xc2>
          break;
 8007b6c:	bf00      	nop
      }
      break;
 8007b6e:	e004      	b.n	8007b7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fceb 	bl	800854e <USBD_CtlError>
      break;
 8007b78:	bf00      	nop
  }

  return ret;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	889b      	ldrh	r3, [r3, #4]
 8007b96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ba0:	2b40      	cmp	r3, #64	; 0x40
 8007ba2:	d007      	beq.n	8007bb4 <USBD_StdEPReq+0x30>
 8007ba4:	2b40      	cmp	r3, #64	; 0x40
 8007ba6:	f200 817f 	bhi.w	8007ea8 <USBD_StdEPReq+0x324>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d02a      	beq.n	8007c04 <USBD_StdEPReq+0x80>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	f040 817a 	bne.w	8007ea8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff fe83 	bl	80078c4 <USBD_CoreFindEP>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bc2:	7b7b      	ldrb	r3, [r7, #13]
 8007bc4:	2bff      	cmp	r3, #255	; 0xff
 8007bc6:	f000 8174 	beq.w	8007eb2 <USBD_StdEPReq+0x32e>
 8007bca:	7b7b      	ldrb	r3, [r7, #13]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f040 8170 	bne.w	8007eb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007bd2:	7b7a      	ldrb	r2, [r7, #13]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007bda:	7b7a      	ldrb	r2, [r7, #13]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	32ae      	adds	r2, #174	; 0xae
 8007be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8163 	beq.w	8007eb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007bec:	7b7a      	ldrb	r2, [r7, #13]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	32ae      	adds	r2, #174	; 0xae
 8007bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c02:	e156      	b.n	8007eb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	785b      	ldrb	r3, [r3, #1]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d008      	beq.n	8007c1e <USBD_StdEPReq+0x9a>
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	f300 8145 	bgt.w	8007e9c <USBD_StdEPReq+0x318>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 809b 	beq.w	8007d4e <USBD_StdEPReq+0x1ca>
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d03c      	beq.n	8007c96 <USBD_StdEPReq+0x112>
 8007c1c:	e13e      	b.n	8007e9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d002      	beq.n	8007c30 <USBD_StdEPReq+0xac>
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d016      	beq.n	8007c5c <USBD_StdEPReq+0xd8>
 8007c2e:	e02c      	b.n	8007c8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00d      	beq.n	8007c52 <USBD_StdEPReq+0xce>
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b80      	cmp	r3, #128	; 0x80
 8007c3a:	d00a      	beq.n	8007c52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 f897 	bl	8008d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c46:	2180      	movs	r1, #128	; 0x80
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f893 	bl	8008d74 <USBD_LL_StallEP>
 8007c4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c50:	e020      	b.n	8007c94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fc7a 	bl	800854e <USBD_CtlError>
              break;
 8007c5a:	e01b      	b.n	8007c94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10e      	bne.n	8007c82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00b      	beq.n	8007c82 <USBD_StdEPReq+0xfe>
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b80      	cmp	r3, #128	; 0x80
 8007c6e:	d008      	beq.n	8007c82 <USBD_StdEPReq+0xfe>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	88db      	ldrh	r3, [r3, #6]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 f879 	bl	8008d74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fd11 	bl	80086aa <USBD_CtlSendStatus>

              break;
 8007c88:	e004      	b.n	8007c94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fc5e 	bl	800854e <USBD_CtlError>
              break;
 8007c92:	bf00      	nop
          }
          break;
 8007c94:	e107      	b.n	8007ea6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d002      	beq.n	8007ca8 <USBD_StdEPReq+0x124>
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d016      	beq.n	8007cd4 <USBD_StdEPReq+0x150>
 8007ca6:	e04b      	b.n	8007d40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <USBD_StdEPReq+0x146>
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b80      	cmp	r3, #128	; 0x80
 8007cb2:	d00a      	beq.n	8007cca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f85b 	bl	8008d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cbe:	2180      	movs	r1, #128	; 0x80
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f857 	bl	8008d74 <USBD_LL_StallEP>
 8007cc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc8:	e040      	b.n	8007d4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc3e 	bl	800854e <USBD_CtlError>
              break;
 8007cd2:	e03b      	b.n	8007d4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	885b      	ldrh	r3, [r3, #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d136      	bne.n	8007d4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d004      	beq.n	8007cf0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 f861 	bl	8008db2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fcda 	bl	80086aa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fde2 	bl	80078c4 <USBD_CoreFindEP>
 8007d00:	4603      	mov	r3, r0
 8007d02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d04:	7b7b      	ldrb	r3, [r7, #13]
 8007d06:	2bff      	cmp	r3, #255	; 0xff
 8007d08:	d01f      	beq.n	8007d4a <USBD_StdEPReq+0x1c6>
 8007d0a:	7b7b      	ldrb	r3, [r7, #13]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d11c      	bne.n	8007d4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d10:	7b7a      	ldrb	r2, [r7, #13]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d18:	7b7a      	ldrb	r2, [r7, #13]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	32ae      	adds	r2, #174	; 0xae
 8007d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d010      	beq.n	8007d4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d28:	7b7a      	ldrb	r2, [r7, #13]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	32ae      	adds	r2, #174	; 0xae
 8007d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d3e:	e004      	b.n	8007d4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fc03 	bl	800854e <USBD_CtlError>
              break;
 8007d48:	e000      	b.n	8007d4c <USBD_StdEPReq+0x1c8>
              break;
 8007d4a:	bf00      	nop
          }
          break;
 8007d4c:	e0ab      	b.n	8007ea6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d002      	beq.n	8007d60 <USBD_StdEPReq+0x1dc>
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d032      	beq.n	8007dc4 <USBD_StdEPReq+0x240>
 8007d5e:	e097      	b.n	8007e90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <USBD_StdEPReq+0x1f2>
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b80      	cmp	r3, #128	; 0x80
 8007d6a:	d004      	beq.n	8007d76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fbed 	bl	800854e <USBD_CtlError>
                break;
 8007d74:	e091      	b.n	8007e9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	da0b      	bge.n	8007d96 <USBD_StdEPReq+0x212>
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4413      	add	r3, r2
 8007d92:	3304      	adds	r3, #4
 8007d94:	e00b      	b.n	8007dae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	3304      	adds	r3, #4
 8007dae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2202      	movs	r2, #2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc37 	bl	8008630 <USBD_CtlSendData>
              break;
 8007dc2:	e06a      	b.n	8007e9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	da11      	bge.n	8007df0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	f003 020f 	and.w	r2, r3, #15
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	3324      	adds	r3, #36	; 0x24
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d117      	bne.n	8007e16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fbb0 	bl	800854e <USBD_CtlError>
                  break;
 8007dee:	e054      	b.n	8007e9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	f003 020f 	and.w	r2, r3, #15
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb9d 	bl	800854e <USBD_CtlError>
                  break;
 8007e14:	e041      	b.n	8007e9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da0b      	bge.n	8007e36 <USBD_StdEPReq+0x2b2>
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	3310      	adds	r3, #16
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4413      	add	r3, r2
 8007e32:	3304      	adds	r3, #4
 8007e34:	e00b      	b.n	8007e4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <USBD_StdEPReq+0x2d8>
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b80      	cmp	r3, #128	; 0x80
 8007e5a:	d103      	bne.n	8007e64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	e00e      	b.n	8007e82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 ffc1 	bl	8008df0 <USBD_LL_IsStallEP>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e002      	b.n	8007e82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2202      	movs	r2, #2
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fbd1 	bl	8008630 <USBD_CtlSendData>
              break;
 8007e8e:	e004      	b.n	8007e9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fb5b 	bl	800854e <USBD_CtlError>
              break;
 8007e98:	bf00      	nop
          }
          break;
 8007e9a:	e004      	b.n	8007ea6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fb55 	bl	800854e <USBD_CtlError>
          break;
 8007ea4:	bf00      	nop
      }
      break;
 8007ea6:	e005      	b.n	8007eb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb4f 	bl	800854e <USBD_CtlError>
      break;
 8007eb0:	e000      	b.n	8007eb4 <USBD_StdEPReq+0x330>
      break;
 8007eb2:	bf00      	nop
  }

  return ret;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	2b06      	cmp	r3, #6
 8007ee2:	f200 8128 	bhi.w	8008136 <USBD_GetDescriptor+0x276>
 8007ee6:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <USBD_GetDescriptor+0x2c>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f09 	.word	0x08007f09
 8007ef0:	08007f21 	.word	0x08007f21
 8007ef4:	08007f61 	.word	0x08007f61
 8007ef8:	08008137 	.word	0x08008137
 8007efc:	08008137 	.word	0x08008137
 8007f00:	080080d7 	.word	0x080080d7
 8007f04:	08008103 	.word	0x08008103
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	7c12      	ldrb	r2, [r2, #16]
 8007f14:	f107 0108 	add.w	r1, r7, #8
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4798      	blx	r3
 8007f1c:	60f8      	str	r0, [r7, #12]
      break;
 8007f1e:	e112      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7c1b      	ldrb	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10d      	bne.n	8007f44 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	f107 0208 	add.w	r2, r7, #8
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	2202      	movs	r2, #2
 8007f40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f42:	e100      	b.n	8008146 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	f107 0208 	add.w	r2, r7, #8
 8007f50:	4610      	mov	r0, r2
 8007f52:	4798      	blx	r3
 8007f54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	701a      	strb	r2, [r3, #0]
      break;
 8007f5e:	e0f2      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	885b      	ldrh	r3, [r3, #2]
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	f200 80ac 	bhi.w	80080c4 <USBD_GetDescriptor+0x204>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <USBD_GetDescriptor+0xb4>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007f8d 	.word	0x08007f8d
 8007f78:	08007fc1 	.word	0x08007fc1
 8007f7c:	08007ff5 	.word	0x08007ff5
 8007f80:	08008029 	.word	0x08008029
 8007f84:	0800805d 	.word	0x0800805d
 8007f88:	08008091 	.word	0x08008091
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	7c12      	ldrb	r2, [r2, #16]
 8007fa4:	f107 0108 	add.w	r1, r7, #8
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fae:	e091      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 facb 	bl	800854e <USBD_CtlError>
            err++;
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fbe:	e089      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	7c12      	ldrb	r2, [r2, #16]
 8007fd8:	f107 0108 	add.w	r1, r7, #8
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4798      	blx	r3
 8007fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fe2:	e077      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fab1 	bl	800854e <USBD_CtlError>
            err++;
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ff2:	e06f      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00b      	beq.n	8008018 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	7c12      	ldrb	r2, [r2, #16]
 800800c:	f107 0108 	add.w	r1, r7, #8
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
 8008014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008016:	e05d      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa97 	bl	800854e <USBD_CtlError>
            err++;
 8008020:	7afb      	ldrb	r3, [r7, #11]
 8008022:	3301      	adds	r3, #1
 8008024:	72fb      	strb	r3, [r7, #11]
          break;
 8008026:	e055      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	7c12      	ldrb	r2, [r2, #16]
 8008040:	f107 0108 	add.w	r1, r7, #8
 8008044:	4610      	mov	r0, r2
 8008046:	4798      	blx	r3
 8008048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800804a:	e043      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa7d 	bl	800854e <USBD_CtlError>
            err++;
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	3301      	adds	r3, #1
 8008058:	72fb      	strb	r3, [r7, #11]
          break;
 800805a:	e03b      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	7c12      	ldrb	r2, [r2, #16]
 8008074:	f107 0108 	add.w	r1, r7, #8
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800807e:	e029      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa63 	bl	800854e <USBD_CtlError>
            err++;
 8008088:	7afb      	ldrb	r3, [r7, #11]
 800808a:	3301      	adds	r3, #1
 800808c:	72fb      	strb	r3, [r7, #11]
          break;
 800808e:	e021      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00b      	beq.n	80080b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	7c12      	ldrb	r2, [r2, #16]
 80080a8:	f107 0108 	add.w	r1, r7, #8
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
 80080b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080b2:	e00f      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa49 	bl	800854e <USBD_CtlError>
            err++;
 80080bc:	7afb      	ldrb	r3, [r7, #11]
 80080be:	3301      	adds	r3, #1
 80080c0:	72fb      	strb	r3, [r7, #11]
          break;
 80080c2:	e007      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fa41 	bl	800854e <USBD_CtlError>
          err++;
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	3301      	adds	r3, #1
 80080d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80080d2:	bf00      	nop
      }
      break;
 80080d4:	e037      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7c1b      	ldrb	r3, [r3, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d109      	bne.n	80080f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e6:	f107 0208 	add.w	r2, r7, #8
 80080ea:	4610      	mov	r0, r2
 80080ec:	4798      	blx	r3
 80080ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080f0:	e029      	b.n	8008146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fa2a 	bl	800854e <USBD_CtlError>
        err++;
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	3301      	adds	r3, #1
 80080fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008100:	e021      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	7c1b      	ldrb	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10d      	bne.n	8008126 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f107 0208 	add.w	r2, r7, #8
 8008116:	4610      	mov	r0, r2
 8008118:	4798      	blx	r3
 800811a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	2207      	movs	r2, #7
 8008122:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008124:	e00f      	b.n	8008146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa10 	bl	800854e <USBD_CtlError>
        err++;
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	3301      	adds	r3, #1
 8008132:	72fb      	strb	r3, [r7, #11]
      break;
 8008134:	e007      	b.n	8008146 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa08 	bl	800854e <USBD_CtlError>
      err++;
 800813e:	7afb      	ldrb	r3, [r7, #11]
 8008140:	3301      	adds	r3, #1
 8008142:	72fb      	strb	r3, [r7, #11]
      break;
 8008144:	bf00      	nop
  }

  if (err != 0U)
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d11e      	bne.n	800818a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	88db      	ldrh	r3, [r3, #6]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d016      	beq.n	8008182 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008154:	893b      	ldrh	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00e      	beq.n	8008178 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	88da      	ldrh	r2, [r3, #6]
 800815e:	893b      	ldrh	r3, [r7, #8]
 8008160:	4293      	cmp	r3, r2
 8008162:	bf28      	it	cs
 8008164:	4613      	movcs	r3, r2
 8008166:	b29b      	uxth	r3, r3
 8008168:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800816a:	893b      	ldrh	r3, [r7, #8]
 800816c:	461a      	mov	r2, r3
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fa5d 	bl	8008630 <USBD_CtlSendData>
 8008176:	e009      	b.n	800818c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9e7 	bl	800854e <USBD_CtlError>
 8008180:	e004      	b.n	800818c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa91 	bl	80086aa <USBD_CtlSendStatus>
 8008188:	e000      	b.n	800818c <USBD_GetDescriptor+0x2cc>
    return;
 800818a:	bf00      	nop
  }
}
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop

08008194 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	889b      	ldrh	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d131      	bne.n	800820a <USBD_SetAddress+0x76>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88db      	ldrh	r3, [r3, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d12d      	bne.n	800820a <USBD_SetAddress+0x76>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	885b      	ldrh	r3, [r3, #2]
 80081b2:	2b7f      	cmp	r3, #127	; 0x7f
 80081b4:	d829      	bhi.n	800820a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d104      	bne.n	80081d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f9bc 	bl	800854e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d6:	e01d      	b.n	8008214 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	7bfa      	ldrb	r2, [r7, #15]
 80081dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fe2f 	bl	8008e48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa5d 	bl	80086aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fe:	e009      	b.n	8008214 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008208:	e004      	b.n	8008214 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f99e 	bl	800854e <USBD_CtlError>
  }
}
 8008212:	bf00      	nop
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	b2da      	uxtb	r2, r3
 8008230:	4b4e      	ldr	r3, [pc, #312]	; (800836c <USBD_SetConfig+0x150>)
 8008232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008234:	4b4d      	ldr	r3, [pc, #308]	; (800836c <USBD_SetConfig+0x150>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d905      	bls.n	8008248 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f985 	bl	800854e <USBD_CtlError>
    return USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	e08c      	b.n	8008362 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d002      	beq.n	800825a <USBD_SetConfig+0x3e>
 8008254:	2b03      	cmp	r3, #3
 8008256:	d029      	beq.n	80082ac <USBD_SetConfig+0x90>
 8008258:	e075      	b.n	8008346 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800825a:	4b44      	ldr	r3, [pc, #272]	; (800836c <USBD_SetConfig+0x150>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d020      	beq.n	80082a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008262:	4b42      	ldr	r3, [pc, #264]	; (800836c <USBD_SetConfig+0x150>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800826c:	4b3f      	ldr	r3, [pc, #252]	; (800836c <USBD_SetConfig+0x150>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fe ffe7 	bl	8007246 <USBD_SetClassConfig>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d008      	beq.n	8008294 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f962 	bl	800854e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008292:	e065      	b.n	8008360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fa08 	bl	80086aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2203      	movs	r2, #3
 800829e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082a2:	e05d      	b.n	8008360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fa00 	bl	80086aa <USBD_CtlSendStatus>
      break;
 80082aa:	e059      	b.n	8008360 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082ac:	4b2f      	ldr	r3, [pc, #188]	; (800836c <USBD_SetConfig+0x150>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d112      	bne.n	80082da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80082bc:	4b2b      	ldr	r3, [pc, #172]	; (800836c <USBD_SetConfig+0x150>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082c6:	4b29      	ldr	r3, [pc, #164]	; (800836c <USBD_SetConfig+0x150>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7fe ffd6 	bl	800727e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f9e9 	bl	80086aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082d8:	e042      	b.n	8008360 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80082da:	4b24      	ldr	r3, [pc, #144]	; (800836c <USBD_SetConfig+0x150>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d02a      	beq.n	800833e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7fe ffc4 	bl	800727e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80082f6:	4b1d      	ldr	r3, [pc, #116]	; (800836c <USBD_SetConfig+0x150>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008300:	4b1a      	ldr	r3, [pc, #104]	; (800836c <USBD_SetConfig+0x150>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fe ff9d 	bl	8007246 <USBD_SetClassConfig>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00f      	beq.n	8008336 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f918 	bl	800854e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7fe ffa9 	bl	800727e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008334:	e014      	b.n	8008360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f9b7 	bl	80086aa <USBD_CtlSendStatus>
      break;
 800833c:	e010      	b.n	8008360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9b3 	bl	80086aa <USBD_CtlSendStatus>
      break;
 8008344:	e00c      	b.n	8008360 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f900 	bl	800854e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <USBD_SetConfig+0x150>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7fe ff92 	bl	800727e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800835a:	2303      	movs	r3, #3
 800835c:	73fb      	strb	r3, [r7, #15]
      break;
 800835e:	bf00      	nop
  }

  return ret;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	200005ca 	.word	0x200005ca

08008370 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	88db      	ldrh	r3, [r3, #6]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d004      	beq.n	800838c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f8e2 	bl	800854e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800838a:	e023      	b.n	80083d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	dc02      	bgt.n	800839e <USBD_GetConfig+0x2e>
 8008398:	2b00      	cmp	r3, #0
 800839a:	dc03      	bgt.n	80083a4 <USBD_GetConfig+0x34>
 800839c:	e015      	b.n	80083ca <USBD_GetConfig+0x5a>
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d00b      	beq.n	80083ba <USBD_GetConfig+0x4a>
 80083a2:	e012      	b.n	80083ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3308      	adds	r3, #8
 80083ae:	2201      	movs	r2, #1
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f93c 	bl	8008630 <USBD_CtlSendData>
        break;
 80083b8:	e00c      	b.n	80083d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	2201      	movs	r2, #1
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f934 	bl	8008630 <USBD_CtlSendData>
        break;
 80083c8:	e004      	b.n	80083d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f8be 	bl	800854e <USBD_CtlError>
        break;
 80083d2:	bf00      	nop
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d81e      	bhi.n	8008432 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	88db      	ldrh	r3, [r3, #6]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d004      	beq.n	8008406 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f8a5 	bl	800854e <USBD_CtlError>
        break;
 8008404:	e01a      	b.n	800843c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f043 0202 	orr.w	r2, r3, #2
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	330c      	adds	r3, #12
 8008426:	2202      	movs	r2, #2
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f900 	bl	8008630 <USBD_CtlSendData>
      break;
 8008430:	e004      	b.n	800843c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f88a 	bl	800854e <USBD_CtlError>
      break;
 800843a:	bf00      	nop
  }
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	885b      	ldrh	r3, [r3, #2]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d107      	bne.n	8008466 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f923 	bl	80086aa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008464:	e013      	b.n	800848e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d10b      	bne.n	8008486 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	889b      	ldrh	r3, [r3, #4]
 8008472:	0a1b      	lsrs	r3, r3, #8
 8008474:	b29b      	uxth	r3, r3
 8008476:	b2da      	uxtb	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f913 	bl	80086aa <USBD_CtlSendStatus>
}
 8008484:	e003      	b.n	800848e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f860 	bl	800854e <USBD_CtlError>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d80b      	bhi.n	80084c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	885b      	ldrh	r3, [r3, #2]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d10c      	bne.n	80084d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f8f3 	bl	80086aa <USBD_CtlSendStatus>
      }
      break;
 80084c4:	e004      	b.n	80084d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f840 	bl	800854e <USBD_CtlError>
      break;
 80084ce:	e000      	b.n	80084d2 <USBD_ClrFeature+0x3c>
      break;
 80084d0:	bf00      	nop
  }
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	781a      	ldrb	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7ff fa41 	bl	800798c <SWAPBYTE>
 800850a:	4603      	mov	r3, r0
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3301      	adds	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
 800851c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f7ff fa34 	bl	800798c <SWAPBYTE>
 8008524:	4603      	mov	r3, r0
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff fa27 	bl	800798c <SWAPBYTE>
 800853e:	4603      	mov	r3, r0
 8008540:	461a      	mov	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	80da      	strh	r2, [r3, #6]
}
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008558:	2180      	movs	r1, #128	; 0x80
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fc0a 	bl	8008d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008560:	2100      	movs	r1, #0
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fc06 	bl	8008d74 <USBD_LL_StallEP>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d036      	beq.n	80085f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800858a:	6938      	ldr	r0, [r7, #16]
 800858c:	f000 f836 	bl	80085fc <USBD_GetLen>
 8008590:	4603      	mov	r3, r0
 8008592:	3301      	adds	r3, #1
 8008594:	b29b      	uxth	r3, r3
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	4413      	add	r3, r2
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	7812      	ldrb	r2, [r2, #0]
 80085a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	3301      	adds	r3, #1
 80085ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	4413      	add	r3, r2
 80085b6:	2203      	movs	r2, #3
 80085b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	3301      	adds	r3, #1
 80085be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80085c0:	e013      	b.n	80085ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	4413      	add	r3, r2
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	7812      	ldrb	r2, [r2, #0]
 80085cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	3301      	adds	r3, #1
 80085d2:	613b      	str	r3, [r7, #16]
    idx++;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	3301      	adds	r3, #1
 80085d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	4413      	add	r3, r2
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	3301      	adds	r3, #1
 80085e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e7      	bne.n	80085c2 <USBD_GetString+0x52>
 80085f2:	e000      	b.n	80085f6 <USBD_GetString+0x86>
    return;
 80085f4:	bf00      	nop
  }
}
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800860c:	e005      	b.n	800861a <USBD_GetLen+0x1e>
  {
    len++;
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	3301      	adds	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	3301      	adds	r3, #1
 8008618:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f5      	bne.n	800860e <USBD_GetLen+0x12>
  }

  return len;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2202      	movs	r2, #2
 8008640:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	2100      	movs	r1, #0
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fc15 	bl	8008e86 <USBD_LL_Transmit>

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	2100      	movs	r1, #0
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 fc04 	bl	8008e86 <USBD_LL_Transmit>

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	2100      	movs	r1, #0
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 fc14 	bl	8008ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2204      	movs	r2, #4
 80086b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086ba:	2300      	movs	r3, #0
 80086bc:	2200      	movs	r2, #0
 80086be:	2100      	movs	r1, #0
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fbe0 	bl	8008e86 <USBD_LL_Transmit>

  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2205      	movs	r2, #5
 80086dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086e0:	2300      	movs	r3, #0
 80086e2:	2200      	movs	r2, #0
 80086e4:	2100      	movs	r1, #0
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fbee 	bl	8008ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086fc:	2200      	movs	r2, #0
 80086fe:	490e      	ldr	r1, [pc, #56]	; (8008738 <MX_USB_DEVICE_Init+0x40>)
 8008700:	480e      	ldr	r0, [pc, #56]	; (800873c <MX_USB_DEVICE_Init+0x44>)
 8008702:	f7fe fd23 	bl	800714c <USBD_Init>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800870c:	f7f8 fb6c 	bl	8000de8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008710:	490b      	ldr	r1, [pc, #44]	; (8008740 <MX_USB_DEVICE_Init+0x48>)
 8008712:	480a      	ldr	r0, [pc, #40]	; (800873c <MX_USB_DEVICE_Init+0x44>)
 8008714:	f7fe fd4a 	bl	80071ac <USBD_RegisterClass>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800871e:	f7f8 fb63 	bl	8000de8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008722:	4806      	ldr	r0, [pc, #24]	; (800873c <MX_USB_DEVICE_Init+0x44>)
 8008724:	f7fe fd78 	bl	8007218 <USBD_Start>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800872e:	f7f8 fb5b 	bl	8000de8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008732:	bf00      	nop
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	200000ac 	.word	0x200000ac
 800873c:	200005cc 	.word	0x200005cc
 8008740:	2000000c 	.word	0x2000000c

08008744 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	6039      	str	r1, [r7, #0]
 800874e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	2212      	movs	r2, #18
 8008754:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008756:	4b03      	ldr	r3, [pc, #12]	; (8008764 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	200000c8 	.word	0x200000c8

08008768 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	6039      	str	r1, [r7, #0]
 8008772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2204      	movs	r2, #4
 8008778:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800877a:	4b03      	ldr	r3, [pc, #12]	; (8008788 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	200000dc 	.word	0x200000dc

0800878c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	4907      	ldr	r1, [pc, #28]	; (80087c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087a2:	4808      	ldr	r0, [pc, #32]	; (80087c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087a4:	f7ff fee4 	bl	8008570 <USBD_GetString>
 80087a8:	e004      	b.n	80087b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4904      	ldr	r1, [pc, #16]	; (80087c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087ae:	4805      	ldr	r0, [pc, #20]	; (80087c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087b0:	f7ff fede 	bl	8008570 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	200008a8 	.word	0x200008a8
 80087c4:	080090b0 	.word	0x080090b0

080087c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	4904      	ldr	r1, [pc, #16]	; (80087e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087d8:	4804      	ldr	r0, [pc, #16]	; (80087ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087da:	f7ff fec9 	bl	8008570 <USBD_GetString>
  return USBD_StrDesc;
 80087de:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	200008a8 	.word	0x200008a8
 80087ec:	080090c0 	.word	0x080090c0

080087f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	221a      	movs	r2, #26
 8008800:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008802:	f000 f843 	bl	800888c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008806:	4b02      	ldr	r3, [pc, #8]	; (8008810 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	200000e0 	.word	0x200000e0

08008814 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d105      	bne.n	8008832 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	4907      	ldr	r1, [pc, #28]	; (8008848 <USBD_FS_ConfigStrDescriptor+0x34>)
 800882a:	4808      	ldr	r0, [pc, #32]	; (800884c <USBD_FS_ConfigStrDescriptor+0x38>)
 800882c:	f7ff fea0 	bl	8008570 <USBD_GetString>
 8008830:	e004      	b.n	800883c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4904      	ldr	r1, [pc, #16]	; (8008848 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008836:	4805      	ldr	r0, [pc, #20]	; (800884c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008838:	f7ff fe9a 	bl	8008570 <USBD_GetString>
  }
  return USBD_StrDesc;
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	200008a8 	.word	0x200008a8
 800884c:	080090d4 	.word	0x080090d4

08008850 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	4907      	ldr	r1, [pc, #28]	; (8008884 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008866:	4808      	ldr	r0, [pc, #32]	; (8008888 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008868:	f7ff fe82 	bl	8008570 <USBD_GetString>
 800886c:	e004      	b.n	8008878 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	4904      	ldr	r1, [pc, #16]	; (8008884 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008872:	4805      	ldr	r0, [pc, #20]	; (8008888 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008874:	f7ff fe7c 	bl	8008570 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008878:	4b02      	ldr	r3, [pc, #8]	; (8008884 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	200008a8 	.word	0x200008a8
 8008888:	080090e0 	.word	0x080090e0

0800888c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008892:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <Get_SerialNum+0x44>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008898:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <Get_SerialNum+0x48>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800889e:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <Get_SerialNum+0x4c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4413      	add	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088b2:	2208      	movs	r2, #8
 80088b4:	4909      	ldr	r1, [pc, #36]	; (80088dc <Get_SerialNum+0x50>)
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f814 	bl	80088e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088bc:	2204      	movs	r2, #4
 80088be:	4908      	ldr	r1, [pc, #32]	; (80088e0 <Get_SerialNum+0x54>)
 80088c0:	68b8      	ldr	r0, [r7, #8]
 80088c2:	f000 f80f 	bl	80088e4 <IntToUnicode>
  }
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	1ffff7e8 	.word	0x1ffff7e8
 80088d4:	1ffff7ea 	.word	0x1ffff7ea
 80088d8:	1ffff7ec 	.word	0x1ffff7ec
 80088dc:	200000e2 	.word	0x200000e2
 80088e0:	200000f2 	.word	0x200000f2

080088e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4613      	mov	r3, r2
 80088f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]
 80088fa:	e027      	b.n	800894c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	0f1b      	lsrs	r3, r3, #28
 8008900:	2b09      	cmp	r3, #9
 8008902:	d80b      	bhi.n	800891c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	0f1b      	lsrs	r3, r3, #28
 8008908:	b2da      	uxtb	r2, r3
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	4619      	mov	r1, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	440b      	add	r3, r1
 8008914:	3230      	adds	r2, #48	; 0x30
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	e00a      	b.n	8008932 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	0f1b      	lsrs	r3, r3, #28
 8008920:	b2da      	uxtb	r2, r3
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	4619      	mov	r1, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	440b      	add	r3, r1
 800892c:	3237      	adds	r2, #55	; 0x37
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	3301      	adds	r3, #1
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	4413      	add	r3, r2
 8008942:	2200      	movs	r2, #0
 8008944:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	3301      	adds	r3, #1
 800894a:	75fb      	strb	r3, [r7, #23]
 800894c:	7dfa      	ldrb	r2, [r7, #23]
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	429a      	cmp	r2, r3
 8008952:	d3d3      	bcc.n	80088fc <IntToUnicode+0x18>
  }
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b0a0      	sub	sp, #128	; 0x80
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800896c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	605a      	str	r2, [r3, #4]
 8008976:	609a      	str	r2, [r3, #8]
 8008978:	60da      	str	r2, [r3, #12]
 800897a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800897c:	f107 0310 	add.w	r3, r7, #16
 8008980:	225c      	movs	r2, #92	; 0x5c
 8008982:	2100      	movs	r1, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fb77 	bl	8009078 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008992:	d149      	bne.n	8008a28 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008998:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800899a:	2300      	movs	r3, #0
 800899c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800899e:	f107 0310 	add.w	r3, r7, #16
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fa ff42 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80089ae:	f7f8 fa1b 	bl	8000de8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	4b1e      	ldr	r3, [pc, #120]	; (8008a30 <HAL_PCD_MspInit+0xcc>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	4a1d      	ldr	r2, [pc, #116]	; (8008a30 <HAL_PCD_MspInit+0xcc>)
 80089bc:	f043 0301 	orr.w	r3, r3, #1
 80089c0:	6313      	str	r3, [r2, #48]	; 0x30
 80089c2:	4b1b      	ldr	r3, [pc, #108]	; (8008a30 <HAL_PCD_MspInit+0xcc>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80089d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d4:	2302      	movs	r3, #2
 80089d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d8:	2300      	movs	r3, #0
 80089da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089dc:	2303      	movs	r3, #3
 80089de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089e0:	230a      	movs	r3, #10
 80089e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80089e8:	4619      	mov	r1, r3
 80089ea:	4812      	ldr	r0, [pc, #72]	; (8008a34 <HAL_PCD_MspInit+0xd0>)
 80089ec:	f7f8 fd32 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089f0:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <HAL_PCD_MspInit+0xcc>)
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	4a0e      	ldr	r2, [pc, #56]	; (8008a30 <HAL_PCD_MspInit+0xcc>)
 80089f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fa:	6353      	str	r3, [r2, #52]	; 0x34
 80089fc:	2300      	movs	r3, #0
 80089fe:	60bb      	str	r3, [r7, #8]
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <HAL_PCD_MspInit+0xcc>)
 8008a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a04:	4a0a      	ldr	r2, [pc, #40]	; (8008a30 <HAL_PCD_MspInit+0xcc>)
 8008a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8008a0c:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <HAL_PCD_MspInit+0xcc>)
 8008a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a14:	60bb      	str	r3, [r7, #8]
 8008a16:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	2043      	movs	r0, #67	; 0x43
 8008a1e:	f7f8 fcc6 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a22:	2043      	movs	r0, #67	; 0x43
 8008a24:	f7f8 fcdf 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a28:	bf00      	nop
 8008a2a:	3780      	adds	r7, #128	; 0x80
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40023800 	.word	0x40023800
 8008a34:	40020000 	.word	0x40020000

08008a38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f7fe fc2f 	bl	80072b2 <USBD_LL_SetupStage>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	78fb      	ldrb	r3, [r7, #3]
 8008a84:	4619      	mov	r1, r3
 8008a86:	f7fe fc69 	bl	800735c <USBD_LL_DataOutStage>
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	334c      	adds	r3, #76	; 0x4c
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f7fe fd02 	bl	80074c2 <USBD_LL_DataInStage>
}
 8008abe:	bf00      	nop
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fe fe36 	bl	8007746 <USBD_LL_SOF>
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008aea:	2301      	movs	r3, #1
 8008aec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d102      	bne.n	8008afc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
 8008afa:	e008      	b.n	8008b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d102      	bne.n	8008b0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b04:	2301      	movs	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
 8008b08:	e001      	b.n	8008b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b0a:	f7f8 f96d 	bl	8000de8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b14:	7bfa      	ldrb	r2, [r7, #15]
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe fdd6 	bl	80076ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe fd7e 	bl	8007626 <USBD_LL_Reset>
}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fdd1 	bl	80076ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b5a:	f043 0301 	orr.w	r3, r3, #1
 8008b5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b68:	4b04      	ldr	r3, [pc, #16]	; (8008b7c <HAL_PCD_SuspendCallback+0x48>)
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	4a03      	ldr	r2, [pc, #12]	; (8008b7c <HAL_PCD_SuspendCallback+0x48>)
 8008b6e:	f043 0306 	orr.w	r3, r3, #6
 8008b72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	e000ed00 	.word	0xe000ed00

08008b80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fdc1 	bl	8007716 <USBD_LL_Resume>
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bae:	78fa      	ldrb	r2, [r7, #3]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fe19 	bl	80077ea <USBD_LL_IsoOUTIncomplete>
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bd2:	78fa      	ldrb	r2, [r7, #3]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe fdd5 	bl	8007786 <USBD_LL_IsoINIncomplete>
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fe2b 	bl	800784e <USBD_LL_DevConnected>
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fe28 	bl	8007864 <USBD_LL_DevDisconnected>
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d13c      	bne.n	8008ca6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c2c:	4a20      	ldr	r2, [pc, #128]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a1e      	ldr	r2, [pc, #120]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c38:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c3c:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008c44:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c46:	2206      	movs	r2, #6
 8008c48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c4a:	4b19      	ldr	r3, [pc, #100]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c50:	4b17      	ldr	r3, [pc, #92]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c56:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c58:	2202      	movs	r2, #2
 8008c5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c5c:	4b14      	ldr	r3, [pc, #80]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c62:	4b13      	ldr	r3, [pc, #76]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c68:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c6e:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c74:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c7a:	480d      	ldr	r0, [pc, #52]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c7c:	f7f9 fa0b 	bl	8002096 <HAL_PCD_Init>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c86:	f7f8 f8af 	bl	8000de8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c8a:	2180      	movs	r1, #128	; 0x80
 8008c8c:	4808      	ldr	r0, [pc, #32]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c8e:	f7fa fc7e 	bl	800358e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c92:	2240      	movs	r2, #64	; 0x40
 8008c94:	2100      	movs	r1, #0
 8008c96:	4806      	ldr	r0, [pc, #24]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c98:	f7fa fc32 	bl	8003500 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c9c:	2280      	movs	r2, #128	; 0x80
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	4803      	ldr	r0, [pc, #12]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008ca2:	f7fa fc2d 	bl	8003500 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20000aa8 	.word	0x20000aa8

08008cb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7f9 fb07 	bl	80022de <HAL_PCD_Start>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 f97e 	bl	8008fd8 <USBD_Get_USB_Status>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	70fb      	strb	r3, [r7, #3]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70bb      	strb	r3, [r7, #2]
 8008d00:	4613      	mov	r3, r2
 8008d02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d12:	78bb      	ldrb	r3, [r7, #2]
 8008d14:	883a      	ldrh	r2, [r7, #0]
 8008d16:	78f9      	ldrb	r1, [r7, #3]
 8008d18:	f7fa f805 	bl	8002d26 <HAL_PCD_EP_Open>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f958 	bl	8008fd8 <USBD_Get_USB_Status>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d50:	78fa      	ldrb	r2, [r7, #3]
 8008d52:	4611      	mov	r1, r2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fa f84e 	bl	8002df6 <HAL_PCD_EP_Close>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 f939 	bl	8008fd8 <USBD_Get_USB_Status>
 8008d66:	4603      	mov	r3, r0
 8008d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	4611      	mov	r1, r2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fa f90e 	bl	8002fb4 <HAL_PCD_EP_SetStall>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f91a 	bl	8008fd8 <USBD_Get_USB_Status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dcc:	78fa      	ldrb	r2, [r7, #3]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fa f953 	bl	800307c <HAL_PCD_EP_ClrStall>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 f8fb 	bl	8008fd8 <USBD_Get_USB_Status>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	da0b      	bge.n	8008e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	4613      	mov	r3, r2
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	333e      	adds	r3, #62	; 0x3e
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	e00b      	b.n	8008e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	440b      	add	r3, r1
 8008e36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7f9 ff38 	bl	8002cdc <HAL_PCD_SetAddress>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f8b0 	bl	8008fd8 <USBD_Get_USB_Status>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	603b      	str	r3, [r7, #0]
 8008e92:	460b      	mov	r3, r1
 8008e94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ea4:	7af9      	ldrb	r1, [r7, #11]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	f7fa f839 	bl	8002f20 <HAL_PCD_EP_Transmit>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f88f 	bl	8008fd8 <USBD_Get_USB_Status>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	607a      	str	r2, [r7, #4]
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ee6:	7af9      	ldrb	r1, [r7, #11]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	f7f9 ffcd 	bl	8002e8a <HAL_PCD_EP_Receive>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f86e 	bl	8008fd8 <USBD_Get_USB_Status>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f00:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008f18:	78fb      	ldrb	r3, [r7, #3]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <HAL_PCDEx_LPM_Callback+0x18>
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d01f      	beq.n	8008f62 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008f22:	e03b      	b.n	8008f9c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d007      	beq.n	8008f3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008f2c:	f7f7 fb58 	bl	80005e0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f30:	4b1c      	ldr	r3, [pc, #112]	; (8008fa4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	4a1b      	ldr	r2, [pc, #108]	; (8008fa4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f36:	f023 0306 	bic.w	r3, r3, #6
 8008f3a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6812      	ldr	r2, [r2, #0]
 8008f4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f4e:	f023 0301 	bic.w	r3, r3, #1
 8008f52:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe fbdb 	bl	8007716 <USBD_LL_Resume>
    break;
 8008f60:	e01c      	b.n	8008f9c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	6812      	ldr	r2, [r2, #0]
 8008f70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f74:	f043 0301 	orr.w	r3, r3, #1
 8008f78:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe fbb2 	bl	80076ea <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d005      	beq.n	8008f9a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f8e:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	4a04      	ldr	r2, [pc, #16]	; (8008fa4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f94:	f043 0306 	orr.w	r3, r3, #6
 8008f98:	6113      	str	r3, [r2, #16]
    break;
 8008f9a:	bf00      	nop
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	e000ed00 	.word	0xe000ed00

08008fa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fb0:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <USBD_static_malloc+0x18>)
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	20000fb4 	.word	0x20000fb4

08008fc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]

}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fe6:	79fb      	ldrb	r3, [r7, #7]
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d817      	bhi.n	800901c <USBD_Get_USB_Status+0x44>
 8008fec:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <USBD_Get_USB_Status+0x1c>)
 8008fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff2:	bf00      	nop
 8008ff4:	08009005 	.word	0x08009005
 8008ff8:	0800900b 	.word	0x0800900b
 8008ffc:	08009011 	.word	0x08009011
 8009000:	08009017 	.word	0x08009017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]
    break;
 8009008:	e00b      	b.n	8009022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800900a:	2303      	movs	r3, #3
 800900c:	73fb      	strb	r3, [r7, #15]
    break;
 800900e:	e008      	b.n	8009022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009010:	2301      	movs	r3, #1
 8009012:	73fb      	strb	r3, [r7, #15]
    break;
 8009014:	e005      	b.n	8009022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009016:	2303      	movs	r3, #3
 8009018:	73fb      	strb	r3, [r7, #15]
    break;
 800901a:	e002      	b.n	8009022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800901c:	2303      	movs	r3, #3
 800901e:	73fb      	strb	r3, [r7, #15]
    break;
 8009020:	bf00      	nop
  }
  return usb_status;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <__libc_init_array>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	4d0d      	ldr	r5, [pc, #52]	; (8009068 <__libc_init_array+0x38>)
 8009034:	4c0d      	ldr	r4, [pc, #52]	; (800906c <__libc_init_array+0x3c>)
 8009036:	1b64      	subs	r4, r4, r5
 8009038:	10a4      	asrs	r4, r4, #2
 800903a:	2600      	movs	r6, #0
 800903c:	42a6      	cmp	r6, r4
 800903e:	d109      	bne.n	8009054 <__libc_init_array+0x24>
 8009040:	4d0b      	ldr	r5, [pc, #44]	; (8009070 <__libc_init_array+0x40>)
 8009042:	4c0c      	ldr	r4, [pc, #48]	; (8009074 <__libc_init_array+0x44>)
 8009044:	f000 f820 	bl	8009088 <_init>
 8009048:	1b64      	subs	r4, r4, r5
 800904a:	10a4      	asrs	r4, r4, #2
 800904c:	2600      	movs	r6, #0
 800904e:	42a6      	cmp	r6, r4
 8009050:	d105      	bne.n	800905e <__libc_init_array+0x2e>
 8009052:	bd70      	pop	{r4, r5, r6, pc}
 8009054:	f855 3b04 	ldr.w	r3, [r5], #4
 8009058:	4798      	blx	r3
 800905a:	3601      	adds	r6, #1
 800905c:	e7ee      	b.n	800903c <__libc_init_array+0xc>
 800905e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009062:	4798      	blx	r3
 8009064:	3601      	adds	r6, #1
 8009066:	e7f2      	b.n	800904e <__libc_init_array+0x1e>
 8009068:	08009888 	.word	0x08009888
 800906c:	08009888 	.word	0x08009888
 8009070:	08009888 	.word	0x08009888
 8009074:	0800988c 	.word	0x0800988c

08009078 <memset>:
 8009078:	4402      	add	r2, r0
 800907a:	4603      	mov	r3, r0
 800907c:	4293      	cmp	r3, r2
 800907e:	d100      	bne.n	8009082 <memset+0xa>
 8009080:	4770      	bx	lr
 8009082:	f803 1b01 	strb.w	r1, [r3], #1
 8009086:	e7f9      	b.n	800907c <memset+0x4>

08009088 <_init>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	bf00      	nop
 800908c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908e:	bc08      	pop	{r3}
 8009090:	469e      	mov	lr, r3
 8009092:	4770      	bx	lr

08009094 <_fini>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	bf00      	nop
 8009098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909a:	bc08      	pop	{r3}
 800909c:	469e      	mov	lr, r3
 800909e:	4770      	bx	lr
